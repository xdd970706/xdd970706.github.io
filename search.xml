<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue常用实操方法</title>
      <link href="/2020/10/19/vue%E5%B8%B8%E7%94%A8%E5%AE%9E%E6%93%8D%E6%96%B9%E6%B3%95/"/>
      <url>/2020/10/19/vue%E5%B8%B8%E7%94%A8%E5%AE%9E%E6%93%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="常用组件通信方式"><a href="#常用组件通信方式" class="headerlink" title="常用组件通信方式"></a>常用组件通信方式</h5><hr><ol><li><h6 id="props-emit-on"><a href="#props-emit-on" class="headerlink" title="props/$emit+@on"></a>props/$emit+@on</h6><p>主要是用于实现父子组件间的数据传递，父组件通过<code>props</code>可以向子组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// parent.vue    </span></span><br><span class="line">&lt;child :title=<span class="string">"title"</span>&gt;&lt;<span class="regexp">/child&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// child.vue</span></span><br><span class="line">props: &#123;</span><br><span class="line">    title: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">''</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一来 <code>this.title</code> 就直接拿到从父组件中传过来的 <code>title</code> 的值了（不能在子组件中修改这个值，单向数据流）</p><p>$emit+@on实现子组件向父组件传递数据（在子组件触发父组件绑定的自定义事件）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// parent.vue</span></span><br><span class="line">&lt;child @changeTitle=<span class="string">"changeTitle"</span>&gt;&lt;<span class="regexp">/child&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// child.vue</span></span><br><span class="line"><span class="keyword">this</span>.$emit(<span class="string">'changeTitle'</span>, <span class="string">'我是像父组件传递的数据'</span>)</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><h6 id="attrs和listeners"><a href="#attrs和listeners" class="headerlink" title="attrs和listeners"></a>attrs和listeners</h6><p>vue2.4中新增的<code>$attrs/$listeners</code>可以进行跨级的组件通信。在<code>$attrs</code>包含了父级作用域中不为<code>props</code>的属性绑定的<code>class</code>和<code>style</code>除外：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件 index.vue</span></span><br><span class="line">&lt;list <span class="class"><span class="keyword">class</span></span>=<span class="string">"list-box"</span> </span><br><span class="line">title=<span class="string">"这是父组件的标题"</span> </span><br><span class="line">desc=<span class="string">"这是父组件的描述"</span> </span><br><span class="line">:list=<span class="string">"list"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/list&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件 list.vue</span></span><br><span class="line">props: &#123;</span><br><span class="line">    list: [],</span><br><span class="line">&#125;,</span><br><span class="line">mounted() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$attrs)  <span class="comment">// &#123;title: "这是父组件的标题", desc: "这是父组件的描述"&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件 list.vue</span></span><br><span class="line">&lt;detail v-bind=<span class="string">"$attrs"</span>&gt;&lt;<span class="regexp">/detial&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 孙子组件 detail.vue</span></span><br><span class="line"><span class="comment">// 不定义props，直接打印 $attrs</span></span><br><span class="line">mounted() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$attrs)  <span class="comment">// &#123;title: "这是父组件的标题", desc: "这是父组件的标题"&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>detail</code>是父组件的子组件的子组件（孙子组件）依然可以拿到父组件传递过来的数据，<code>$attrs</code> 是可以进行跨级的参数传递，实现父到子的通信；同样的，通过 <code>$listeners</code> 用类似的操作方式可以进行跨级的事件传递，实现子到父的通信。<code>$listeners</code> 包含了父作用域中不含 <code>.native</code> 修饰的 <code>v-on</code> 事件监听器，通过 <code>v-on=&quot;$listeners&quot;</code> 传递到子组件内部。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件 index.vue</span></span><br><span class="line">&lt;list @change=<span class="string">"change"</span> @update.native=<span class="string">"update"</span>&gt;&lt;<span class="regexp">/list&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 子组件 list.vue</span></span><br><span class="line"><span class="regexp">&lt;detail v-on="$listeners"&gt;&lt;/</span>detail&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 孙子组件 detail.vue</span></span><br><span class="line">mounted() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$listeners.change()</span><br><span class="line">    <span class="keyword">this</span>.$listeners.update() <span class="comment">// TypeError: this.$listeners.update is not a function</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h6 id="provide-inject"><a href="#provide-inject" class="headerlink" title="provide/inject"></a>provide/inject</h6><p>允许一个祖先组件向后代组件注入一个依赖（属性和方法），实现跨级的父子通信，一般在开发高阶组件和组件库的时候好用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件 index.vue</span></span><br><span class="line">data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        title: <span class="string">'父组件提供的数据'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">provide() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        detail: &#123;</span><br><span class="line">            title: <span class="keyword">this</span>.title,</span><br><span class="line">            change: <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log( val )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 孙子组件 detail.vue</span></span><br><span class="line">inject: [<span class="string">'detail'</span>],</span><br><span class="line">mounted() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.detail.title)  <span class="comment">// 父组件提供的数据</span></span><br><span class="line">    <span class="keyword">this</span>.detail.title = <span class="string">'hello world'</span>  <span class="comment">// 虽然值被改变了，但是父组件中 title 并不会重新渲染</span></span><br><span class="line">    <span class="keyword">this</span>.detail.change(<span class="string">'改变后的值'</span>)  <span class="comment">// 执行这句后将打印：改变后的值 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="注：provide-和-inject-的绑定对于原始类型来说并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的-property-还是可响应的。这也就是为什么在孙子组件中改变了-title，但是父组件不会重新渲染的原因。"><a href="#注：provide-和-inject-的绑定对于原始类型来说并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的-property-还是可响应的。这也就是为什么在孙子组件中改变了-title，但是父组件不会重新渲染的原因。" class="headerlink" title="注：provide 和 inject 的绑定对于原始类型来说并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的 property 还是可响应的。这也就是为什么在孙子组件中改变了 title，但是父组件不会重新渲染的原因。"></a>注：<code>provide</code> 和 <code>inject</code> 的绑定对于原始类型来说并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的 property 还是可响应的。这也就是为什么在孙子组件中改变了 <code>title</code>，但是父组件不会重新渲染的原因。</h6></li><li><h6 id="EventBus"><a href="#EventBus" class="headerlink" title="EventBus"></a>EventBus</h6><p>利用vue实例，通过进行消息的发布和订阅，可以实现任意两个组件之间的通信：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eventBus.js</span></span><br><span class="line"><span class="comment">// 通过导出一个 Vue 实例，然后再需要的地方引入：</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> EventBus = <span class="keyword">new</span> Vue()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 EventBus 订阅和发布消息</span></span><br><span class="line"><span class="keyword">import</span> &#123;EventBus&#125; <span class="keyword">from</span> <span class="string">'../utils/eventBus.js'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅处</span></span><br><span class="line">EventBus.$on(<span class="string">'update'</span>, val =&gt; &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布处</span></span><br><span class="line">EventBus.$emit(<span class="string">'update'</span>, <span class="string">'数据的传递'</span>)</span><br></pre></td></tr></table></figure><p>或者用这这种方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="comment">// 在 main.js 中初始化一个全局的事件总线：</span></span><br><span class="line">Vue.prototype.$eventBus = <span class="keyword">new</span> Vue()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要订阅的地方</span></span><br><span class="line"><span class="keyword">this</span>.$eventBus.$on(<span class="string">'update'</span>, val =&gt; &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要发布信息的地方</span></span><br><span class="line"><span class="keyword">this</span>.$eventBus.$emit(<span class="string">'update'</span>, <span class="string">'更新信息'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 移除事件监听</span></span><br><span class="line"><span class="keyword">this</span>.$eventBus.$off(<span class="string">'update'</span>, &#123;&#125;)</span><br></pre></td></tr></table></figure><p>第二种全局定义的方式可以避免多次导入EventBus对象，这种组件通信方式只要订阅和发布的顺序得当，且时间名称保持唯一性，理论上可以在任何2个组件之间进行通信。但是如果项目的业务复杂，建议使用vuex。</p></li><li><h6 id="vuex全局状态管理仓库"><a href="#vuex全局状态管理仓库" class="headerlink" title="vuex全局状态管理仓库"></a>vuex全局状态管理仓库</h6><p><code>Vuex</code> 是一个专门服务于 <code>Vue.js</code> 应用的状态管理工具。适用于中大型应用。<code>Vuex</code> 中有一些专有概念需要先了解下：</p><ul><li><code>State</code>：用于数据的存储，是 <code>store</code> 中的唯一数据源；</li><li><code>Getter</code>：类似于计算属性，就是对 <code>State</code> 中的数据进行二次的处理，比如筛选和对多个数据进行求值等；</li><li><code>Mutation</code>：类似事件，是改变 <code>Store</code> 中数据的唯一途径，只能进行同步操作；</li><li><code>Action</code>：类似 <code>Mutation</code>，通过提交 <code>Mutation</code> 来改变数据，而不直接操作 <code>State</code>，可以进行异步操作；</li><li><code>Module</code>：当业务复杂的时候，可以把 <code>store</code> 分成多个模块，便于维护；</li></ul><p>对于这几个概念有各种对应的 <code>map</code> 辅助函数用来简化操作，比如 <code>mapState</code>，如下三种写法其实是一个意思，都是为了从 <code>state</code> 中获取数据，并且通过计算属性返回给组件使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    count() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.count</span><br><span class="line">    &#125;,</span><br><span class="line">    ...mapState(&#123;</span><br><span class="line">        count: <span class="function"><span class="params">state</span> =&gt;</span> state.count</span><br><span class="line">    &#125;),</span><br><span class="line">    ...mapState([<span class="string">'count'</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 需要提交一个mutation去改变state中的数据</span><br><span class="line">methods: &#123;</span><br><span class="line">    increment() &#123;</span><br><span class="line">        this.$store.commit(&#39;increment&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    ...mapMutations([&#39;increment&#39;]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 接下来就用一个极简的例子来展示 Vuex 中任意2个组件间的状态管理。</span><br><span class="line">&#x2F;&#x2F; 1、 新建 store.js</span><br><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import Vuex from &#39;vuex&#39;</span><br><span class="line">Vue.use(Vuex)</span><br><span class="line">    </span><br><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        count: 0,</span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        increment(state) &#123;</span><br><span class="line">            state.count++</span><br><span class="line">        &#125;,</span><br><span class="line">        decrement(state) &#123;</span><br><span class="line">            state.count--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>、 创建一个带 store 的 Vue 实例</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./utils/store'</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    router,</span><br><span class="line">    store,</span><br><span class="line">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  任意组件 A 实现点击递增</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;p @click=<span class="string">"increment"</span>&gt;click to increment：&#123;&#123;count&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123;mapState, mapMutations&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    computed: &#123;</span><br><span class="line">        ...mapState([<span class="string">'count'</span>])</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        ...mapMutations([<span class="string">'increment'</span>])</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 任意组件 B 实现点击递减</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;p @click&#x3D;&quot;decrement&quot;&gt;click to decrement：&#123;&#123;count&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;mapState, mapMutations&#125; from &#39;vuex&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">    computed: &#123;</span><br><span class="line">        ...mapState([&#39;count&#39;])</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        ...mapMutations([&#39;decrement&#39;])</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>需要对 <code>State</code> 数据进行二次筛选会用到 <code>Getter</code>，然后如果需要异步的提交那么需要使用<code>Action</code>，再比如如果模块很多，可以将 <code>store</code> 分模块进行状态管理。</p></li><li><h6 id="Vue-observable实现mini-vuex"><a href="#Vue-observable实现mini-vuex" class="headerlink" title="Vue.observable实现mini vuex"></a>Vue.observable实现mini vuex</h6><p>这是一个 <code>Vue2.6</code> 中新增的 <code>API</code>，用来让一个对象可以响应。我们可以利用这个特点来实现一个小型的状态管理器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> state = Vue.observable(&#123;</span><br><span class="line">    count: <span class="number">0</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    increment() &#123;</span><br><span class="line">        state.count++</span><br><span class="line">    &#125;</span><br><span class="line">    decrement() &#123;</span><br><span class="line">        state.count--</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// parent.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; count &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; state &#125; <span class="keyword">from</span> <span class="string">'../store'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    computed: &#123;</span><br><span class="line">        count() &#123;</span><br><span class="line">            <span class="keyword">return</span> state.count</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// child.vue</span></span><br><span class="line"><span class="keyword">import</span>  &#123; mutations &#125; <span class="keyword">from</span> <span class="string">'../store'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        handleClick() &#123;</span><br><span class="line">            mutations.increment()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h6 id="refs-children-parent-root"><a href="#refs-children-parent-root" class="headerlink" title="refs/children/parent/root"></a>refs/children/parent/root</h6><p>通过给子组件定义ref属性可以使用$ref来直接操作子组件的方法和属性。</p></li></ol><h5 id="6类可以掌握的修饰符"><a href="#6类可以掌握的修饰符" class="headerlink" title="6类可以掌握的修饰符"></a>6类可以掌握的修饰符</h5><hr><ol><li><h6 id="表单修饰符"><a href="#表单修饰符" class="headerlink" title="表单修饰符"></a>表单修饰符</h6><ul><li><code>.trim</code>：过滤输入内容的首尾空格，这个和直接拿到字符串然后通过 <code>str.trim()</code> 去除字符串首尾空格是一个意思。</li><li><code>.number</code>：如果输入的第一个字符是数字，那就只能输入数字，否则他输入的就是普通字符串。</li><li><code>.lazy</code>：对表单输入的结果进行延迟响应，通常和 <code>v-model</code> 搭配使用。正常情况下在 <code>input</code> 里输入内容会在 <code>p</code> 标签里实时的展示出来，但是加上 <code>.lazy</code> 后则需要在输入框失去焦点的时候才触发响应。</li></ul></li><li><h6 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h6><p><code>Vue</code> 的事件修饰符是专门为 <code>v-on</code> 设计的，可以这样使用：<code>@click.stop=&quot;handleClick&quot;</code>，还能串联使用：<code>@click.stop.prevent=&quot;handleClick&quot;</code>。</p><ul><li><p><code>.stop</code>：阻止事件冒泡，和原生 <code>event.stopPropagation()</code> 是一样的效果。如上代码，当点击 <code>p</code> 标签的时候，<code>div</code> 上的点击事件也会触发，加上 <code>.stop</code> 后事件就不会往父级传递，那父级的事件就不会触发了。</p></li><li><p><code>.prevent</code>：阻止默认事件，和原生的 <code>event.preventDefault()</code> 是一样的效果。比如一个带有 <code>href</code> 的链接上添加了点击事件，那么事件触发的时候也会触发链接的跳转，但是加上 <code>.prevent</code> 后就不会触发链接跳转了。</p></li><li><p><code>.capture</code>：默认的事件流是：捕获阶段-目标阶段-冒泡阶段，即事件从最具体目标元素开始触发，然后往上冒泡。而加上 <code>.capture</code> 后则是反过来，外层元素先触发事件，然后往深层传递。</p></li><li><p><code>.self</code>：只触发自身的事件，不会传递到父级，和 <code>.stop</code> 的作用有点类似。</p></li><li><p><code>.once</code>：只会触发一次该事件。</p></li><li><p><code>.passive</code>：当页面滚动的时候就会一直触发 <code>onScroll</code> 事件，这个其实是存在性能问题的，尤其是在移动端，当给他加上 <code>.passive</code> 后触发的就不会那么频繁了。</p></li><li><p><code>.native</code>：现在在组件上使用 <code>v-on</code> 只会监听自定义事件 (组件用 <code>$emit</code> 触发的事件)。如果要监听根元素的原生事件，可以使用 <code>.native</code> 修饰符，比如如下的 <code>el-input</code>，如果不加 <code>.native</code> 当回车的时候就不会触发 <code>search</code> 函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-input type=<span class="string">"text"</span> v-model=<span class="string">"name"</span> @keyup.enter.native=<span class="string">"search"</span>&gt;&lt;<span class="regexp">/el-input&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><h6 id="鼠标按钮修饰符"><a href="#鼠标按钮修饰符" class="headerlink" title="鼠标按钮修饰符"></a>鼠标按钮修饰符</h6><ul><li><code>.left</code>：鼠标左键点击；</li><li><code>.right</code>：鼠标右键点击；</li><li><code>.middle</code>：鼠标中键点击；</li></ul></li><li><h6 id="键盘按钮修饰符"><a href="#键盘按钮修饰符" class="headerlink" title="键盘按钮修饰符"></a>键盘按钮修饰符</h6><p><code>Vue</code> 提供了一些常用的按键码：</p><ul><li><code>.enter</code></li><li><code>.tab</code></li><li><code>.delete</code> (捕获“删除”和“退格”键)</li><li><code>.esc</code></li><li><code>.space</code></li><li><code>.up</code></li><li><code>.down</code></li><li><code>.left</code></li><li><code>.right</code></li></ul><p>另外，你也可以直接将 <code>KeyboardEvent.key</code> 暴露的任意有效按键名转换为 <code>kebab-case</code> 来作为修饰符</p></li><li><h6 id="exact修饰符"><a href="#exact修饰符" class="headerlink" title=".exact修饰符"></a>.exact修饰符</h6><p><code>.exact</code> 修饰符允许你控制由精确的系统修饰符组合触发的事件。</p></li><li><h6 id="sync修饰符"><a href="#sync修饰符" class="headerlink" title=".sync修饰符"></a>.sync修饰符</h6><p><code>.sync</code> 修饰符常被用于子组件更新父组件数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// parent.vue</span></span><br><span class="line">&lt;child :title.sync=<span class="string">"title"</span>&gt;&lt;<span class="regexp">/child&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ child.vue</span></span><br><span class="line"><span class="regexp">this.$emit('update:title', 'hello')</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 在子组件简写</span></span><br><span class="line"><span class="regexp">&lt;child :title="title" @update:title="title = $event"&gt;&lt;/</span>child&gt;</span><br></pre></td></tr></table></figure></li></ol><h5 id="几种编写可复用的模块"><a href="#几种编写可复用的模块" class="headerlink" title="几种编写可复用的模块"></a>几种编写可复用的模块</h5><hr><ol><li><h6 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h6><p>vue本身的一大特点就是组件化开发。</p></li><li><h6 id="使用混入mixins"><a href="#使用混入mixins" class="headerlink" title="使用混入mixins"></a>使用混入mixins</h6><p>什么是混入呢？从代码结构上来看，混入其实就是半个组件，一个 <code>Vue</code> 组件可以包括 <code>template</code>、<code>script</code> 和 <code>style</code> 三部分，而混入其实就是 <code>script</code> 里面的内容。一个混入对象包含任意组件选项，比如 <code>data</code>、<code>methods</code>、<code>computed</code>、<code>watch</code> 、生命周期钩子函数、甚至是 <code>mixins</code> 自己等，混入被设计出来就是旨在提高代码的灵活性、可复用性。</p><p>什么时候应该使用混入呢？当可复用逻辑只是 <code>JS</code> 代码层面的，而无 <code>template</code> 的时候就可以考虑用混入了。比如需要记录用户在页面的停留的时间，那我们就可以把这段逻辑抽出来放在 <code>mixins</code> 里：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mixins.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> statMixin = &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        enterPage() &#123;&#125;,</span><br><span class="line">        leavePage() &#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        <span class="keyword">this</span>.enterPage()</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeDestroyed() &#123;</span><br><span class="line">        <span class="keyword">this</span>.leavePage()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在需要统计页面停留时间的地方加上</span></span><br><span class="line"><span class="keyword">import</span> &#123; statMixin &#125; <span class="keyword">from</span> <span class="string">'../common/mixins'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    mixins: [statMixin]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用混入的时如果出现组件选项冲突时，合并的规则为:</p><p><code>data</code> 将进行递归合并，对于键名冲突的以组件数据为准：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mixinA 的 data</span></span><br><span class="line">data() &#123;</span><br><span class="line">    obj: &#123;</span><br><span class="line">        name: <span class="string">'bubuzou'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// component A</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    mixins: [mixinA],</span><br><span class="line">    data()&#123;</span><br><span class="line">        obj: &#123;</span><br><span class="line">            name: <span class="string">'hello'</span>,</span><br><span class="line">            age: <span class="number">21</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="keyword">this</span>.obj )  <span class="comment">// &#123; name: 'bubuzou', 'age': 21 &#125;    </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于生命周期钩子函数将会合并成一个数组，混入对象的钩子将先被执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mixin A</span></span><br><span class="line"><span class="keyword">const</span> mixinA = &#123;</span><br><span class="line">    created() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">'第一个执行'</span> )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mixin B</span></span><br><span class="line"><span class="keyword">const</span> mixinB = &#123;</span><br><span class="line">    mixins: [mixinA]</span><br><span class="line">    created() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">'第二个执行'</span> )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// component A</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    mixins: [mixinB]</span><br><span class="line">    created() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">'最后一个执行'</span> )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>值为对象的选项，例如 <code>methods</code>、<code>components</code> 和 <code>directives</code>，将被合并为同一个对象。两个对象键名冲突时，取组件对象的键值对。</p></li><li><h6 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h6><p>除了 <code>Vue</code> 内置的一些指令比如 <code>v-model</code>、<code>v-if</code> 等，<code>Vue</code> 还允许我们自定义指令。在 <code>Vue2.0</code> 中，代码复用和抽象的主要形式是组件。然而，有的情况下，你仍然需要对普通 <code>DOM</code> 元素进行底层操作，这时候就会用到自定义指令。比如我们可以通过自定义一个指令来控制按钮的权限。我们期望设计一个如下形式的指令来控制按钮权限：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button v-auth=<span class="string">"['user']"</span>&gt;提交&lt;<span class="regexp">/button&gt;</span></span><br></pre></td></tr></table></figure><p>通过在按钮的指令里传入一组权限，如果该按钮只有 <code>admin</code> 权限才可以提交，而我们传入一个别的权限，比如 <code>user</code>，那这个按钮就不应该显示了。接下来我们去注册一个全局的指令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// auth.js</span></span><br><span class="line"><span class="keyword">const</span> AUTH_LIST = [<span class="string">'admin'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAuth</span>(<span class="params">auths</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> AUTH_LIST.some(<span class="function"><span class="params">item</span> =&gt;</span> auths.includes(item))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">install</span>(<span class="params">Vue, options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    Vue.directive(<span class="string">'auth'</span>, &#123;</span><br><span class="line">        inserted(el, binding) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!checkAuth(binding.value)) &#123;</span><br><span class="line">                el.parentNode &amp;&amp; el.parentNode.removeChild(el)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; install &#125;</span><br></pre></td></tr></table></figure><p>然后我们需要在 <code>main.js</code> 里通过安装插件的方式来启用这个指令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Auth <span class="keyword">from</span> <span class="string">'./utils/auth'</span></span><br><span class="line">Vue.use(Auth)</span><br></pre></td></tr></table></figure></li><li><h6 id="使用渲染函数"><a href="#使用渲染函数" class="headerlink" title="使用渲染函数"></a>使用渲染函数</h6><p>这里将使用渲染函数实现上面介绍过的的权限按钮。使用方式如下，把需要控制权限的按钮包在权限组件 <code>authority</code> 里面，如果有该权限就显示，没有就不显示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;authority :auth=<span class="string">"['admin']"</span>&gt;</span><br><span class="line">    &lt;button&gt;提交&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>authority&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 然后我们用渲染函数去实现一个 authority 组件：</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">const</span> AUTH_LIST = [<span class="string">'admin'</span>, <span class="string">'user'</span>, <span class="string">'org'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAuth</span>(<span class="params">auths</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> AUTH_LIST.some(<span class="function"><span class="params">item</span> =&gt;</span> auths.includes(item))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    functional: <span class="literal">true</span>,</span><br><span class="line">    props: &#123;</span><br><span class="line">        auth: &#123;</span><br><span class="line">            type: <span class="built_in">Array</span>,</span><br><span class="line">            required: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    render(h, context) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; props,  scopedSlots&#125; = context</span><br><span class="line">        <span class="keyword">return</span> checkAuth(props.auth) ? scopedSlots.default() : <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="comment">// 全局注册这个组件：</span></span><br><span class="line"><span class="keyword">import</span> Authority <span class="keyword">from</span> <span class="string">'./components/authority'</span></span><br><span class="line">Vue.component(<span class="string">'authority'</span>, Authority)</span><br></pre></td></tr></table></figure></li><li><h6 id="使用过滤器"><a href="#使用过滤器" class="headerlink" title="使用过滤器"></a>使用过滤器</h6></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试总结-3</title>
      <link href="/2020/10/15/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-3/"/>
      <url>/2020/10/15/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>话不多说，直接走流程。笔试—&gt;技术面试—&gt;老板面试。</p><h5 id="面试过程"><a href="#面试过程" class="headerlink" title="面试过程"></a>面试过程</h5><hr><p>本次面试还是跟往常一样先是笔试，笔试的原题记不住，大概考查的内容如下：</p><ol><li>css：元素和内容的居中</li><li>css：两种盒子模型的宽度的计算规则（content-box和border-box）</li><li>js：js线程中异步任务和同步任务的执行顺序</li></ol><a id="more"></a><ol><li>js：this指向问题，和引用类型存值的方式</li><li>手写table表格</li><li>手写登录和前端简单的验证业务逻辑（vue、jquery、axios）</li><li>数组排序，以及去除数组中的偶数</li></ol><p>笔试主要就是css和js一些简单的基础问题。</p><p>然后就是技术面试，主要是vue的问题，具体如下：</p><ol><li>在vue中，给data中某个对象添加一个属性，虽然该对象上有这个属性，但是视图层并没有更新该数据，怎么解决？</li><li>vue-router传参的方式，以及他们的区别</li><li>在项目开发中使用过vuex吗？vuex是什么？</li><li>vue中组件的通信</li><li>$el和el的区别</li><li>如何访问DOM元素</li><li>项目的一些技术栈</li></ol><p>然后就是公司的老板谈了一下主要是公司的业务、技术栈、上班时间、薪资待遇，老板说可以下午就先做一下看看技术，可以的话就直接入职，但是我下午有面试就拒绝了，而且我本人也不太想着去一家外包，虽然能够接触到大量的项目的事，但是这样会把自己的路走窄了，实习我跟想有更多自己的事情去给自己充充电，在把该完成的任务完成后学习更多的技术。</p><h5 id="面试总结"><a href="#面试总结" class="headerlink" title="面试总结"></a>面试总结</h5><hr><ol><li><p>Array.sort(接受一个函数作为参数)</p></li><li><p>在vue组件初始化时，存在data中的对象的属性会调用getter和setter方法，视图层才会相应这些数据的变化。而vue2.0本身是不能够监听对象的，他是遍历对象中的属性调用每个属性的getter和setter方法，所以当vue实例已经初始化后给对象添加属性视图层是无法相应这些数据的变化。解决方案：<code>this.$set(obj,key,value)</code>/<code>vue.set(obj,key,value)</code>向响应式对象（obj）添加一个属性（key）该属性的值为value，让该属性也同样是响应式的，且触发视图的更新。</p></li><li><p>router传参有三种方式</p><ol><li><pre><code>传参: this.$router.push({        path:&apos;/xxx&apos;        query:{          id:id        }      })接收参数:this.$route.query.id<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2.</span><br></pre></td></tr></table></figure>传参: this.$router.push({        name:&apos;xxx&apos;        params:{          id:id        }      })接收参数:this.$route.params.id<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. 采用：的形式，在配置路由的时候给path属性的属性值，进行参数的绑定</span><br></pre></td></tr></table></figure>路由配置：path:&apos;/xxx/:id:username&apos;,name:&apos;login&apos;,component:Login页面跳转：&lt;router-link to=&quot;/xxx/10/xiadong&quot;&gt;登录&lt;/router-link&gt;</code></pre></li><li><p>区别：</p><ol><li>query和params的区别：query使用path和name都可以传参，而params只能用name传参，query类似get传参，params类似于post，即在浏览器地址栏中query会显示参数，params不会显示。params需要在router中path属性进行参数的绑定配置，否则用户刷新页面后参数就会消失，而query不会，因为query相当于是在path后面将参数拼接上去的，而params相当于是路由的一部分。</li></ol></li></ol></li><li><p>el和$el</p><ol><li>el是在页面上提供一个存在DOM元素作为vue实例挂载的目标。而$el是vue实例的一个属性，在挂载阶段还没开始的时候，$el属性是不可见的。在vue生命周期mounted阶段，el被创建vm.$el替换。</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> -总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试总结-2</title>
      <link href="/2020/10/14/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-2/"/>
      <url>/2020/10/14/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在经过第一次面试后，紧接着第二天就收到另一家公司的面试邀请。由于已经经历了一次面试，所以这次面试我感觉自己稍微没有那么紧张了，下面是我本次面试过程以及面试的总结。</p><h5 id="面试过程"><a href="#面试过程" class="headerlink" title="面试过程"></a>面试过程</h5><hr><p>首先进去还是<strong>笔试</strong>，可能我的简历上写了对vue跟熟练一些，所以笔试的题目基本上都是关于vue的一些题。两个选择题加上10个左右的简答题，具体的内容如下：</p><a id="more"></a><ol><li>两个选择题主要是一些vue基础题，大概是什么忘了，反正是很基础的题</li><li>RESTful  API 是什么？</li><li>mvvm框架是什么？与一般的框架（jquery）有什么区别？适合在什么场景用？</li><li>列举常用vue指令，并说明使用方法</li><li>如何封装一个vue组件？</li><li>说下自己对vue生命周期的理解</li><li>如何修改第三方ui框架的样式</li><li>vue实现数据双向绑定的的原理</li></ol><p>我感觉自己笔试部分答得还是不太好，毕竟vue的源码自己还在看，所以对于vue的一些理解并没有那么深，因为技术这个东西，会用和会说还是有一定的差距的，能够用并且能够组织自己的语言去描述这些技术点的问题，那说明你对这门技术是掌握了的。</p><p>笔试完了后，那边就让我去复试，复试我的听说是一个工作前端5，6的老师，主要问了：</p><ol><li>对前端个人的想法和看法</li><li>vue中项目的一些问题</li><li>vuex</li><li>对自己的前端技术一个定位</li><li>node.js</li><li>created与mounted的区别</li><li>使用过什么前端ui框架</li><li><code>&lt;router-link&gt;</code>和<code>&lt;a&gt;</code>标签的区别</li><li>然后很多就问了我做过的项目里的一些问题</li><li>最后就是看我这边有什么问题需要问的</li></ol><p>然后就让我稍微等待一下，应该是觉得技术没问题，就让我和他们的HR谈，主要的是个人规划和薪资，最后就是和他们的boss谈，也主要是个人目前的状态，薪资，以及上班的时间问题。</p><p>以上就是本次面试的一个大概流程</p><h5 id="面试总结"><a href="#面试总结" class="headerlink" title="面试总结"></a>面试总结</h5><hr><p>这个总结主要是对自己答得不好的地方一个简单的总结，但是我觉得自己答得都不太好，所以这里就挑选几个面试高频的。</p><ol><li><p>vue生命周期中<code>created()</code>是vue实例已经创建完成，此时实例中的像<code>data</code>、<code>methods</code>等属性已经被初始化好了，如果需要使用data或者调用方法也最早在这里进行操作。</p></li><li><p><code>beforeMount()</code>模板已经在内存中编译好了，但是尚未挂载到页面中去，此时的页面还是旧的。<code>mounted()</code>该函数执行时表示将编译好的模板进行渲染到页面中，只有在此函数调用完后才能够去获取页面的DOM元素，此时组件已经脱离创建阶段进入到运行阶段。</p></li><li><p>vue实现数据双向绑定的原理：数据的劫持结合发布者-订阅者模式的方式，通过object.defineproperty来劫持各个属性的getter、setter，在数据改变的时候发布消息给订阅者，触发相应监听回调。如果是普通的<code>JavaScript</code>对象，vue会遍历该对象的所有属性，用<code>object.defineProperty()</code>将他们转为setter、getter，在属性被访问和修改时会通知变化。</p><p>vue实现数据双向绑定，将mvvm作为数据绑定的入口，整合observer、complie和watcher，通过observer来监听自己的model的数据变化，通过compile来解析编译模板指令，最终用watcher搭起observer和compile之间的通信桥梁，达到数据变化视图更新，视图交互变化数据更新的双向绑定效果。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> -总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试总结-1</title>
      <link href="/2020/10/11/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-1/"/>
      <url>/2020/10/11/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="面试过程"><a href="#面试过程" class="headerlink" title="面试过程"></a>面试过程</h5><hr><p>这次面试的是前端开发工程师实习岗位，技术面试分为：笔试+技术知识问答。</p><h6 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a>笔试</h6><hr><p>笔试的题目我觉得挺基础的，主要是css+js的一些很常见的问题，具体如下：</p><a id="more"></a><ol><li>meta标签viewport作用</li><li>举例块级元素、行内元素，以及他们的区别</li><li>内容的水平、垂直居中</li><li>元素的水平、垂直居中</li><li><code>prototype</code>和<code>__proto__</code>的区别</li><li>手写冒泡排序或者选择排序</li><li>如何准确判断一个变量是数组</li><li>localStorage和sessionStorage区别</li><li>同步与异步区别</li><li>js中的值类型和应用类型，以及他们的区别</li><li>什么时跨域</li><li>HTTP常见状态码</li><li>CSS选择器优先级</li><li>js使用typeof能得到哪些类型</li><li>css中父子选择器和兄弟选择器</li></ol><p>虽然都能答出来但是也有答得不好得地方，以及一些概念自己有一些模糊。</p><p>然后就是技术知识问答，主要就是问了vue相关的一些知识，在问答环节感觉自己表现得很一般，还是稍微紧张了点，导致大脑没转动起来。</p><h6 id="知识问答"><a href="#知识问答" class="headerlink" title="知识问答"></a>知识问答</h6><hr><ol><li>vue的核心中</li><li>vue-cli3.0与vue-cli4.0区别</li><li>vue-cli4.0中的配置文件怎么弄？自己在开发时有配置过吗？</li><li>vueRouter跳转的方式</li><li>vueRouter传参方式</li><li>路由传参中params与query的区别</li><li>computed和watch的区别</li><li>为什么使用vuex</li><li>封装一个能够准确判断一个变量类型的函数</li></ol><p>大致就是以上问题，应该有遗漏部分，毕竟紧张了的，记不太清楚了。</p><p>最后和他们应该时负责人聊了会儿自己写的项目和一些学习以及公司情况的事，最后让我回来等通知。</p><h5 id="面试题部分参考答案"><a href="#面试题部分参考答案" class="headerlink" title="面试题部分参考答案"></a>面试题部分参考答案</h5><hr><p>回来对面试题自己回答得不好，概念模糊的题进行了补充学习</p><ol><li><p><code>meta</code>标签是html语言头部的一个辅佐性标签，可以用来定义页面编码语言、搜索引擎优化、自动刷新并指向新的页面、控制页面缓存、响应式视窗等。该标签主要有两个属性，name和http-equiv，HTML5添加charset。而viewport是name属性在HTML5新增的属性值，用来优化移动浏览器的显示</p><ol><li><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0,maximum-scale&#x3D;1.0, user-scalable&#x3D;no&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>同步与异步的区别</p><ol><li>最大的区别就是执行顺序的不同</li><li>异步能够改变程序正常执行顺序（因为JavaScript是单线程）</li><li>执行栈：同步任务会在主线程上排队执行形成了一个执行栈</li><li>异步任务不会进入主线程，而是进入任务队列等待主线程任务执行完毕，这时就会通知主线程请求执行任务</li><li>异步运行机制：<ol><li>所有同步任务都在主线程上执行，形成执行栈，</li><li>主线程之外还存在一个任务队列，只要异步任务有了运行结果，就在任务队列之中放置一个事件</li><li>一旦执行栈中的所有同步任务执行完毕，系统就会读取任务队列，看看有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</li><li>主线程不断重复上面第三步。</li></ol></li></ol></li><li><p>css选择器优先级</p><p>!important–&gt;元素内样式–&gt;id选择器–&gt;类选择器–&gt;标签选择器–&gt;通配符选择器–&gt;浏览器自定义或者继承的选择器</p></li><li><p>typeof返回的几种类型值</p><p>number  object(null、对象、数组)   function  undefined  string  boolean</p></li><li><p>vue-cli4.0想要修改默认配置文件，需要在根路径下新建一个vue.config.js文件大致如下：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">const webpack &#x3D; require(&quot;webpack&quot;);</span><br><span class="line">const CompressionWebpackPlugin &#x3D; require(&#39;compression-webpack-plugin&#39;);</span><br><span class="line">const productionGzipExtensions &#x3D; [&#39;js&#39;, &#39;css&#39;];</span><br><span class="line">require(&quot;babel-polyfill&quot;);</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    publicPath: &#39;.&#x2F;&#39;,&#x2F;&#x2F;打包后的位置(如果不设置这个静态资源会报404)</span><br><span class="line">    &#x2F;&#x2F; publicPath: process.env.NODE_ENV &#x3D;&#x3D;&#x3D; &#39;production&#39; ? &#39;http:&#x2F;&#x2F;47.92.237.225:8080&#x2F;dist&#39; : &#39;.&#x2F;&#39;,</span><br><span class="line">    outputDir: &#39;dist&#39;,&#x2F;&#x2F;打包后的目录名称</span><br><span class="line">    assetsDir: &#39;static&#39;,&#x2F;&#x2F;静态资源目录名称</span><br><span class="line">    productionSourceMap:false,  &#x2F;&#x2F;去掉打包的时候生成的map文件</span><br><span class="line">    lintOnSave: true,</span><br><span class="line">    filenameHashing: false,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">      sockHost: &#39;http:&#x2F;&#x2F;47.92.237.225:1111&#x2F;&#39;,</span><br><span class="line">      disableHostCheck: true,</span><br><span class="line">      host: &#39;0.0.0.0&#39;,  &#x2F;&#x2F;不清楚主机和目的网络</span><br><span class="line">      port: 1111, &#x2F;&#x2F; 源地址端口，自行修改</span><br><span class="line">      disableHostCheck: true,</span><br><span class="line">      hotOnly: false,</span><br><span class="line">      useLocalIp: false,</span><br><span class="line">      proxy: &#123;</span><br><span class="line">        &#39;&#x2F;ser&#39;:&#123;</span><br><span class="line">            target:&#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;&#39;,  &#x2F;&#x2F;跨域的域名</span><br><span class="line">            ws: true,  &#x2F;&#x2F; 代理 websockets</span><br><span class="line">            changeOrigin: true, &#x2F;&#x2F;是否开启跨域</span><br><span class="line">            pathRewrite:&#123;</span><br><span class="line">                &#39;^&#x2F;ser&#39;:&#39;&#x2F;&#39;  &#x2F;&#x2F; 重写地址</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      headers: &#123;</span><br><span class="line">        &#39;Access-Control-Allow-Origin&#39;: &#39;*&#39;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    configureWebpack: &#123;</span><br><span class="line">      plugins: [</span><br><span class="line">        &#x2F;&#x2F; 配置jquery</span><br><span class="line">        new webpack.ProvidePlugin(&#123;</span><br><span class="line">          $: &quot;jquery&quot;,</span><br><span class="line">          jQuery: &quot;jquery&quot;,</span><br><span class="line">          &quot;window.jQuery&quot;: &quot;jquery&quot;,</span><br><span class="line">          Popper: [&quot;popper.js&quot;, &quot;default&quot;]</span><br><span class="line">        &#125;),</span><br><span class="line">        new CompressionWebpackPlugin(&#123;</span><br><span class="line">          asset: &#39;[path].gz[query]&#39;,</span><br><span class="line">          algorithm: &#39;gzip&#39;,</span><br><span class="line">          test: new RegExp(&#39;\\.(&#39; + productionGzipExtensions.join(&#39;|&#39;) + &#39;)$&#39;),  &#x2F;&#x2F;匹配文件名</span><br><span class="line">          &#x2F;&#x2F; test: &#x2F;\.js$|\.html$|.\css&#x2F;,</span><br><span class="line">          threshold: 10240,  &#x2F;&#x2F;对超过10k的数据压缩</span><br><span class="line">          minRatio: 0.8,</span><br><span class="line">          deleteOriginalAssets: false  &#x2F;&#x2F;不删除源文件</span><br><span class="line">          &#125;)</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>computed与watch区别<ol><li>计算属性能够缓存结果，如果依赖项不改变那么不会重新计算，会继续使用缓存结果，不支持异步，计算属性属性值是函数默认走get方法，只有当依赖项改变才会走set。</li><li>watch不支持缓存，监听数据改变直接触发相应的操作，支持异步，监听的函数接收两个参数，一个最新值和之前的值，可以一对多，一个属性改变，执行对应的一个或多个操作</li><li>补充methods每次使用都会执行主程序不能够缓存结果，调用才会使用。</li></ol></li><li>vuex<ol><li>vuex就是将数据共享给多个组件共同使用，同时也将这个数据的状态进行了共享（一个组件改变这个数据的状态其它组件也跟着改变）。</li><li>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新</li><li>你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地<strong>提交 (commit) mutation</strong>。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> -总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端的适配方案</title>
      <link href="/2020/10/01/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9A%84%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/"/>
      <url>/2020/10/01/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9A%84%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="为什么叫移动端适配"><a href="#为什么叫移动端适配" class="headerlink" title="为什么叫移动端适配"></a>为什么叫移动端适配</h5><hr><p>在移动端web页面开发中，由于手机屏幕尺寸、分辨率的不同，或者要考虑横竖屏问题，为了让页面在不同的设备上具有相适应的展示效果，需要在开发过程中使用合理的适配方案。</p><h5 id="视口"><a href="#视口" class="headerlink" title="视口"></a>视口</h5><hr><p><code>&lt;meta&gt;</code>标签中丁一些元数据信息，通过设置<code>&lt;meta name=&quot;viewport&quot;&gt;</code>，提供有关视口初始大小信息，供移动设备使用。</p><a id="more"></a><table><thead><tr><th>属性</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><code>width</code></td><td>数值 / <code>device-width</code></td><td>视口宽度</td></tr><tr><td><code>height</code></td><td>数值 / <code>device-height</code></td><td>视口高度</td></tr><tr><td><code>initial-scale</code></td><td>0.0 ~ 10.0</td><td>设备宽度与视口大小之间的缩放比率</td></tr><tr><td><code>maximum-scale</code></td><td>0.0 ~ 10.0</td><td>缩放最大值</td></tr><tr><td><code>minimum-scale</code></td><td>0.0 ~ 10.0</td><td>缩放最小值</td></tr><tr><td><code>user-scalable</code></td><td>布尔值</td><td>默认<code>yes</code>，为<code>no</code>时用户不能缩放网页</td></tr></tbody></table><h5 id="适配方案"><a href="#适配方案" class="headerlink" title="适配方案"></a>适配方案</h5><h5 id="百分比方案"><a href="#百分比方案" class="headerlink" title="百分比方案"></a>百分比方案</h5><hr><p>原理：使用 <strong>百分比</strong> 定义 <strong>宽度</strong>，<strong>高度</strong> 用<strong><code>px</code></strong>固定，根据可视区域实时尺寸进行调整，尽可能适应各种分辨率，通常使用<code>max-width</code>/<code>min-width</code>控制尺寸范围过大或者过小。下表是子元素不同属性设置百分比的依据</p><p>优点：原理简单，基本上不存在兼容性问题</p><p>缺点：</p><ol><li>屏幕尺寸跨度过大，相对设计稿过大或者过小的屏幕不能正常显示，在大屏手机或横竖屏切换场景下可能会导致页面元素被拉伸变形，字体大小无法随屏幕大小发生变化。</li><li>设置盒模型的不同属性时，其百分比设置的参考元素不唯一，容易使布局问题变得复杂</li></ol><h5 id="rem方案"><a href="#rem方案" class="headerlink" title="rem方案"></a>rem方案</h5><hr><p>原理：<strong>rem</strong>是相对长度单位，rem方案中的样式设计为相对于<strong>根元素</strong><code>font-size</code>计算值的倍数。根据 <strong>屏幕宽度</strong> 设置<code>html</code>标签的<code>font-size</code>，在布局时使用 <strong>rem</strong> 单位布局，达到自适应的目的，是 <strong>弹性布局</strong> 的一种实现方式。</p><p>（根据<code>rem</code>将页面放大<code>dpr</code>倍, 然后<code>viewport</code>设置为<code>1/dpr</code>.</p><p>如iphone6 plus的dpr为3, 则页面整体放大3倍, 1px(css单位)在plus下默认为3px(物理像素)<br>然后<code>viewport</code>设置为1/3, 这样页面整体缩回原始大小. 从而实现高清。）</p><p>如iphone6 plus的dpr为3, 则页面整体放大3倍, 1px(css单位)在plus下默认为3px(物理像素)<br>然后<code>viewport</code>设置为1/3, 这样页面整体缩回原始大小. 从而实现高清。</p><p>首先获取文档根元素和设备<code>dpr</code>，设置 <strong>rem</strong>（一般封装一个js来完成），在<code>html</code>文档加载和解析完成后调整<code>body</code>字体大小； 在页面<strong>缩放 / 回退 / 前进</strong>的时候， 获取元素的内部宽度 (不包括垂直滚动条，边框和外边距)，重新调整 <strong>rem</strong> 大小。</p><p>优点：</p><ol><li>自适应效果相对于静态布局和百分比方案会更佳，页面不会因为伸缩发生变形。</li><li>兼容性较好，ios: 6.1，android: 2.1系统以上都支持，兼容大部分主流浏览器</li></ol><p>缺点：</p><ol><li>并不是纯css移动适配方案，需要依赖js脚本去监听分辨率的变化，动态改变根元素的字体大小，<code>css</code>样式和 <code>js</code> 代码有一定 <strong>耦合性</strong>，并且必须将改变<code>font-size</code>的代码放在 <strong>css</strong> 样式之前。</li><li>小像素问题，浏览器渲染最小单位是像素，通过rem计算后可能会出现小像素，浏览器对这部分小数会采取四舍五入，按整数渲染。（解决办法：指定最小转换像素，对于比较小的像素，不转换为 <strong>rem</strong> 或 <strong>vw</strong>）；两个同样宽度的元素因为各自周围的元素宽度不同，导致两元素相差<code>1px</code>；宽高相同的正方形，长宽不等了；<code>border-radius: 50%</code> 画的圆不圆。</li><li><strong>Android 浏览器下 line-height 垂直居中偏离的问题</strong>。常用的垂直居中方式就是使用line-height，这种方法在Android设备下并不能完全居中。</li></ol><h5 id="vh-vw方案"><a href="#vh-vw方案" class="headerlink" title="vh/vw方案"></a>vh/vw方案</h5><hr><p>原理：<strong>视口</strong>是浏览器中用于呈现网页的区域，移动端的视口通常指的是 <strong>布局视口</strong></p><p><strong>vw : **1vw</strong> 等于 <strong>视口宽度</strong> 的 <strong>1%</strong></p><p><strong>vh</strong> : <strong>1vh</strong>  等于 <strong>视口高度</strong> 的 *<em>1% *</em></p><p><strong>vmin</strong> : 选取 <strong>vw</strong> 和 <strong>vh</strong> 中 <strong>最小</strong> 的那个</p><p><strong>vmax</strong> : 选取 <strong>vw</strong> 和 <strong>vh</strong> 中 <strong>最大</strong> 的那个</p><p>使用 <strong>css</strong> 预处理器把设计稿尺寸转换为 <strong>vw</strong> 单位，包括 <strong>文本</strong>，<strong>布局高宽</strong>，<strong>间距</strong> 等，使得这些元素能够随视口大小自适应调整。以<code>1080px</code>设计稿为基准，转化的计算表示为</p><p>优点：</p><ol><li>纯 <strong>css</strong> 移动端适配方案，不存在脚本依赖问题</li><li>相对于 <strong>rem</strong> 以<strong>根元素字体大小的倍数</strong> 定义 <strong>元素大小</strong>，逻辑清晰简单，视口单位依赖于视口的尺寸 <code>&quot;1vw ＝ 1/100 viewport width&quot;</code>，根据 <strong>视口尺寸的百分比</strong> 来定义 <strong>元素宽度</strong></li></ol><p>缺点：存在一些兼容性问题，Android4.4以下不支持</p><h5 id="rem-vw-vh方案"><a href="#rem-vw-vh方案" class="headerlink" title="rem+vw/vh方案"></a>rem+vw/vh方案</h5><hr><p><strong>vw/vh</strong> 方案能够实现宽度和高度的自适应，并且逻辑清晰，由于其被支持得较晚，所以存在一定的兼容性问题。将 <strong>vw/vh</strong> 方案与 <strong>rem</strong> 方案相结合，<strong>给根元素设置随视口变化的vw单位</strong>，可以通过<code>postcss-plugin-vwtorem</code>将其转换。</p><h5 id="基于媒体查询的响应式设计"><a href="#基于媒体查询的响应式设计" class="headerlink" title="基于媒体查询的响应式设计"></a>基于媒体查询的响应式设计</h5><hr><p><strong>响应式设计</strong> 使得一个网站同时适配 <strong>多种设备</strong> 和 <strong>多个屏幕</strong>，让网站的布局和功能随用户的使用环境（屏幕大小、输出方式、设备/浏览器能力而变化），使其视觉合理，交互方式符合习惯。如使得内容区块可伸缩与自由排布，边距适应页面尺寸，图片适应比例变化，能够自动隐藏/部分显示内容，能自动折叠导航和菜单。</p><p>原理：主要实现是通过 <strong>媒体查询</strong>，通过给不同分辨率的设备编写不同的样式实现响应式布局，用于解决不同设备不同分辨率之间兼容问题，一般是指PC、平板、手机设备之间较大的分辨率差异。实现上不局限于具体的方案，通常结合了 <strong>流式布局</strong> <code>+</code> <strong>弹性布局</strong> 方案。比如给小屏幕手机设置<code>@2x</code>图，为大屏手机设置<code>@3x</code>图</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">375px</span>)&#123;</span><br><span class="line">    //样式1</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">750</span>)&#123;</span><br><span class="line">    //样式2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：能够使网页在不同设备、不同分辨率屏幕上呈现合理布局，不仅仅是样式伸缩变换</p><p>缺点：</p><ol><li><p>要匹配足够多的设备与屏幕，一个web页面需要多个设计方案，工作量比较大</p></li><li><p>通过媒体查询技术需要设置一定量的断点，到达某个断点前后的页面发生显著变化，用户体验不太友好</p></li></ol><h5 id="移动端web页面适配方案中的问题"><a href="#移动端web页面适配方案中的问题" class="headerlink" title="移动端web页面适配方案中的问题"></a>移动端web页面适配方案中的问题</h5><hr><ol><li><strong>1px问题</strong>：是指设置边框 为<code>1px</code> <strong>css</strong>像素，在 <strong>普通屏幕</strong> 下<code>1px</code>，<strong>高清屏幕</strong> (<code>dpr</code>为<code>2</code>)下<code>2px</code>的情况。是由于不同移动设备的<code>dpr</code>不同，导致<code>1px</code> <strong>css</strong>像素，转换成物理像素后显示不一样。（<strong>css</strong> 中涉及<code>1</code>像素的地方仍然使用<code>px</code>作为单位，<strong>设置<code>&lt;meta&gt;</code> 标签中 <code>initial-scale = 1/dpr</code> ，将整个页面缩小<code>dpr</code>倍</strong>，对于页面采用 <strong>rem</strong> 方案的情况，将页面的 <strong>根字体</strong> 再放大<code>dpr</code>倍，这个时候就能够在不改变页面其他布局的情况下，保持边框的 <strong>css</strong> 像素为<code>1px</code>。</li><li><strong>transform 的 scale 属性</strong>：<code>transform</code>的<code>scale</code>属性允许对元素进行缩放，其中<code>scaleY(y)</code>通过设置Y轴的值来定义缩放转换，并结合伪元素使用，通过<code>transform-origin: 50% 0%</code>修改元素变换的中心点实现。针对横着的边框线用<code>scaleY(y)</code>，针对竖着的边框线要用<code>scaleX(x)</code>，针对一圈的边框线用<code>scale()</code>，并且需要注意转移元素变换中心点。</li></ol><h5 id="移动端web页面对图片的处理"><a href="#移动端web页面对图片的处理" class="headerlink" title="移动端web页面对图片的处理"></a>移动端web页面对图片的处理</h5><hr><p>加载网页时，大部分流量来自 <strong>加载图片</strong>。指定图像宽度时使用<strong>相对单位</strong>，<strong>防止意外溢出视口</strong>，如 <code>width: 50%</code>，将图片宽度设置为包含元素宽度的 <code>50%</code>。因为 <strong>css</strong> 允许内容溢出容器， 需要使用<strong><code>max-width: 100%</code> 来保证图像及其他内容不会溢出</strong>。使用 img 元素的 <code>alt</code> 属性提供描述，描述有助于提高网站的可访问性，能提供语境给屏幕阅读器及其他辅助性技术，<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fdevelopers.google.com%2Fweb%2Ffundamentals%2Fdesign-and-ux%2Fresponsive%2Fimages" target="_blank" rel="noopener">参考</a> 。<strong>维护自适应页面中图片宽高比固定</strong>比较常用的方法是使用<strong><code>padding</code></strong>设置。对于不同<code>dpr</code>以及不同分辨率/尺寸的屏幕，为了避免资源浪费和等待时间延长，需要针对不同的屏幕使用合适的图片，加载的图片分为通过标签引入的图片和背景图片。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -移动端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器的缓存机制</title>
      <link href="/2020/09/28/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
      <url>/2020/09/28/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="什么是浏览器的缓存机制"><a href="#什么是浏览器的缓存机制" class="headerlink" title="什么是浏览器的缓存机制"></a>什么是浏览器的缓存机制</h5><hr><p>指在一段有效时间内，保存已接收到的web资源副本，如果在有效时间内发起了对该资源的再一次请求，那么浏览器直接使用这个缓存的副本，而不是向服务器重新发起新的请求。</p><h5 id="为什么要使用浏览器的缓存机制"><a href="#为什么要使用浏览器的缓存机制" class="headerlink" title="为什么要使用浏览器的缓存机制"></a>为什么要使用浏览器的缓存机制</h5><hr><p>可以有效地提高页面的打开速度，减少不必要的网络带宽的浪费，降低服务器的负担。</p><a id="more"></a><h5 id="缓存机制的种类"><a href="#缓存机制的种类" class="headerlink" title="缓存机制的种类"></a>缓存机制的种类</h5><hr><p>浏览器的缓存策略由服务器来指定，一般可以分为：<strong>强缓存策略</strong>、<strong>协商缓存策略</strong>和<strong>启发式缓存策略</strong></p><h5 id="强缓存策略"><a href="#强缓存策略" class="headerlink" title="强缓存策略"></a>强缓存策略</h5><hr><p>使用强缓存策略时，如果缓存资源有效，则直接使用缓存资源，不必重新向服务器发起请求。强缓存策略可以通过两种方式来设置：<code>HTTP</code> 头信息中的 <code>Expires</code> 属性和 <code>Cache-Control</code> 属性。</p><p><strong><code>Expires</code></strong> 是 <code>HTTP 1.0</code> 中提出的方式，服务器通过在响应头中添加 <code>Expires</code> 属性，来指定资源的过期时间。在有效期内，该资源可以被缓存使用，不必重新向服务器发送请求。<code>Expires</code> 设置的时间是一个绝对时间，它是服务器的时间，因此可能存在这样的问题：客户端时间和服务器端时间不一致时，可能会影响缓存命中的结果，这种方式已逐步被淘汰。</p><p><strong><code>Cache-Control</code></strong> 是在 <code>HTTP 1.1</code> 中提出的一个新的头部属性，弥补了 <code>Expires</code> 的缺陷，它提供了对资源缓存的更精确的控制，可以取以下这些值：</p><ul><li><code>max-age</code>：指定资源能够被缓存时间的大小，是一个相对的时间，它会根据这个时间的大小和资源第一次请求时的时间来计算出资源过期的时间，单位是秒</li><li><code>no-cache</code>：强制客户端直接向服务器发送请求，也就是说每次请求都必须向服务器发送。服务器接收到请求，然后判断资源是否变更，是则返回新内容，否则返回 304 状态码表示未变更。这个很容易让人产生误解，使人误以为是响应不被缓存，实际上 <code>no-cache</code> 是会被缓存的，只是每次在向客户端提供响应数据时，缓存都要向服务器评估缓存响应的有效性</li><li><code>no-store</code>：用来指定资源不能够被缓存</li><li><code>private</code>：规定资源只能被客户端缓存，不能够代理服务器所缓存</li><li><code>public</code>：指示响应可被任何缓存区缓存</li><li>……</li></ul><p>一般来说只需要设置  <code>Cache-Control</code> 与 <code>Expires</code> 中的一种方式就可以实现强缓存策略，但当同时存在时，<code>Cache-Control</code> 优先级会更高，它会覆盖 <code>Expires</code> 的配置</p><h5 id="协商缓存策略"><a href="#协商缓存策略" class="headerlink" title="协商缓存策略"></a>协商缓存策略</h5><hr><p>使用协商缓存策略时，会先向服务器发送一个请求，如果资源没有发生修改，则返回一个 304 状态码，让浏览器使用本地的缓存副本，如果资源发生了修改，则返回修改后的资源。</p><p>协商缓存也可以通过两种方式来设置：<code>HTTP</code> 头信息中的 <code>Etag</code>和 <code>Last-Modified</code> 属性。</p><p>服务器通过在响应头中添加 <code>Last-Modified</code> 属性来指出资源最后一次修改的时间，当浏览器下一次发起请求时，会在请求头中添加一个 <code>If-Modified-Since</code> 的属性，属性值为上一次资源返回时的 <code>Last-Modified</code> 的值。当请求发送到服务器后服务器会通过这个属性来和资源的最后一次的修改时间来进行比较，以此来判断资源是否做了修改。如果资源没有修改，那么返回 304 状态，让客户端使用本地的缓存，如果资源已经被修改了，则返回修改后的资源。使用这种方法有一个缺点，就是 <code>Last-Modified</code>标注的最后修改时间只能精确到秒级，如果某些文件在1 秒钟以内被修改多次的话，那么文件已经改变了但是 <code>Last-Modified</code>却没有改变，这样就会造成缓存的命中不准确。</p><p>因为 <code>Last-Modified</code> 可能发生的不准确性，<code>HTTP</code> 中提供了另外一种方式，那就是 <code>Etag</code> 属性。服务器在返回资源的时候，在头信息中添加了 <code>Etag</code> 属性，这个属性是资源生成的唯一标识符，当资源发生改变的时候，这个值也会发生改变。在下一次资源请求时，浏览器会在请求头中添加一个 <code>If-None-Match</code> 属性，这个属性的值就是上次返回的资源的 <code>Etag</code> 的值。服务接收到请求后会根据这个值来和资源当前的 <code>Etag</code> 的值来进行比较，以此来判断资源是否发生改变，是否需要返回资源。通过使用 <code>Etag</code> 的方式，比 <code>Last-Modified</code> 的方式更加精确。</p><p>当 <code>Last-Modified</code> 和 <code>Etag</code> 属性同时出现的时候，<code>Etag</code> 的优先级更高。使用协商缓存的时候，服务器需要考虑负载均衡的问题，因此多个服务器上资源的 <code>Last-Modified</code> 应该保持一致，因为每个服务器上 <code>Etag</code> 的值都不一样，因此在考虑负载均衡时，最好不要设置 <code>Etag</code> 属性。</p><p><strong>强缓存策略和协商缓存策略在缓存命中时都会直接使用本地的缓存副本</strong>，区别在于协商缓存会向服务器发送一次请求，而当缓存未命中时，都会向服务器重新发送请求来获取资源。</p><h5 id="启发式缓存策略"><a href="#启发式缓存策略" class="headerlink" title="启发式缓存策略"></a><strong>启发式缓存策略</strong></h5><hr><p>启发式缓存策略会根据响应头中 2 个时间字段 <code>Date</code> 和 <code>Last-Modified</code> 之间的时间差值，取其值的 <code>10%</code> 作为缓存时间周期。也就是说，当存有 <code>Last-Modified</code> 字段的时候，即使是断网，且强缓存都失效后，也有一定时间是直接读取缓存文件的。</p><p>在实际的缓存机制中，强缓存策略、启发式缓存策略和协商缓存策略是一起合作使用的。浏览器首先会根据请求的信息判断强缓存是否命中，如果命中则直接使用资源，如果未命中则触发启发式缓存，如果发现缓存已过期，则再根据头信息向服务器发起请求，使用协商缓存，如果协商缓存命中的话，则服务器不返回资源，浏览器直接使用本地资源的副本，如果协商缓存未命中，则服务器返回最新的资源给浏览器。</p><h5 id="缓存位置"><a href="#缓存位置" class="headerlink" title="缓存位置"></a>缓存位置</h5><hr><h6 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h6><hr><p>运行在浏览器背后的独立线程，一般可以用来实现缓存功能。使用Service Worker的话，传输协议必须为HTTPS，因为Service Worker中涉及到请求拦截，所以必须使用HTTPS协议来保障安全。<strong>Service Worker 的缓存与浏览器其他内建的缓存机制不同，它可以让我们自由控制缓存哪些文件、如何匹配缓存、如何读取缓存，并且缓存是持续性的</strong>。</p><p>Service Worker 实现缓存功能一般分为三个步骤：首先需要先注册 Service Worker，然后监听到 install 事件以后就可以缓存需要的文件，那么在下次用户访问的时候就可以通过拦截请求的方式查询是否存在缓存，存在缓存的话就可以直接读取缓存文件，否则就去请求数据。</p><p>当 Service Worker 没有命中缓存的时候，我们需要去调用 fetch 函数获取数据。也就是说，如果我们没有在 Service Worker 命中缓存的话，会根据缓存查找优先级去查找数据。但是不管我们是从 Memory Cache 中还是从网络请求中获取的数据，浏览器都会显示我们是从 Service Worker 中获取的内容。</p><h6 id="Memory-Cache"><a href="#Memory-Cache" class="headerlink" title="Memory Cache"></a>Memory Cache</h6><p>Memory Cache 也就是内存中的缓存，主要包含的是当前中页面中已经抓取到的资源,例如页面上已经下载的样式、脚本、图片等。读取内存中的数据肯定比磁盘快,内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放。 <strong>一旦我们关闭 Tab 页面，内存中的缓存也就被释放了</strong>。</p><p><strong>内存缓存在缓存资源时并不关心返回资源的HTTP缓存头Cache-Control是什么值，同时资源的匹配也并非仅仅是对URL做匹配，还可能会对Content-Type，CORS等其他特征做校验</strong>。</p><h6 id="Disk-Cache"><a href="#Disk-Cache" class="headerlink" title="Disk Cache"></a>Disk Cache</h6><p>Disk Cache 也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，<strong>比之 Memory Cache 胜在容量和存储时效性上</strong>。</p><p>在所有浏览器缓存中，Disk Cache 覆盖面基本是最大的。它会根据 HTTP Herder 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。并且即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据。绝大部分的缓存都来自 Disk Cache，关于 HTTP 的协议头中的缓存字段，我们会在下文进行详细介绍。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宏任务与微任务</title>
      <link href="/2020/09/22/%E5%AE%8F%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%BE%AE%E4%BB%BB%E5%8A%A1/"/>
      <url>/2020/09/22/%E5%AE%8F%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%BE%AE%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>JavaScript</code>是<strong>单线程应用程序</strong>，只有当一条语句执行结束后才能执行下一条语句，所以再之前用<code>alert()</code>会阻塞<code>JavaScript</code>的执行。</p><p>假如全部的代码都是同步执行，那么将会引发很严重的问题，比如从服务器获取数据，需要一直去循环判断是否拿到了服务器返回来的数据吗？</p><p>所以就有了异步事件的概念，在向服务器请求数据，只需发送请求，不必等着响应返回，让主程序在响应返回后通知我们，这样就可以继续执行其它任务，而不会因为等待响应造成程序的阻塞。</p><p>那么问题又来了，当应用中存在多个异步任务时，它们的执行顺序是怎样的呢？所以就有了<strong>宏任务</strong>和<strong>微任务</strong></p><a id="more"></a><h6 id="宏任务和微任务是什么"><a href="#宏任务和微任务是什么" class="headerlink" title="宏任务和微任务是什么?"></a>宏任务和微任务是什么?</h6><hr><p>宏任务通常叫做 <code>macrotask</code>，而微任务通常叫 <code>microtask</code>.</p><p>举个例子来解释宏任务和微任务:</p><p>去银行办理业务,首先需要取号等待排队,这些需要办理业务的人就可以看做是银行柜台的一个宏任务,在一个宏任务进行过程中,是可以添加微任务的,就比如A本来就想存个钱,当存钱的业务办理完后,他看到一个银行的理财项目不错,比把钱存着更香,所以他又要办理这个理财项目,但是柜台的工作人员会叫他重新去取号排队吗?当然不会,他会继续为A办理所有业务,而这些临时加的业务就可以看作是微任务,当这个宏任务的所有微任务执行完了,才会执行下个宏任务.</p><p>代码实例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">  resolve()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>以上代码的打印结果是:</p><p>1  3  5  4  2</p><p>上述代码中，<code>setTimeout()</code> 就是作为宏任务存在的，而 <code>Promise.prototype.then</code> 则是具有代表性的微任务。注意，在 <code>new Promise()</code> 创建对象实例时所传递的函数是被同步执行的，而调用的 <code>then()</code> 方法中传递的函数才是被异步调用执行的。1 3 5 是同步代码打印的顺序,同步执行完成后开始执行异步任务,<strong>微任务会在宏任务之前执行</strong>,所以<code>promise.then()</code> 方法中注册的回调函数先被调用执行，输出 <code>4</code>，最后执行 <code>setTimeout()</code> 注册的回调函数打印 <code>2</code>。</p><h6 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h6><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UI交互事件&#96;、&#96;setTimeout&#96;、&#96;setInterval&#96;、&#96;requestAnimationFrame&#96;、&#96;IO</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setTimeout&#96;、&#96;setInterval&#96;、&#96;setImmediate&#96;、&#96;IO</span><br></pre></td></tr></table></figure><h6 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h6><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;Promise.prototype.then&#96;   &#96;Promise.prototype.catch&#96;、 &#96;Promise.prototype.finally&#96;、 &#96;MutationObserver&#96;</span><br></pre></td></tr></table></figure><h6 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h6><hr><p>在应用中添加宏任务与微任务通常有以下几种方式：</p><ul><li><p>在主线程上直接添加宏任务与微任务，这时的执行顺序为：</p><p>主线程 =&gt; 主线程上创建的微任务 =&gt; 主线程上创建的宏任务</p></li><li><p>在微任务中创建微任务，执行顺序为：</p><p>主线程 =&gt; 主线程上创建的微任务1 =&gt; 微任务1上创建的微任务2 =&gt; 主线程上创建的宏任务</p></li><li><p>在宏任务中创建微任务，执行顺序为：</p><p>主线程 =&gt; 主线程上创建的宏任务 =&gt; 宏任务中创建的微任务</p></li><li><p>在微任务中创建宏任务，执行顺序为：</p><p>主线程 =&gt; 主线程上创建的微任务 =&gt; 主线程上创建的宏任务 =&gt; 微任务中创建的宏任务</p></li></ul><h6 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h6><hr><p>关于宏任务与微任务的执行顺序：通常微任务队列优先于宏任务队列执行，<strong>微任务中创建的宏任务会被添加到宏任务队列的尾端</strong>，<strong>微任务中创建的微任务会被添加到微任务队列的尾端</strong>。<strong>只要微任务队列中还有任务，宏任务队列就要等待微任务队列执行完毕后再执行</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS实现继承的几种方式</title>
      <link href="/2020/09/18/JS%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/2020/09/18/JS%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="JS实现继承的几种方式"><a href="#JS实现继承的几种方式" class="headerlink" title="JS实现继承的几种方式"></a>JS实现继承的几种方式</h3><p>首先定义一个父类：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个动物类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 属性</span></span><br><span class="line">  <span class="keyword">this</span>.name = name || <span class="string">'Animal'</span>;</span><br><span class="line">  <span class="comment">// 实例方法</span></span><br><span class="line">  <span class="keyword">this</span>.sleep = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'正在睡觉！'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型方法</span></span><br><span class="line">Animal.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params">food</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'正在吃：'</span> + food);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="1.原型链继承:"></a>1.原型链继承:</h5><a id="more"></a><p>​    1.1核心：将父类的实例作为子类的原型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">&#125;</span><br><span class="line">Cat.prototype = <span class="keyword">new</span> Animal();</span><br><span class="line">Cat.prototype.name = <span class="string">'cat'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//　Test Code</span></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat();</span><br><span class="line"><span class="built_in">console</span>.log(cat.name);</span><br><span class="line"><span class="built_in">console</span>.log(cat.eat(<span class="string">'fish'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(cat.sleep());</span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Animal); <span class="comment">//true </span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Cat); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>​    1.2特点：</p><p>​    1.2.1.实例是子类的实例，也是父类的实例</p><p>​    1.2.2.父类新增的原型方法/属性，之类都能访问到</p><p>​    1.3.缺点：</p><p>​    1.3.1.为子类新增属性和方法在Cat构造函数中增加，如果要新增原型属性和方法，则必须放在new Animal()这样的语句之后执行</p><p>​    1.3.2.无法实现多继承（一个子类智能有一个父类）</p><p>​    1.3.3.来自原型对象的所有属性被所有实例共享</p><p>​    1.3.4.创建子类实例时，无法向父类构造函数传递参数</p><h5 id="2-构造函数"><a href="#2-构造函数" class="headerlink" title="2.构造函数"></a>2.构造函数</h5><p>1.1核心：使用父类的额构造函数来增强子类实例，将父类的实例属性复制给子类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  Animal.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.name = name || <span class="string">'Tom'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test Code</span></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat();</span><br><span class="line"><span class="built_in">console</span>.log(cat.name);</span><br><span class="line"><span class="built_in">console</span>.log(cat.sleep());</span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Animal); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Cat); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>1.2.特点：</p><p>1.2.1.子类实例可以共享父类引用属性</p><p>1.2.2.创建子类实例时，可以向父类传递参数</p><p>1.2.3.可以实现多继承</p><p>1.3.缺点：</p><p>1.3.1.实例并不是父类的实例，只是子类的实例</p><p>1.3.2.智能继承父类实例的属性和方法，不能继承原型的属性和方法</p><p>1.3.3.无法实现函数复用，每个子类都有父类实例函数的副本，影响性能</p><h5 id="3-实例继承"><a href="#3-实例继承" class="headerlink" title="3.实例继承"></a>3.实例继承</h5><p>3.1.核心：为父类实例添加新特性，作为子类实例返回</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> instance = <span class="keyword">new</span> Animal();</span><br><span class="line">  instance.name = name || <span class="string">'Tom'</span>;</span><br><span class="line">  <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test Code</span></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat();</span><br><span class="line"><span class="built_in">console</span>.log(cat.name);</span><br><span class="line"><span class="built_in">console</span>.log(cat.sleep());</span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Animal); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Cat); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>3.2特点：</p><p>不限制调用方式，不管是<code>new 子类()</code>还是<code>子类()</code>,返回的对象具有相同的效果</p><p>3.3.缺点：</p><ol><li>实例是父类的实例，不是子类的实例</li><li>不支持多继承</li></ol><h5 id="4-拷贝继承"><a href="#4-拷贝继承" class="headerlink" title="4.拷贝继承"></a>4.拷贝继承</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> animal = <span class="keyword">new</span> Animal();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> p <span class="keyword">in</span> animal)&#123;</span><br><span class="line">    Cat.prototype[p] = animal[p];</span><br><span class="line">  &#125;</span><br><span class="line">  Cat.prototype.name = name || <span class="string">'Tom'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test Code</span></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat();</span><br><span class="line"><span class="built_in">console</span>.log(cat.name);</span><br><span class="line"><span class="built_in">console</span>.log(cat.sleep());</span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Animal); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Cat); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>4.2.特点：</p><p>支持多继承</p><p>4.3.缺点：</p><ol><li>效率较低，内存占用高（因为要拷贝父类的属性）</li><li>无法获取父类不可枚举的方法（不可枚举方法，不能使用for in 访问到）</li></ol><h5 id="5-组合继承"><a href="#5-组合继承" class="headerlink" title="5.组合继承"></a>5.组合继承</h5><p>5.1.核心：通过调用父类构造，继承父类的属性并保留传参的优点，然后通过将父类实例作为子类原型，实现函数复用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  Animal.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.name = name || <span class="string">'Tom'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Cat.prototype = <span class="keyword">new</span> Animal();<span class="comment">// 组合继承需要修复构造函数指向</span></span><br><span class="line">Cat.prototype.constructor = Cat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat();</span><br><span class="line"><span class="built_in">console</span>.log(cat.name);</span><br><span class="line"><span class="built_in">console</span>.log(cat.sleep());</span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Animal); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Cat); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>5.2.特点</p><ol><li>弥补了方式2的缺陷，可以继承实例属性/方法，也可以继承原型属性/方法</li><li>既是子类的实例，也是父类的实例</li><li>不存在引用属性共享问题</li><li>可传参</li><li>函数可复用</li></ol><p>5.3.缺点：</p><p>调用了两次父类构造函数，生成了两份实例（子类实例将子类原型上的那份屏蔽了）</p><h5 id="6-寄生组合继承"><a href="#6-寄生组合继承" class="headerlink" title="6.寄生组合继承"></a>6.寄生组合继承</h5><p>6.1.核心：通过寄生方式，砍掉父类的实例属性，这样，在调用两次父类的构造的时候，就不会初始化两次实例方法/属性，避免的组合继承的缺点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  Animal.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.name = name || <span class="string">'Tom'</span>;</span><br><span class="line">&#125;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 创建一个没有实例方法的类</span></span><br><span class="line">  <span class="keyword">var</span> Super = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">  Super.prototype = Animal.prototype;</span><br><span class="line">  <span class="comment">//将实例作为子类的原型</span></span><br><span class="line">  Cat.prototype = <span class="keyword">new</span> Super();</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test Code</span></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat();</span><br><span class="line"><span class="built_in">console</span>.log(cat.name);</span><br><span class="line"><span class="built_in">console</span>.log(cat.sleep());</span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Animal); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Cat); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>完美，唯一缺点实现较为复杂</p>]]></content>
      
      
      <categories>
          
          <category> 笔记整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react</title>
      <link href="/2020/09/07/react/"/>
      <url>/2020/09/07/react/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="1-核心包"><a href="#1-核心包" class="headerlink" title="1.核心包"></a>1.核心包</h5><p>​    react、react-dom、babel-standalone</p><h5 id="2-jsx"><a href="#2-jsx" class="headerlink" title="2.jsx"></a>2.jsx</h5><p>​    JavaScript xml    js的扩展语法</p><p>​    执行效率更快，他是类型安全，在编译的过程中能及时发现错误</p><p>​    在使用jsx的时候编写模板会更加简单和快速</p><p>​    注意：jsx中HTML标签必须按照w3c的规范来写</p><a id="more"></a><p>​    三目运算符的使用。</p><p>​    使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render()</span><br></pre></td></tr></table></figure><p>渲染虚拟Dom</p><p>​    第一个参数为jsx格式的数据，第二个参数为需要渲染到的dom节点</p><p>​    渲染列表：</p><p>​        1.如果数组中存放的是标签，可以直接渲染</p><p>​        2.map()  </p><p>​    属性设置:</p><p>​    属性={属性值}</p><p>​    在jsx中不能使用class，有需要类的地方用className</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将带有标签的文本内容编译成html(将item编译成html)</span></span><br><span class="line">dangerouslySetInnerHTML=&#123;&#123;<span class="attr">__HTML</span>:item&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用来代替`label`标签中for属性</span></span><br><span class="line">htmlFor</span><br></pre></td></tr></table></figure><h4 id="3-面向组件编程"><a href="#3-面向组件编程" class="headerlink" title="3.面向组件编程"></a>3.面向组件编程</h4><p>​    高耦合低内聚</p><p>​    高耦合：把逻辑紧密的内容放在一个组件当中，</p><p>​    低内聚：把不同的组件的依赖关系尽量弱化，每个组件间尽可能独立起来</p><p>​    组件当中的重要内容：</p><p>​    1.构建方式</p><p>​    2.组件的属性</p><p>​    3.组件生命周期</p><p>​    演变过程： 传统的组件：1.简单的封装，简单的生命周期呈现，明显的数据流动。</p><p>​    组件的三个部分：属性：<strong>props</strong>；状态：<strong>state</strong>;<strong>生命周期</strong></p><p>​    组件独立，高复用性，开发中更专注于独立组件的开发</p><p>​    组件，实现页面局部代码的集合，简化页面的复杂度，提高运行效率</p><p>​    组件名字首字母必须大写</p><p>​    <strong>无状态组件</strong>：使用function关键字声明一个组件并返回一个jsx格式</p><p>​    <strong>类组件</strong>：使用class关键字声明 </p><p>​    无状态组件和有状态组件区别：<strong>能否使用state和是否拥有生命周期函数</strong></p><p>​    类</p><p>​    传递参数：</p><p>​    使用组件时用属性传递，接收时用props</p><p>​    传递多个参数时，用es6中的扩展运算符</p><p>props的验证和默认值：</p><p><strong>无状态组件</strong>设置默认值需要用 <strong>defaultProps</strong></p><p>props验证，验证传递进来的参数是否符合我们期望的类型或者要求，上线模式中取消props：</p><p>​    1.调用<strong>prop-types</strong>库  npm i –save prop-types</p><p><strong>无状态组件与类组件验证方式，设置默认值类似</strong></p><p>this.setState()是异步的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dangerouslySetInerHTML &#x3D; &#123;&#123; html:this.state.newHtml &#125;&#125;</span><br></pre></td></tr></table></figure><p>refs 转发。 不能再无状态的组件中来进行使用，因为无状态组件没有实例</p><p>定义：表示当前组件的真正实例的引用，他会返回绑定当前属性的元素（标识组件内部的元素—-方便我们查找）</p><p>三种方式进行ref的使用：</p><p>1.字符串的方式</p><p>2.回调函数的方式（推荐），在dom节点上或者组件上挂载函数，函数的</p><p>3.React.createRef（）（16.3新增的一种方式）</p><p>建议不要过度使用refs对逻辑进行处理，需要优先考虑state。</p><h5 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h5><hr><p>react绑定事件使用的是小驼峰命名法，在绑定函数的时候不能加（）函数会立即执行</p><h6 id="修改this指向"><a href="#修改this指向" class="headerlink" title="修改this指向"></a>修改this指向</h6><ol><li><p>bind方式直接绑定this</p><ol start="2"><li>绑定的函数通过箭头函数进行创建</li><li>在constructor中提前进行绑定</li><li>把事件的调用写成箭头函数的调用方式</li></ol></li></ol><h5 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h5><hr><p>根据状态的变化只渲染其中的一部分</p><pre><code>1. if 判断状态值来进行渲染</code></pre><h5 id="状态提升"><a href="#状态提升" class="headerlink" title="状态提升"></a>状态提升</h5><hr><p>状态提升 —– 多个组件需要反应相同的变化数据，提升到他们最近的一个父组件中</p><p>当多个子组件需要用利用到对方状态的情况下，这个时候需要使用到状态提升</p><h5 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h5><hr><p>下载  create-react-app</p><p>create-react-app 项目名</p><p>在组件中使用空标签包裹的元素外层不会在页面生成元素节点，或者使用 Fragment 标签</p><h5 id="组件间通信"><a href="#组件间通信" class="headerlink" title="组件间通信"></a>组件间通信</h5><hr><p>父组件向子组件传参：使用props</p><p>子组件向父组件传参：通过事件传参,在子组件中触发父组件中传递过去的事件</p><p>平级组件：使用pubsub.js    下载pubsub-js包   （publish(参数)）（subscribe(参数,cb）</p><h5 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h5><hr><p>正向代理 —- 开发环境 一个位于客户端和目标服务器之间的代理服务器，为了获取到目标服务器的内容，客户端向代理发送一个请求，代理帮助我们去目标服务器里面获取数据并返回。</p><p>反向代理 —- 上线环境  可以通过代理服务器来接受网络上的请求连接，然后这个请求转发给内部的网络服务器上，并且把这个服务器得到的数据请求到客服端  这个时候代理服务器对外的表现就是一个反向代理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">proxy:&#123;</span><br><span class="line">      <span class="string">"/api"</span>:&#123;</span><br><span class="line">        target:<span class="string">"http://www.weather.com.cn/data/cityinfo"</span>, <span class="comment">//所要代理到的url</span></span><br><span class="line">        changeOrigin:<span class="literal">true</span>, <span class="comment">//跨域</span></span><br><span class="line">        <span class="string">"pathRewrite"</span>:&#123;  <span class="comment">//重写路径</span></span><br><span class="line">          <span class="string">"^/api"</span>:<span class="string">"/"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h5><hr><p>react-router:只提供了一些核心的API</p><p>react-router-dom:提供完整的API</p><p>路由模式:</p><ol><li>hash HashRouter      (页面刷新时候不会丢失)</li><li>browser BrowserRouter  （历史记录模式    通过历史纪录api来进行路由切换，刷新会丢失  本地模式不会）</li></ol><p>路由的使用：</p><ol><li>index.js引入路由模块</li><li>路由模式标签包裹根组件</li><li>引入，配置路由</li><li>路由常用的：Route Link  NavLink  Switch  Redirect   exact(精准跳转)</li></ol><h5 id="hoc"><a href="#hoc" class="headerlink" title="hoc"></a>hoc</h5><hr><p>高阶组件，HOC —参数是一个组件，返回的也是一个组件</p><h5 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h5><hr><p>store:仓库</p><p>state:状态、数据</p><p>action:动作行为，一个普通函数，描述动作的类型和该动作需要操作的数据信息，通常action对象中有两个属性：type（描述动作类型）、payload（相关数据操作）</p><p>dispatch:分发action，这个函数传递action对象作为参数，想要更新state中的数据，需要发起一个action</p><p>reducer：一个纯函数，在这个函数中实现状态的更新，reducer函数传递state与action函数，在函数主体中根据</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见基础知识</title>
      <link href="/2020/09/01/%E9%9D%A2%E8%AF%951/"/>
      <url>/2020/09/01/%E9%9D%A2%E8%AF%951/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="1-cookie、localStorage、sessionStorage区别"><a href="#1-cookie、localStorage、sessionStorage区别" class="headerlink" title="1.cookie、localStorage、sessionStorage区别"></a>1.cookie、localStorage、sessionStorage区别</h5><p>1.1特征：</p><p>1.1.1<strong>cookie</strong></p><p>存储格式是纯文本数据</p><p>存储容量大小限制为4KB</p><p>可以为每个cookie设置有效期限，如果不设置则默认为会话期限</p><p>cookie中保存的数据会自动随请求一起发送回服务器，会占用网络上传带宽</p><p>cookie没有已封装的好的方法，增删改查等操作都是通过document.cookie来实现，易用性不高。</p><p>在兼容性方面对于旧版浏览器，cookie的兼容性较好</p><p>cookie受同源策略限制，但是可以通过设置domain来规避同源策略</p><a id="more"></a><p>1.1.2<strong>localStorage</strong></p><p>存储格式为简单的键值对存储，键和值始终是字符串</p><p>存储容量为5MB(标准并未对其容量做出限制)</p><p>时效性，无过期时间设置，永久存储，仅能通过调用 <code>JavaScript</code> 方法或清除浏览器缓存/本地存储的方式来删除所保存的数据</p><p><code>localStorage</code> 是真正的本地存储，不会自动跟随请求传回服务器</p><p>有成型的 <code>API</code> 方法快速实现数据存取等功能，如 <code>setItem()</code>、<code>getItem()</code>、<code>removeItem()</code> 等，易用性强</p><p><code>localStorage</code> 是 <code>HTML5</code> 中新增的数据存储技术，所以在旧版本浏览器中有兼容问题，如在 <code>IE8</code> 之前的浏览器中不可使用</p><p>受同源策略限制，无法规避</p><p>1.1.3<strong>sessionStorage</strong></p><p>与localStorage类似，只是在localStorage中没有过期时间的设置，sessionStorage中的数据在会话结束时会被清除</p><p>1.2区别与小结：</p><p>主要区别就是<strong>cookie</strong>与<strong>Web</strong> <strong>Storage</strong>的区别，大小，操作，时间，存储方式，存储格式，是否发送给服务器</p><p><code>cookie</code> 的作用是与服务器进行交互，作为 <code>HTTP</code> 规范的一部分而存在，<code>Web Storage</code> 则是为了实现真正的本地存储而生，它们在存储技术中都是不可或缺的，将会在很长的一段时间内共存。</p><h5 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2.数据类型"></a>2.数据类型</h5><p>Symbol:类型是所有可能用作对象属性名的非字符串值的集合，每个Symbol值时唯一的，不可变的。</p><p>BigInt：是一个基础的数值类型，可以用任意精度表示整数，它是通过在整数末尾附加n或者调用构造函数来创建的，如2n**100n运算结果为1267650600228229401496703205376n</p><h5 id="3-JavaScript中的this指向"><a href="#3-JavaScript中的this指向" class="headerlink" title="3.JavaScript中的this指向"></a>3.JavaScript中的this指向</h5><p>3.1<strong>全局环境</strong></p><p>无论是否在严格模式下，在全局函数执行环境中，在任何函数体外部this</p><p>都指向全局对象，如在浏览器环境中的this指向window对象，在nodejs中指向global对象。</p><p>3.2<strong>函数环境</strong></p><p>在函数内部，this的值取决于函数被调用的方式</p><p>3.3<strong>简单调用</strong></p><p>在非严格模式下，简单（直接）调用函数时，函数体中 <code>this</code> 默认指向全局对象</p><p>在严格模式下，直接调用函数时 <code>this</code> 的值为 <code>undefined</code></p><p>3.4<strong>对象方法中的this</strong></p><p>当函数作为对象里的方法被调用时，它们的 <code>this</code> 是调用该函数的对象（可以理解为：谁调用，指向谁）。</p><p>3.5<strong>构造函数中的this</strong></p><p>当一个函数用作构造函数时（使用 <code>new</code> 关键字调用函数），它的 <code>this</code> 被绑定到正在构造的新对象上。</p><p>3.6<strong>DOM 事件处理函数中的 this</strong></p><p>当函数被用作事件处理函数时，它的 <code>this</code> 指向当前触发事件的 <code>DOM</code> 元素。</p><p>3.7<strong>定时器中的 this</strong></p><p>在计时器中使用，计时函数体中的 <code>this</code>指向全局对象：</p><p>3.8<strong>箭头函数中的 this</strong></p><p>在箭头函数中，<code>this</code> 与封闭词法环境的 <code>this</code> 保持一致，即箭头函数不改变 <code>this</code>的指向（<strong>箭头函数没有自己的this</strong>），与外层函数中的 <code>this</code> 保持一致。</p><p>3.9<strong>原型链中的 this</strong></p><p>如果函数存在于一个对象的原型链上，那么 <code>this</code> 指向的仍然是是调用这个函数（方法）的对象，就像该方法在对象上一样。</p><h5 id="4-节流和防抖"><a href="#4-节流和防抖" class="headerlink" title="4.节流和防抖"></a>4.节流和防抖</h5><p>4.1节流：</p><p>在规定的时间内直触发一次函数的调用，大于规定时间再触发第二次。</p><p>4.2防抖：</p><p>再频繁触发事件的情况下，只有在足够的空闲时间，才执行代码一次。（在一定的时间内多次触发只执行一次）</p><h5 id="5-闭包（closure）"><a href="#5-闭包（closure）" class="headerlink" title="5.闭包（closure）"></a>5.闭包（closure）</h5><p>5.1<strong>定义</strong></p><p>闭包是一个可以访问另一个作用域的函数，通常用于嵌套的函数结构中，由于<code>JavaScript</code>的特性，位于外层的函数无法访问内部函数中定义的变量，而内部函数却可以直接访问外部函数中定义的变量（作用域链）。</p><p>通俗的讲，<strong>在函数嵌套时，内层函数的功能实现依赖于外部函数中的局部变量，并在外层函数中返回对内嵌函数的引用，这时内嵌函数就形成了闭包。</strong></p><p>5.2<strong>闭包作用</strong></p><p>闭包能够延长函数局部变量的生命周期。当与闭包关联的函数对象被释放时，闭包中占用的内存就会被释放。假如f是引用闭包closure的变量，将f=null，那么就没有任何变量引用closure了，此时，closure成为了垃圾，由js的垃圾回收机制回收其占用的内存。</p><p>5.3<strong>应用场景</strong></p><p>5.3.1创建私有变量</p><p>5.3.2模拟块级作用域</p><h5 id="6-vue响应式原理"><a href="#6-vue响应式原理" class="headerlink" title="6.vue响应式原理"></a>6.vue响应式原理</h5><p>Vue 的响应式原理是核心是通过 <strong>ES5 的保护对象的 Object.defindeProperty</strong> 中的访问器属性中的 <strong>get</strong> 和 <strong>set</strong> 方法，data 中声明的属性都被添加了访问器属性，当读取 data 中的数据时自动调用 get 方法，当修改 data 中的数据时，自动调用 set 方法，收集视图依赖了哪些数据，<strong>检测到数据的变化</strong>，会通知观察者 <strong>Wacher</strong>，观察者 Wacher自动触发重新render 当前组件（子组件不会重新渲染）,生成新的虚拟 DOM 树，Vue 框架会遍历并对比<strong>新虚拟 DOM 树和旧虚拟 DOM 树中每个节点的差别</strong>，并记录下来，最后，加载操作，将所有记录的不同点，<strong>局部修改到真实 DOM 树上。</strong></p><h5 id="7-vue生命周期函数详解"><a href="#7-vue生命周期函数详解" class="headerlink" title="7.vue生命周期函数详解"></a>7.vue生命周期函数详解</h5><p>7.1beforeCreate：实例初始化之后，组件被创建时期，此时的el、data、message都是underfined。应用场景：可以加入loading 事件；在服务器端的应用场景中，这个时候发送数据请求比较多一些</p><p>7.2created：实例创建完成，data、methods等被初始化。应用场景：结束 loading 事件；推荐这个时候发送请求数据，尤其是返回的数据与绑定事件有关时</p><p>7.3beforeMount：挂载初始化，完成了el的初始化，render被初次调用，可以发送数据请求。在服务器端渲染不会被调用</p><p>7.4mounted：完成挂载，获取el中的DOM元素，进行DOM操作；如果返回的数据操作依赖DOM完成，推荐这个时候发送数据请求。在服务器端渲染不会被调用</p><p>7.5beforeUpdate：挂载开始之前调用，挂载完成之前访问现有 DOM ，比如手动移除已添加的事件监听器；也可以进一步修改数据；在服务器渲染期间不会被调用，只有初次渲染会在服务端调用</p><p>7.6updated：由于数据更改，重新渲染界面时调用。可执行依赖于 DOM 的操作。服务器端渲染期间不会被调用</p><p>7.7activated：keep-alive 组件激活时调用。服务器端渲染期间不会被调用</p><p>7.8deactivated：组件停用时被调用</p><p>7.9beforeDestroy：实例销毁之前调用</p><p>7.10destroyed：实例销毁后调有。调用后，所有东西都会被解绑，所有的事件监听器会被移动，子实例也会被销毁</p><p>7.11errorCaptured：当捕获一个来自子孙组件的错误时被调用。收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。可返回 false 以阻止该错误继续向上传播</p>]]></content>
      
      
      <categories>
          
          <category> 笔记整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax知识点</title>
      <link href="/2020/08/01/Ajax%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2020/08/01/Ajax%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="1-HTTP基于TCP，是面向连接的协议，建立连接要通过上次握手，断开连接要经过第四次挥手"><a href="#1-HTTP基于TCP，是面向连接的协议，建立连接要通过上次握手，断开连接要经过第四次挥手" class="headerlink" title="1.HTTP基于TCP，是面向连接的协议，建立连接要通过上次握手，断开连接要经过第四次挥手"></a>1.HTTP基于TCP，是面向连接的协议，建立连接要通过上次握手，断开连接要经过第四次挥手</h5><h5 id="2-http协议的构成："><a href="#2-http协议的构成：" class="headerlink" title="2.http协议的构成："></a>2.http协议的构成：</h5><h6 id="1-请求头-—-request-header"><a href="#1-请求头-—-request-header" class="headerlink" title="1.请求头 — request header"></a>1.请求头 — request header</h6><p>url</p><p>method</p><p>query</p><h6 id="2-请求体-—-request-body"><a href="#2-请求体-—-request-body" class="headerlink" title="2.请求体 — request body"></a>2.请求体 — request body</h6><h6 id="3-响应头-—-response-header"><a href="#3-响应头-—-response-header" class="headerlink" title="3.响应头 — response header"></a>3.响应头 — response header</h6><p>content-type</p><h6 id="4-响应体-—-response-body"><a href="#4-响应体-—-response-body" class="headerlink" title="4.响应体 — response body"></a>4.响应体 — response body</h6><p>响应数据</p><a id="more"></a><h5 id="3-常见状态码"><a href="#3-常见状态码" class="headerlink" title="3.常见状态码:"></a>3.常见状态码:</h5><p>1.100-199：表示连接继续</p><p>2.200-299：表示各种意义上的成功</p><p>3.300-399：表示重定向</p><p>4.400-499：表示各种客户端的错误</p><p>5.500-599：表示各种服务端错误</p><h5 id="4-XMLHttpRequest对象"><a href="#4-XMLHttpRequest对象" class="headerlink" title="4.XMLHttpRequest对象"></a>4.XMLHttpRequest对象</h5><p>1.方法：</p><p>​    open()  打开连接</p><p>​        参数：1.请求的方法（method）2.请求的url 3.是否异步，默认值是异步，可不传</p><p>​    send() 发送请求</p><p>​    onreadystatechange属性用来监听的状态的改变</p><p>​    readyState 状态值，0-5，4代表最终的完成</p><p>​    status 状态码</p><p>​    responseText  服务器返回的数据 </p><p>2.POST方法传递参数</p><p>设置请求头的content-type</p><p>setRquestHeader(“Content-type”,”application/x-www-form-urlencoded”)</p><p>在send（）里面传参</p><h5 id="5-Promise"><a href="#5-Promise" class="headerlink" title="5.Promise"></a>5.Promise</h5>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些css使用小技巧</title>
      <link href="/2020/07/28/%E4%B8%80%E4%BA%9Bcss%E4%BD%BF%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>/2020/07/28/%E4%B8%80%E4%BA%9Bcss%E4%BD%BF%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="1-继承盒模型"><a href="#1-继承盒模型" class="headerlink" title="1.继承盒模型"></a>1.继承盒模型</h5><p>让盒模型从html 继承：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;    </span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;  </span><br><span class="line">&#125;    </span><br><span class="line">*, *<span class="selector-pseudo">:before</span>, *<span class="selector-pseudo">:after</span> &#123;    </span><br><span class="line">    <span class="attribute">box-sizing</span>: inherit;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-垂直居中任何元素"><a href="#2-垂直居中任何元素" class="headerlink" title="2.垂直居中任何元素"></a>2.垂直居中任何元素</h5><p>在没有准备使用CSSGrid 布局的时候，设置垂直居中布局的全局规则是一个很好的方式，可以为优雅（elegantly）的设置内容布局奠定一个基础</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123; <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">     <span class="attribute">margin</span>: <span class="number">0</span>;  </span><br><span class="line">&#125;    </span><br><span class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">-webkit-align-items</span>: center;        </span><br><span class="line">    <span class="attribute">-ms-flex-align</span>: center;        </span><br><span class="line">    <span class="attribute">align-items</span>: center;        </span><br><span class="line">    <span class="attribute">display</span>: -webkit-flex;        </span><br><span class="line">    <span class="attribute">display</span>: flex;  &#125;</span><br></pre></td></tr></table></figure><h5 id="3-等宽表格单元格"><a href="#3-等宽表格单元格" class="headerlink" title="3.等宽表格单元格"></a>3.等宽表格单元格</h5><p>表格可能很难处理，所以尝试使用<code>table-layout：fixed</code>来保持单元格相等宽度：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.calendar</span> &#123;    </span><br><span class="line">    <span class="attribute">table-layout</span>: fixed;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域相关问题</title>
      <link href="/2020/07/24/%E8%B7%A8%E5%9F%9F%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
      <url>/2020/07/24/%E8%B7%A8%E5%9F%9F%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="1-什么是跨域？"><a href="#1-什么是跨域？" class="headerlink" title="1.什么是跨域？"></a>1.什么是跨域？</h5><p>跨域是指从一个域名去请求另一个域名的资源，严格来说，只要域名，协议，端口任何一个不同，就视为跨域。</p><h5 id="2-为什么会出现跨域？"><a href="#2-为什么会出现跨域？" class="headerlink" title="2.为什么会出现跨域？"></a>2.为什么会出现跨域？</h5><p>为了网络安全起见，浏览器设置了一个同源策略，规定只有域名，端口，协议全部相同，就叫做同源。当页面在执行一个脚本时，会检查访问的资源是否同源，如果不是，就会报错。可是在实际开发中，经常会有跨域加载资源的需求，避免不了跨域请求，所以就出现了跨域。</p><a id="more"></a><h5 id="3-什么是同源策略及限制？"><a href="#3-什么是同源策略及限制？" class="headerlink" title="3.什么是同源策略及限制？"></a>3.什么是同源策略及限制？</h5><p>同源策略是指从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互，这是一个用来隔离潜在恶意文件的的关键的安全机制。不同源之间的交互是被浏览器限制的，为了安全起见。</p><p><strong>同源策略限制的具体表现是什么？</strong></p><p>（1）coikie、LocalStorage和Index DB 无法读取<br>（2）Dom 无法获得<br>（3）AJAX请求不能发送</p><h5 id="4-常见的解决跨域问题的方法"><a href="#4-常见的解决跨域问题的方法" class="headerlink" title="4.常见的解决跨域问题的方法"></a>4.常见的解决跨域问题的方法</h5><h6 id="4-1-JOSNP"><a href="#4-1-JOSNP" class="headerlink" title="4.1.JOSNP:"></a>4.1.JOSNP:</h6><p>4.1.1原理：</p><p>利用了js中自带跨域标签<script>,在该标签外套了一层壳，利用标签的特性达到跨域加载资源的效果。<strong>JSONP由两部分组成，回调函数和数据</strong>。</p><p>4.1.2优点:</p><p>（1）兼容性好，在多古老的浏览器都能运行。<br>（2）能直接访问响应文本，支持在浏览器与服务器之间双向通信。</p><p>4.1.3缺点:</p><p>（1）只支持GET请求，不支持POST请求；<br>（2）不够安全。因为JSONP是从其他域中加载代码执行，如果其他域不安全，可能会在响应中带有恶意代码。<br>（3）不容易确认请求是否失败。</p><h6 id="4-2CORS-跨域资源共享"><a href="#4-2CORS-跨域资源共享" class="headerlink" title="4.2CORS(跨域资源共享)"></a>4.2CORS(跨域资源共享)</h6><p>4.2.1.原理:</p><p>新增HTTPS首部字段，允许服务器声明哪些来源请求有权限访问哪些资源,使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功还是失败。请求和响应都不包含cookie信息。CORS需要浏览器和后院同时支持，浏览器会自动进行CORS通信，实现CORS通信的关键是后端，只要后端实现了CORS，就实现了跨域，服务端设置Access-Control-Allow-Origin 就可以开启CORS，该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。</p><h6 id="4-3反向代理"><a href="#4-3反向代理" class="headerlink" title="4.3反向代理"></a>4.3反向代理</h6><p>4.3.1原理:</p><p>通过在请求到达服务前部署一个服务，将接口请求进行转发，通过反向代理可以将前端，后端项目统一通过反向代理来提供对外的服务。（目前前后端分离项目主流方法）。</p><h6 id="4-4代理方法补充"><a href="#4-4代理方法补充" class="headerlink" title="4.4代理方法补充"></a>4.4代理方法补充</h6><p>4.4.1axios的跨域代理</p><p>创建实例建立代理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="keyword">var</span> server = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">'https://domain.com/api/'</span>,</span><br><span class="line">  timeout: <span class="number">1000</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>vue中跨域设置</p><p>在<code>config/index.js</code>中设置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  dev: &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    proxyTable: &#123;</span><br><span class="line">      <span class="string">'/api'</span>: &#123;</span><br><span class="line">          target: <span class="string">'http://10.0.100.7:8081'</span>, <span class="comment">//设置调用接口域名和端口号别忘了加http</span></span><br><span class="line">          changeOrigin: <span class="literal">true</span>,</span><br><span class="line">          pathRewrite:&#123;</span><br><span class="line">            <span class="string">"^/api"</span>:<span class="string">""</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>接口调用时：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.axios.get(<span class="string">'/api/user'</span>,&#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">        userId:<span class="string">'1'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>4.4.2nodejs跨域代理</p><p>按照代理代理包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S http-proxy</span><br></pre></td></tr></table></figure><p>设置跨域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> url=<span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">var</span> path=<span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> httpProxy = <span class="built_in">require</span>(<span class="string">'http-proxy'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务端口</span></span><br><span class="line"><span class="keyword">var</span> PORT = <span class="number">8080</span>;</span><br><span class="line"><span class="comment">//接口前缀</span></span><br><span class="line"><span class="keyword">var</span> API_URL=<span class="string">'api'</span>;</span><br><span class="line"><span class="comment">//真正的api地址</span></span><br><span class="line"><span class="keyword">var</span> API_DOMAIN=<span class="string">'http://www.example.com/'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个代理服务器</span></span><br><span class="line"><span class="keyword">var</span> proxy = httpProxy.createProxyServer(&#123;</span><br><span class="line">    target: API_DOMAIN,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理出错则返回500</span></span><br><span class="line">proxy.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, req, res</span>)</span>&#123;</span><br><span class="line">    res.writeHead(<span class="number">500</span>, &#123;</span><br><span class="line">      <span class="string">'content-type'</span>: <span class="string">'text/plain'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    res.end(<span class="string">'server is error!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立一个本地的server</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</span><br><span class="line">    <span class="keyword">var</span> realPath = path.join(<span class="string">"./"</span>, pathname);</span><br><span class="line">    <span class="keyword">var</span> ext = path.extname(realPath);</span><br><span class="line">    ext = ext ? ext.slice(<span class="number">1</span>) : <span class="string">'unknown'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断如果是接口访问，则通过proxy转发</span></span><br><span class="line">    <span class="built_in">console</span>.log(pathname);</span><br><span class="line">    <span class="built_in">console</span>.log(API_URL);</span><br><span class="line">    <span class="keyword">if</span>(pathname.indexOf(API_URL) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(request.url.substring(<span class="number">4</span>,request.url.length));</span><br><span class="line">        request.url=request.url.substring(<span class="number">4</span>,request.url.length)</span><br><span class="line">        proxy.web(request, response);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(PORT);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Server runing at port: "</span> + PORT + <span class="string">"."</span>);</span><br></pre></td></tr></table></figure><p>4.4.3.nginx跨域代理</p><p>设置cors</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">  if ($request_method &#x3D; &#39;OPTIONS&#39;) &#123;</span><br><span class="line">    add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;;</span><br><span class="line">    add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET, POST, OPTIONS&#39;;</span><br><span class="line">    add_header &#39;Access-Control-Allow-Headers&#39; &#39;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&#39;;</span><br><span class="line">    add_header &#39;Access-Control-Max-Age&#39; 64800;</span><br><span class="line">    add_header &#39;Content-Type&#39; &#39;text&#x2F;plain charset&#x3D;UTF-8&#39;;</span><br><span class="line">    add_header &#39;Content-Length&#39; 0;</span><br><span class="line">    return 204;</span><br><span class="line">  &#125;</span><br><span class="line">  if ($request_method &#x3D; &#39;POST&#39;) &#123;</span><br><span class="line">    add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;;</span><br><span class="line">    add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET, POST, OPTIONS&#39;;</span><br><span class="line">    add_header &#39;Access-Control-Allow-Headers&#39; &#39;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&#39;;</span><br><span class="line">  &#125;</span><br><span class="line">  if ($request_method &#x3D; &#39;GET&#39;) &#123;</span><br><span class="line">    add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;;</span><br><span class="line">    add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET, POST, OPTIONS&#39;;</span><br><span class="line">    add_header &#39;Access-Control-Allow-Headers&#39; &#39;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&#39;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者是反向代理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen       80; #监听80端口</span><br><span class="line">  server_name  localhost; # 当前服务的域名</span><br><span class="line">  location &#x2F; &#123;</span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;localhost:81;</span><br><span class="line">    proxy_redirect default;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location &#x2F;apis &#123; #添加访问目录为&#x2F;apis的代理配置</span><br><span class="line">    rewrite  ^&#x2F;apis&#x2F;(.*)$ &#x2F;$1 break;</span><br><span class="line">    proxy_pass   http:&#x2F;&#x2F;localhost:82;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -后端 -前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组与字符串常用方法小结</title>
      <link href="/2020/07/24/%E6%95%B0%E7%BB%84%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E5%B0%8F%E7%BB%93/"/>
      <url>/2020/07/24/%E6%95%B0%E7%BB%84%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="1-数组"><a href="#1-数组" class="headerlink" title="1.数组"></a>1.数组</h5><p>1.<strong>slice</strong>(a,b)</p><p>返回数组中下标为参数a到参数b的元素，不包含下标为参数b的元素，并且不会改变原数组。</p><p>2.<strong>splice</strong>(a,b,c,d,…)</p><p>返回数组中下标为参数a开始的参数b个元素，原数组会被改变，并且在a，b参数后面的参数会被添加到数组的头中。</p><p>3.<strong>unshift</strong>()</p><p>在数组的前面添加元素，所添加的元素为参数（参数可以多个）。会改变原数组，返回的是新数组的长度。</p><a id="more"></a><p>4.<strong>pop</strong>()</p><p>删除数组的最后的元素，会改变原数组，返回值为被删除的元素的值。</p><p>5.<strong>push</strong>()</p><p>在数组的后面添加一个或多个元素（由参数决定），会改变原数组，返回值为添加元素后数组的长度</p><p>6.<strong>shift</strong>()</p><p>删除数组的第一个元素，返回值为被删除的元素的值</p><h5 id="2-字符串"><a href="#2-字符串" class="headerlink" title="2.字符串"></a>2.字符串</h5><p>1.<strong>substr</strong>(a,b)</p><p>提取字符串中参数a开始的b个字符，返回值为被提取的字符串，不会改变原字符串。</p><p>2.<strong>substring</strong>(a,b)</p><p>提取字符串中参数a到b之间（不包含b）的字符，返回值为被提取的字符串，不会改变原字符串</p><p>3.<strong>split</strong>()</p><p>分割字符串，参数为分割规则，返回值为将字符串分割后的数组，不会改变原字符串。</p><p>4<strong>slice</strong>(a,b)</p><p>返回字符串中下标为参数a到参数b的元素，不包含下标为参数b的元素，并且不会改变原字符串</p>]]></content>
      
      
      <categories>
          
          <category> 笔记整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS--异步机制</title>
      <link href="/2020/07/16/JS-%E5%BC%82%E6%AD%A5%E6%9C%BA%E5%88%B6/"/>
      <url>/2020/07/16/JS-%E5%BC%82%E6%AD%A5%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="1-Promise"><a href="#1-Promise" class="headerlink" title="1.Promise"></a>1.Promise</h5><p>Promise 是异步编程的一种解决方案，比传统的解决方案——<strong>回调函数和事件</strong>——更合理且更强大。ES6将其写进了语言标准，统一了用法，并原生提供了Promise对象。</p><h6 id="1-1特点"><a href="#1-1特点" class="headerlink" title="1.1特点"></a>1.1特点</h6><p>1.1.1对象的状态不受外界影响（3种状态）</p><p>​    Pending状态（进行中）</p><p>​    Fulfilled状态（已成功）</p><p>​    Rejected（已失败）</p><p>1.1.2一旦状态改变就不会再变（两种状态改变：成功或者失败）</p><p>​    Pending -&gt; Fulfilled</p><p>​    Pending -&gt; Rejected</p><a id="more"></a><h6 id="1-2用法"><a href="#1-2用法" class="headerlink" title="1.2用法"></a>1.2用法</h6><p>1.2.1创建一个Promise实例</p><p>​    </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// ... some code</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>) &#123;</span><br><span class="line">        resolve(value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>​    Promise构造函数接受一个函数作为参数，该函数的两个参数分别是<code>resolve</code>和<code>reject</code>。<strong>它们是两个函数，由JavaScript引擎提供</strong>，不用自己部署。</p><p>​    resolve作用是将Promise对象状态由“未完成”变为“成功”，也就是<code>Pending -&gt; Fulfilled</code>，在异步操作成功时调用，并将异步操作的结果作为参数传递出去；而reject函数则是将Promise对象状态由“未完成”变为“失败”，也就是<code>Pending -&gt; Rejected</code>，在异步操作失败时调用，并将异步操作的结果作为参数传递出去。</p><p>1.2.2then</p><p>Promise实例生成后，可用<code>then</code>方法分别指定两种状态回调参数。then 方法可以接受两个回调函数作为参数：</p><ol><li>Promise对象状态改为Resolved时调用 （必选）</li><li>Promise对象状态改为Rejected时调用 （可选）</li></ol><p>代码实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        setTimeout(resolve, ms);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">sleep(<span class="number">500</span>).then( <span class="function"><span class="params">()</span>=&gt;</span> <span class="built_in">console</span>.log(<span class="string">"finished"</span>));</span><br></pre></td></tr></table></figure><p>这段代码定义了一个函数sleep，调用后，等待了指定参数（500）毫秒后执行then中的函数。值得注意的是，Promise新建后就会立即执行。</p><p>1.2.3执行顺序</p><p>​    实例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"AAA"</span>);</span><br><span class="line">    resolve()</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"BBB"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"CCC"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// AAA</span></span><br><span class="line"><span class="comment">// CCC</span></span><br><span class="line"><span class="comment">// BBB</span></span><br></pre></td></tr></table></figure><p>​    代码解释：</p><p>执行后发现顺序为 AAA – CCC –  BBB。表明，在promise新建后会立即执行，所以首先输出AAA。然后，then方法指定的回调函数将在当前脚本所有同步任务执行完后才会执行，所以BBB最后输出。</p><p>1.2.4与定时器混用</p><p>​    代码实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"1"</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;);</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">console</span>.log(<span class="string">"2"</span>), <span class="number">0</span>);</span><br><span class="line">promise.then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"3"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"4"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>打印顺序为 1 – 4 – 3 – 2。1与4的顺序不必再说，而2与3中优先输出Promise的then，而后输出定时器任务。原因则是promise属于JavaScript引擎内部任务，而setTimeout则是浏览器API，而<strong>引擎内部任务优先级高于浏览器API任务</strong>。</p><p>1.2.5finally</p><p>​    在任何情况下都会执行的，一般写在catch之后</p><h5 id="2-async-await"><a href="#2-async-await" class="headerlink" title="2.async/await"></a>2.async/await</h5><h6 id="2-1async"><a href="#2-1async" class="headerlink" title="2.1async"></a>2.1async</h6><p>​    async函数对 Generator 函数的改进，async 函数必定返回 Promise，我们把所有返回 Promise 的函数都可以认为是异步函数。特点体现在以下四点</p><p>​    内置执行器</p><p>​    更好的语义</p><p>​    更广的适用性</p><p>​    返回值是Promise</p><h6 id="2-2await"><a href="#2-2await" class="headerlink" title="2.2await"></a>2.2await</h6><p>​    正常情况下，await命令后面是一个 Promise 对象，返回该对象的结果。如果不是 Promise 对象，就直接返回对应的值。另一种情况是，await命令后面是一个thenable对象（即定义then方法的对象），那么await会将其等同于 Promise 对象。</p><h6 id="2-3混合使用"><a href="#2-3混合使用" class="headerlink" title="2.3混合使用"></a>2.3混合使用</h6><p>​    代码实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        setTimeout(resolve,ms);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"AAA"</span>)</span><br><span class="line">    <span class="keyword">await</span> sleep(<span class="number">5000</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"BBB"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handle();</span><br><span class="line"></span><br><span class="line"><span class="comment">// AAA</span></span><br><span class="line"><span class="comment">// BBB (5000ms后)</span></span><br></pre></td></tr></table></figure><p>​    我们定义函数sleep，返回一个Promise。然后在handle函数前加上async关键词，这样就定义了一个async函数。在该函数中，利用await来等待一个Promise。</p><h6 id="2-4Promise优缺点："><a href="#2-4Promise优缺点：" class="headerlink" title="2.4Promise优缺点："></a>2.4Promise优缺点：</h6><p>2.4.1优点：</p><p>​    解决回调，链式调用，减少嵌套</p><p>2.4.2缺点</p><p>​    无法监测进行状态</p><p>​    新建立即执行且无法取消</p><p>​    内部错误无法抛出</p><h5 id="3-Generator"><a href="#3-Generator" class="headerlink" title="3.Generator"></a>3.Generator</h5><p>Generator 函数是一个状态机，封装了多个内部状态。执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。形式上，Generator 函数是一个普通函数，但是有两个特征。一是，<code>function</code>关键字与函数名之间有一个星号；二是，函数体内部使用<code>yield</code>表达式，定义不同的内部状态（<code>yield</code>在英语里的意思就是“产出”）。Generator 函数是分段执行的，<strong><code>yield</code>表达式是暂停执行的标记，而<code>next</code>方法可以恢复执行</strong>。</p><p>调用 Generator 函数，返回一个遍历器对象，代表 Generator 函数的内部指针。以后，每次调用遍历器对象的<code>next</code>方法，就会返回一个有着<code>value</code>和<code>done</code>两个属性的对象。<code>value</code>属性表示当前的内部状态的值，是<code>yield</code>表达式后面那个表达式的值；<code>done</code>属性是一个布尔值，表示是否遍历结束。</p><p><code>yield</code>表达式后面的表达式，只有当调用<code>next</code>方法、内部指针指向该语句时才会执行</p><h6 id="3-1yield与return异同"><a href="#3-1yield与return异同" class="headerlink" title="3.1yield与return异同"></a>3.1yield与return异同</h6><p>相似之处在于，都能返回紧跟在语句后面的那个表达式的值。区别在于每次遇到<code>yield</code>，函数暂停执行，下一次再从该位置继续向后执行，而<code>return</code>语句不具备位置记忆的功能。一个函数里面，只能执行一次（或者说一个）<code>return</code>语句，但是可以执行多次（或者说多个）<code>yield</code>表达式。正常函数只能返回一个值，因为只能执行一次<code>return</code>；Generator 函数可以返回一系列的值，因为可以有任意多个<code>yield</code>。</p><h6 id="3-2next-、throw-、return-的共同点"><a href="#3-2next-、throw-、return-的共同点" class="headerlink" title="3.2next()、throw()、return() 的共同点"></a>3.2next()、throw()、return() 的共同点</h6><p><code>next()</code>、<code>throw()</code>、<code>return()</code>这三个方法本质上是同一件事，可以放在一起理解。它们的作用都是让 Generator 函数恢复执行，并且使用不同的语句替换<code>yield</code>表达式。<code>next()</code>是将<code>yield</code>表达式替换成一个值。</p><h5 id="4-callback"><a href="#4-callback" class="headerlink" title="4.callback"></a>4.callback</h5><p><code>callback</code> 来控制异步的方式虽然非常简单，但也过于原始，在实际的使用中易出现回调地狱问题，代码的逻辑顺序和业务顺序是不相同的，阅读困难，错误控制基本靠手动检查 <code>error</code> 参数，例如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">asyncFunction1(<span class="function">(<span class="params">error, result1</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'error: '</span>, error)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  asyncFunction2(<span class="function">(<span class="params">error, result2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'error: '</span>, error)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    asyncFunction3(<span class="function">(<span class="params">error, result3</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'error: '</span>, error)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'处理结果：'</span>, result3)</span><br><span class="line">    &#125;, result2)</span><br><span class="line">  &#125;, result1)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><hr><p>推荐在书写异步处理的代码逻辑时，尽量使用<code>async/await</code>，原因：</p><ul><li>更加简洁的写法</li><li>使得用同一种构造（<code>try/catch</code>）处理同步和异步错误成为可能</li><li><strong>条件分支更清晰</strong>，例如根据返回数据中的某些内容决定是直接返回这些数据还是继续请求更多数据，利用 <code>async/await</code> 书写的代码结构更清晰合理</li><li><strong>中间值的处理更方法</strong>，例如将第一次异步请求的结果做为第二次异步请求的条件，再将第一次第二次请求的结果做为第三次异步请求的条件，使用 <code>Promise</code> 会出现嵌套的书写，而 <code>async/await</code> 以同步的代码风格保证了语义，也更简单易读</li><li><strong>异步堆栈的处理更清晰</strong>，<code>Promise</code> 返回的异常堆栈中没有包含关于异常是从哪一个环节抛出的信息，而 <code>async/await</code> 的异常堆栈能够指向正确的函数</li><li><strong>更易于调试</strong>，一直以来，<code>Promise</code> 的调试很让人头痛，<code>async/await</code> 出现后，使得异步的业务逻辑也和普通的同步调用一样可以很方便的调试了</li><li>你可以 <code>await</code> 任何的操作，<code>await</code> 后的表达式<strong>既可以是异步的，也可以是同步的</strong></li></ul><p>（参考<code>Mostafa Gaafar</code> 在他的 7 Reasons Why JavaScript Async/Await Is Better Than Plain Promises (Tutorial) 一文）</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript原型与原型链</title>
      <link href="/2020/07/14/JavaScript%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
      <url>/2020/07/14/JavaScript%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="一-普通函数与函数对象"><a href="#一-普通函数与函数对象" class="headerlink" title="一.普通函数与函数对象"></a>一.普通函数与函数对象</h5><p>js中分为普通对象和函数对象，Object、Function是JS自带的函数对象。函数对象定义：凡是通过 new Function()创建的对象都是函数对象，其他的都是普通对象。</p><h5 id="二-构造函数"><a href="#二-构造函数" class="headerlink" title="二.构造函数"></a>二.构造函数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.job = job;</span><br><span class="line"><span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; alert(<span class="keyword">this</span>.name) &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'Zaxlct'</span>, <span class="number">28</span>, <span class="string">'Software Engineer'</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">'Mick'</span>, <span class="number">23</span>, <span class="string">'Doctor'</span>);</span><br></pre></td></tr></table></figure><p>上面的例子中 person1 和 person2 都是 Person 的<strong>实例</strong>。这两个<strong>实例</strong>都有一个 <code>constructor</code> （构造函数）属性，该属性（是一个指针）指向 Person。 即：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(person1.constructor == Person); <span class="comment">//true</span></span><br><span class="line">  <span class="built_in">console</span>.log(person2.constructor == Person); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>我们要记住两个概念（构造函数，实例）：<br><strong>person1 和 person2 都是 构造函数 Person 的实例</strong><br>一个公式：<br><strong>实例的构造函数属性（constructor）指向构造函数。</strong></p><a id="more"></a><h5 id="三-原型对象"><a href="#三-原型对象" class="headerlink" title="三.原型对象"></a>三.原型对象</h5><p>在 JavaScript 中，每当定义一个对象（函数也是对象）时候，对象中都会包含一些预定义的属性。其中每个<strong>函数对象</strong>都有一个<code>prototype</code> 属性，这个属性指向函数的<strong>原型对象</strong>。（先用不管什么是 <code>__proto__</code> 第二节的课程会详细的剖析）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.name = <span class="string">'Zaxlct'</span>;</span><br><span class="line">Person.prototype.age  = <span class="number">28</span>;</span><br><span class="line">Person.prototype.job  = <span class="string">'Software Engineer'</span>;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line">person1.sayName(); <span class="comment">// 'Zaxlct'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line">person2.sayName(); <span class="comment">// 'Zaxlct'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person1.sayName == person2.sayName); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><strong>定律：每个对象都有 proto 属性，但只有函数对象才有 prototype 属性</strong></p><p>原型对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype = &#123;</span><br><span class="line">   name:  <span class="string">'Zaxlct'</span>,</span><br><span class="line">   age: <span class="number">28</span>,</span><br><span class="line">   job: <span class="string">'Software Engineer'</span>,</span><br><span class="line">   sayName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     alert(<span class="keyword">this</span>.name);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原型对象就是一个普通对象，在上面给Person.prototype添加四个属性:name、age、job、sayName。其中它还有一个默认的属性：</p><p><strong>constructor</strong>。<strong>在默认的情况下，所有的原型对象都会自动获得一个constructor（构造函数）属性，这个属性（是一个指针）指向prototype属性所在的函数（Person）</strong></p><p>前面提到<strong>实例的构造函数属性（constructor）指向构造函数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person1.constructor == Person</span><br><span class="line">Person.prototype.constructor == Person</span><br></pre></td></tr></table></figure><p>person1 为什么有 constructor 属性是因为 person1 是 Person 的实例；Person.prototype 有 constructor 属性是因为Person.prototype是Person 的实例，也就是在 Person 创建的时候，创建了一个它的实例对象并赋值给它的 prototype，过程如下伪代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> A = <span class="keyword">new</span> Person();</span><br><span class="line"> Person.prototype = A;</span><br></pre></td></tr></table></figure><p>所以：<strong>原型对象（Person.prototype）是 构造函数（Person）的一个实例</strong></p><p>原型对象其实就是普通对象（但是Function.prototype除外，他是函数对象，但他很特殊，他没有prototype属性（前面说道函数对象都有prototype属性））。看下面的例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"> <span class="built_in">console</span>.log(Person.prototype) <span class="comment">//Person&#123;&#125;</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="keyword">typeof</span> Person.prototype) <span class="comment">//Object</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Function</span>.prototype) <span class="comment">// Function，这个特殊</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Object</span>.prototype) <span class="comment">// Object</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Function</span>.prototype.prototype) <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p><strong>因为通过new Fuction（）产生的对象都是函数对象。因为A是函数对象，所以Function.prototype是函数对象。</strong></p><p>原型对象主要作用用于继承，例子如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name; <span class="comment">// tip: 当函数执行时这个 this 指的是谁？</span></span><br><span class="line">  &#125;;</span><br><span class="line">  Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;  <span class="comment">// tip: 当函数执行时这个 this 指的是谁？</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> person1 = <span class="keyword">new</span> person(<span class="string">'Mick'</span>);</span><br><span class="line">  person1.getName(); <span class="comment">//Mick</span></span><br></pre></td></tr></table></figure><p>从这个例子可以看出，通过给 <code>Person.prototype</code> 设置了一个函数对象的属性，那有 Person 的实例（person1）出来的普通对象就继承了这个属性。具体是怎么实现的继承，就要讲到下面的原型链了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> person(<span class="string">'Mick'</span>);</span><br><span class="line">  person1.name = <span class="string">'Mick'</span>; <span class="comment">// 此时 person1 已经有 name 这个属性了</span></span><br><span class="line">  person1.getName(); <span class="comment">//Mick</span></span><br></pre></td></tr></table></figure><p>两次 this 在函数执行时都指向 person1。</p><h5 id="四-proto"><a href="#四-proto" class="headerlink" title="四.__proto__"></a>四.<code>__proto__</code></h5><p>JS在创建对象（不论是普通对象还是函数对象）的时候，都有一个叫做<code>__proto__</code>的内置属性，用于指向创建它的构造函数的原型函数。</p><p>对象 person1 有一个 <code>__proto__</code>属性，创建它的构造函数是 Person，构造函数的原型对象是 Person.prototype ，所以：<br> <code>person1.__proto__ == Person.prototype</code></p><p><strong>结论:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype.constructor == Person;</span><br><span class="line">person1.__proto__ == Person.prototype;</span><br><span class="line">person1.constructor == Person;</span><br></pre></td></tr></table></figure><p>注意，要明确的是，这个连接存在实例（person1）与构造函数（Person）的原型对象（Person.prototype）之间，而不是存在于实例（person1）与构造函数（Person）之间。</p><p>因为绝大部分浏览器都支持<code>__proto__</code>属性，所以它才被加入了ES6里。</p><h5 id="五-构造器"><a href="#五-构造器" class="headerlink" title="五.构造器"></a>五.构造器</h5><p>创建对象：</p><p>var obj = ｛｝等同于 </p><p>var obj = new Object()</p><p>obj是构造函数（Object）的一个实例。所以：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj.constructor === <span class="built_in">Object</span></span><br><span class="line">obj.__proto__ === <span class="built_in">Object</span>.prototype</span><br></pre></td></tr></table></figure><p>新对象 obj 是使用 new 操作符后跟一个<strong>构造函数</strong>来创建的。构造函数（Object）本身就是一个函数（就是上面说的函数对象），它和上面的构造函数 Person 差不多。只不过该函数是出于创建新对象的目的而定义的。所以不要被 Object 吓倒。</p><p>同理，可以创建对象的构造器不仅仅有 Object，也可以是 Array，Date，Function等。<br>所以我们也可以构造函数来创建 Array、 Date、Function</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">b.constructor === <span class="built_in">Array</span>;</span><br><span class="line">b.__proto__ === <span class="built_in">Array</span>.prototype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> <span class="built_in">Date</span>(); </span><br><span class="line">c.constructor === <span class="built_in">Date</span>;</span><br><span class="line">c.__proto__ === <span class="built_in">Date</span>.prototype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Function</span>();</span><br><span class="line">d.constructor === <span class="built_in">Function</span>;</span><br><span class="line">d.__proto__ === <span class="built_in">Function</span>.prototype;</span><br></pre></td></tr></table></figure><h5 id="六-原型链"><a href="#六-原型链" class="headerlink" title="六.原型链"></a>六.原型链</h5><p>小测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">person1.__proto__ 是什么？</span><br><span class="line">Person.__proto__ 是什么？</span><br><span class="line">Person.prototype.__proto__ 是什么？</span><br><span class="line">Object.__proto__ 是什么？</span><br><span class="line">Object.prototype__proto__ 是什么？</span><br></pre></td></tr></table></figure><p>答案：<br> 第一题：<br> 因为 <code>person1.__proto__ === person1 的构造函数.prototype</code><br> 因为 <code>person1的构造函数 === Person</code><br> 所以 <code>person1.__proto__ === Person.prototype</code></p><p>第二题：<br> 因为 <code>Person.__proto__ === Person的构造函数.prototype</code><br> 因为 <code>Person的构造函数 === Function</code><br> 所以 <code>Person.__proto__ === Function.prototype</code></p><p>第三题：<br> <code>Person.prototype</code> 是一个普通对象，我们无需关注它有哪些属性，只要记住它是一个普通对象。<br> 因为一个普通对象的构造函数 === Object<br> 所以 <code>Person.prototype.__proto__ === Object.prototype</code></p><p>第四题，参照第二题，因为 Person 和 Object 一样都是构造函数</p><p>第五题：<br> <code>Object.prototype</code> 对象也有<strong>proto</strong>属性，但它比较特殊，为 null 。因为 null 处于原型链的顶端，这个只能记住。<br> <code>Object.prototype.__proto__ === null</code></p><h5 id="七-函数对象（复习前面的知识点）"><a href="#七-函数对象（复习前面的知识点）" class="headerlink" title="七.函数对象（复习前面的知识点）"></a>七.函数对象（复习前面的知识点）</h5><h5 id="所有函数对象的proto都指向Function-prototype，它是一个空函数（Empty-function）"><a href="#所有函数对象的proto都指向Function-prototype，它是一个空函数（Empty-function）" class="headerlink" title="所有函数对象的proto都指向Function.prototype，它是一个空函数（Empty function）"></a><strong>所有<em>函数对象</em>的proto都指向Function.prototype，它是一个空函数（Empty function）</strong></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.__proto__ === <span class="built_in">Function</span>.prototype  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.constructor == <span class="built_in">Function</span> <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Boolean</span>.__proto__ === <span class="built_in">Function</span>.prototype <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Boolean</span>.constructor == <span class="built_in">Function</span> <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>.__proto__ === <span class="built_in">Function</span>.prototype  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">String</span>.constructor == <span class="built_in">Function</span> <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有的构造器都来自于Function.prototype，甚至包括根构造器Object及Function自身</span></span><br><span class="line"><span class="built_in">Object</span>.__proto__ === <span class="built_in">Function</span>.prototype  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.constructor == <span class="built_in">Function</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有的构造器都来自于Function.prototype，甚至包括根构造器Object及Function自身</span></span><br><span class="line"><span class="built_in">Function</span>.__proto__ === <span class="built_in">Function</span>.prototype <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Function</span>.constructor == <span class="built_in">Function</span> <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.__proto__ === <span class="built_in">Function</span>.prototype   <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Array</span>.constructor == <span class="built_in">Function</span> <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">RegExp</span>.__proto__ === <span class="built_in">Function</span>.prototype  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">RegExp</span>.constructor == <span class="built_in">Function</span> <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Error</span>.__proto__ === <span class="built_in">Function</span>.prototype   <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Error</span>.constructor == <span class="built_in">Function</span> <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Date</span>.__proto__ === <span class="built_in">Function</span>.prototype    <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Date</span>.constructor == <span class="built_in">Function</span> <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>JavaScript中有内置(build-in)构造器/对象共计12个（ES5中新加了JSON），这里列举了可访问的8个构造器。剩下如Global不能直接访问，Arguments仅在函数调用时由JS引擎创建，Math，JSON是以对象形式存在的，无需new。它们的<strong>proto</strong>是Object.prototype</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.__proto__ === <span class="built_in">Object</span>.prototype  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Math</span>.construrctor == <span class="built_in">Object</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">JSON</span>.__proto__ === <span class="built_in">Object</span>.prototype  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">JSON</span>.construrctor == <span class="built_in">Object</span> <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>上面说的<strong>函数对象</strong>当然包括自定义的,如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 函数表达式</span></span><br><span class="line"><span class="keyword">var</span> Perosn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Person.__proto__ === <span class="built_in">Function</span>.prototype) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Man.__proto__ === <span class="built_in">Function</span>.prototype)    <span class="comment">// true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中的this原理</title>
      <link href="/2020/07/13/JavaScript%E4%B8%AD%E7%9A%84this%E5%8E%9F%E7%90%86/"/>
      <url>/2020/07/13/JavaScript%E4%B8%AD%E7%9A%84this%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>this指的是函数运行时所在的环境。</p><p>下面一段代码obj.foo和foo指向同一个函数，但是执行结果可能不一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  foo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>.bar) &#125;,</span><br><span class="line">  bar: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = obj.foo;</span><br><span class="line"><span class="keyword">var</span> bar = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">obj.foo() <span class="comment">// 1</span></span><br><span class="line">foo() <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h5 id="1-内存的数据结构"><a href="#1-内存的数据结构" class="headerlink" title="1.内存的数据结构"></a>1.内存的数据结构</h5><p>JavaScript语言之所以有this的设计，跟内存里面的数据结构有关系。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>:  <span class="number">5</span> &#125;;</span><br></pre></td></tr></table></figure><p>上面的代码将一个对象赋值给变量obj。JavaScript引擎先在内存里面。生成一个对象｛foo:5｝,然后把这个对象的内存地址赋值给变量obj。</p><p>也就是说，变量obj是一个地址（reference）。后面如果要读取obj.foo，引擎先从obj拿到内存地址，然后再从该地址读出原始的对象，返回它的foo属性。</p><p>原始的对象以字典结构保存，每一个属性名都对应一个属性描述对象。举例来说，上面例子的foo属性，实际上是以下面的形式保存的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  foo: &#123;</span><br><span class="line">    [[value]]: <span class="number">5</span></span><br><span class="line">    [[writable]]: <span class="literal">true</span></span><br><span class="line">    [[enumerable]]: <span class="literal">true</span></span><br><span class="line">    [[configurable]]: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，foo属性的值保存在属性描述对象的value属性里面</p><a id="more"></a><h5 id="2-函数"><a href="#2-函数" class="headerlink" title="2.函数"></a>2.函数</h5><p>但是如果属性的值可能是一个函数，例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125; &#125;;</span><br></pre></td></tr></table></figure><p>这时，引擎会将函数单独保存在内存中，然后再将函数的地址赋值给foo属性的value属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  foo: &#123;</span><br><span class="line">    [[value]]: 函数的地址</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于函数是一个单独的值，所以它可以在不同的环境（上下文）执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">f</span>: f &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单独执行</span></span><br><span class="line">f()</span><br><span class="line"></span><br><span class="line"><span class="comment">// obj 环境执行</span></span><br><span class="line">obj.f()</span><br></pre></td></tr></table></figure><h5 id="3-环境变量"><a href="#3-环境变量" class="headerlink" title="3.环境变量"></a>3.环境变量</h5><p>JavaScript允许在函数体内部引用当前环境的其他变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面代码中，函数体里面使用了变量X，该变量由运行环境提供。</p><p>现在问题就来了，由于函数可以在不同的运行环境执行，所以需要有一种机制，能够在函数体内部获得当前的运行环境（context）。所以，this就出现了，它的设计目的就是在函数体内部，指代函数当前的运行环境。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，函数体里面的this.x就是指当前运行环境的x。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  f: f,</span><br><span class="line">  x: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单独执行</span></span><br><span class="line">f() <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// obj 环境执行</span></span><br><span class="line">obj.f() <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>上面代码中，函数f在全局环境执行，this.x指向全局环境的x</p><p>在obj环境执行，this.x指向obj.x。</p><p>所以回到开头那个问题，obj.foo()是通过obj找到foo，所以就是在obj环境执行。一旦var foo = obj.foo，变量foo就直接指向函数本身，所以foo()就变成在全局环境执行。</p><p>参考阮一峰老师的文章。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js进阶学习笔记1</title>
      <link href="/2020/07/09/js%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
      <url>/2020/07/09/js%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="1-函数"><a href="#1-函数" class="headerlink" title="1.函数"></a>1.函数</h5><h6 id="1-1函数的3种定义方法"><a href="#1-1函数的3种定义方法" class="headerlink" title="1.1函数的3种定义方法"></a>1.1函数的3种定义方法</h6><p>1.1.1函数声明</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;<span class="comment">//匿名函数</span></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line">()=&gt;&#123;&#125;<span class="comment">//如果&#123;&#125;内容只有一行&#123;&#125;和return关键字可省</span></span><br></pre></td></tr></table></figure><p>1.1.2函数表达式（函数字面量）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">var</span> sum=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">let</span> sum=<span class="function"><span class="params">()</span>=&gt;</span>&#123;&#125;<span class="comment">//如果&#123;&#125;内容只有一行&#123;&#125;和return关键字可省,</span></span><br></pre></td></tr></table></figure><p>1.1.3构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'a'</span>, <span class="string">'b'</span> , <span class="string">'return a + b'</span>)</span><br></pre></td></tr></table></figure><p>1.1.4三种方法的对比：</p><p>函数声明有预解析，而且函数声明的优先级高于变量；使用函数构造函数定义函数的方式是一个函数表达式，这种方式会导致解析两次代码，影响性能。第一次解析常规的JavaScript代码，第二次解析重构构造函数的字符串。</p><a id="more"></a><h6 id="1-2ES5中函数的4种调用"><a href="#1-2ES5中函数的4种调用" class="headerlink" title="1.2ES5中函数的4种调用"></a>1.2<strong>ES5中函数的4种调用</strong></h6><p>在ES5中函数内容的此指向和调用方法有关</p><p>1.2.1函数调用模式</p><p>包括函数名（）和匿名函数调用，此指向窗口</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">//这个属于函数名调用，this指向window</span></span><br><span class="line"> &#125;</span><br><span class="line"> getSum()</span><br><span class="line"> </span><br><span class="line"> (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">//匿名函数调用，this指向window</span></span><br><span class="line"> &#125;)()</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">var</span> getSum=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">//实际上也是函数名调用，window</span></span><br><span class="line"> &#125;</span><br><span class="line"> getSum()</span><br></pre></td></tr></table></figure><p>1.2.2方法调用</p><p>对象.方法名（），此指向对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> objList = &#123;</span><br><span class="line">   name: <span class="string">'methods'</span>,</span><br><span class="line">   getSum: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">//objList对象</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">objList.getSum()</span><br></pre></td></tr></table></figure><p>1.2.3构造器调用</p><p>new构造函数名()，此指向实例化的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//是构造函数调用，指向实例化的对象personOne</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> personOne = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure><p>1.2.4初始化调用</p><p>利用call和apply来实现，this就是call和apply对应的第一个参数，如果不传值或者第一个变量为空，未定义时此指向窗口通过call / apply如果第一个参数是string，number，布尔值，请调用内部会调用其相应的构造器String，Numer，Boolean将其转换为相应的实例对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;   </span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">foo.apply(<span class="string">'我是apply改变的this值'</span>);<span class="comment">//我是apply改变的this值</span></span><br><span class="line">foo.call(<span class="string">'我是call改变的this值'</span>);<span class="comment">//我是call改变的this值</span></span><br></pre></td></tr></table></figure><h6 id="1-3ES6中函数的调用"><a href="#1-3ES6中函数的调用" class="headerlink" title="1.3ES6中函数的调用"></a>1.3ES6中函数的调用</h6><p>箭头函数不可以考虑构造函数使用，也就是不能用新命令实列化一个对象，否则就会引发一个错误箭头函数的                                 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>)<span class="comment">//window</span></span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arrowFun = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)<span class="comment">//window</span></span><br><span class="line">&#125;</span><br><span class="line">arrowFun()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arrowObj = &#123;</span><br><span class="line">  arrFun: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>)<span class="comment">//this指向的是arrowObj对象</span></span><br><span class="line">   &#125;)()</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> arrowObj.arrFun();</span><br></pre></td></tr></table></figure><h6 id="1-4call，apply和bind"><a href="#1-4call，apply和bind" class="headerlink" title="1.4call，apply和bind"></a>1.4call，apply和bind</h6><p>1.IE5之前不支持call和apply，bind是ES5出来的；call和apply可以调用函数，更改此值，实现继承和借用别的对象的方法；</p><p>1.4.1调用和应用定义</p><p>调用方法，用一个对象替换掉另一个对象（this）对象.call(新this对象，实参1，实参2，实参3，……)对象.apply(新this对象,[实参1，实参2，实参3……]);bind除了返回的是函数以外，它的参数和call一样。</p><p>1.4.2致电和申请</p><p>间接调用函数，更改作用域的此值；劫持其他对象的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  name:<span class="string">"张三"</span>,</span><br><span class="line">  logName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar=&#123;</span><br><span class="line">  name:<span class="string">"李四"</span></span><br><span class="line">&#125;;</span><br><span class="line">foo.logName.call(bar);<span class="comment">//李四</span></span><br><span class="line">实质是call改变了foo的<span class="keyword">this</span>指向为bar,并调用该函数</span><br></pre></td></tr></table></figure><p>2.两个函数实现继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name</span>)</span>&#123;   </span><br><span class="line">  <span class="keyword">this</span>.name = name;   </span><br><span class="line">  <span class="keyword">this</span>.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);   </span><br><span class="line">  &#125;   </span><br><span class="line">&#125;   </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>)</span>&#123;  </span><br><span class="line">  Animal.call(<span class="keyword">this</span>, name);  </span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat(<span class="string">"Black Cat"</span>);   </span><br><span class="line">cat.showName(); <span class="comment">//Black Cat</span></span><br></pre></td></tr></table></figure><p>3.为枚举(参数和nodeList)添加多个方法push,pop</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.push.call(<span class="built_in">arguments</span>,<span class="string">'王五'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);<span class="comment">//['张三','李四','王五']</span></span><br><span class="line">&#125;)(<span class="string">'张三'</span>,<span class="string">'李四'</span>)</span><br></pre></td></tr></table></figure><p>4.合并时间表</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; </span><br><span class="line"><span class="keyword">let</span> arr2=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]; </span><br><span class="line"><span class="built_in">Array</span>.prototype.push.apply(arr1,arr2);</span><br></pre></td></tr></table></figure><p>5.求整数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.max.apply(<span class="literal">null</span>,arr)</span><br></pre></td></tr></table></figure><p>6.<strong>判断字符类型</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call(&#123;&#125;)</span><br></pre></td></tr></table></figure><p>1.4.3绑定</p><p>bind是功能的一个函数扩展方法</p><p>bind以后的代码重新绑定了func内部的此指向，返回一个函数，不会调用方法，不兼容IE8</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'李四'</span></span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">   name: <span class="string">"张三"</span>,</span><br><span class="line">   logName: <span class="function"><span class="keyword">function</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>.name, age);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> fooNew = foo.logName;</span><br><span class="line"> <span class="keyword">var</span> fooNewBind =   foo.logName.bind(foo);</span><br><span class="line"> fooNew(<span class="number">10</span>)<span class="comment">//李四,10</span></span><br><span class="line"> fooNewBind(<span class="number">11</span>)<span class="comment">//张三,11  因为bind改变了fooNewBind里面的this指向</span></span><br></pre></td></tr></table></figure><p>1.4.4通话，申请和绑定原生实现</p><p>呼叫实现:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.newCall = <span class="function"><span class="keyword">function</span>(<span class="params">context, ...parameter</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">typeof</span> context === <span class="string">'object'</span> || <span class="keyword">typeof</span> context === <span class="string">'function'</span>) &#123;</span><br><span class="line">    context = context || <span class="built_in">window</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    context = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">&#125;</span><br><span class="line">  context[fn] = <span class="keyword">this</span>  </span><br><span class="line">  <span class="keyword">const</span> res =context[fn](...parameter)</span><br><span class="line">  <span class="keyword">delete</span> context.fn;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  name: <span class="string">'Abiel'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">age,sex</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name, age, sex);</span><br><span class="line">&#125;</span><br><span class="line">sayHi.newCall (person, <span class="number">25</span>, <span class="string">'男'</span>); <span class="comment">// Abiel 25 男</span></span><br></pre></td></tr></table></figure><p>应用实现:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.newApply = <span class="function"><span class="keyword">function</span>(<span class="params">context, parameter</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> context === <span class="string">'object'</span> || <span class="keyword">typeof</span> context === <span class="string">'function'</span>) &#123;</span><br><span class="line">    context = context || <span class="built_in">window</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    context = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> fn = <span class="built_in">Symbol</span>()</span><br><span class="line">  context[fn] = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">const</span> res=context[fn](...parameter);</span><br><span class="line">  <span class="keyword">delete</span> context[fn]</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">let</span> person = &#123;</span><br><span class="line">    name: <span class="string">"Abiel"</span></span><br><span class="line">  &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">age, sex</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name, age, sex);</span><br><span class="line">  &#125;</span><br><span class="line">    sayHi.newApply (person,[ <span class="number">25</span>, <span class="string">'男'</span>]) <span class="comment">//Abiel 25 男</span></span><br></pre></td></tr></table></figure><p>call和apply封装对比区别：实际上核心代码是一样的，只不过call需要对第二个形参解构</p><p>bind实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span> (<span class="params">context,...innerArgs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> me = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...finnalyArgs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> me.call(context,...innerArgs,...finnalyArgs)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  name: <span class="string">'Abiel'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">age,sex</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name, age, sex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> personSayHi = sayHi.bind(person, <span class="number">25</span>)</span><br><span class="line">personSayHi(<span class="string">'男'</span>)</span><br></pre></td></tr></table></figure><p>1.4.5三者异同</p><p>都是改变this指向，都可以接收参数；bind和call是接收离散参数，apply是接收数组。</p><h6 id="1-5函数的节流和防抖"><a href="#1-5函数的节流和防抖" class="headerlink" title="1.5函数的节流和防抖"></a>1.5函数的节流和防抖</h6><p>节流:事件触发后每隔触发触发一次，可触发多次</p><p>防抖：事件触发动作完成后重新触发一次</p><p>1.5.1节流例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// html 部分</span></span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    *&#123;<span class="attr">padding</span>:<span class="number">0</span>;margin:<span class="number">0</span>;&#125;</span><br><span class="line">    .scroll-box&#123;</span><br><span class="line">        width : <span class="number">100</span>%;</span><br><span class="line">        height : <span class="number">500</span>px;</span><br><span class="line">        background:blue;</span><br><span class="line">        overflow : auto;</span><br><span class="line">    &#125;    </span><br><span class="line">    .scroll-item&#123;</span><br><span class="line">        height:<span class="number">1000</span>px;</span><br><span class="line">        width:<span class="number">100</span>%;</span><br><span class="line">    &#125;</span><br><span class="line"> &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">    &lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="scroll-box"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="scroll-item"&gt;&lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>body&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// js 部分</span></span><br><span class="line">    <span class="keyword">let</span> throttle = <span class="function"><span class="keyword">function</span> (<span class="params">func, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">        timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          func.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">          <span class="comment">// 或者直接 func()</span></span><br><span class="line">          timer = <span class="literal">null</span>;</span><br><span class="line">        &#125;, delay);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 处理函数</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">Math</span>.random());</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">// 测试用例</span></span><br><span class="line">    <span class="built_in">document</span>.getElementsByClassName(<span class="string">'scroll-box'</span>)[<span class="number">0</span>].addEventListener(<span class="string">"scroll"</span>, throttle(handle,<span class="number">3000</span>));</span><br></pre></td></tr></table></figure><p>1.5.2防抖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// html 部分同上</span></span><br><span class="line">    <span class="comment">// js 部分</span></span><br><span class="line">    <span class="keyword">let</span> debounce = <span class="function"><span class="keyword">function</span> (<span class="params">fn, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timeout = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (timeout !== <span class="literal">null</span>) clearTimeout(timeout);<span class="comment">//如果多次触发将上次记录延迟清除掉</span></span><br><span class="line">      timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        <span class="comment">// 或者直接 fn()</span></span><br><span class="line">        timeout = <span class="literal">null</span>;</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">// 处理函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.random());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 测试用例</span></span><br><span class="line">  <span class="built_in">document</span>.getElementsByClassName(<span class="string">'scroll-box'</span>)[<span class="number">0</span>].addEventListener(<span class="string">"scroll"</span>, debounce(handle, <span class="number">3000</span>));</span><br></pre></td></tr></table></figure><h6 id="1-6原型链"><a href="#1-6原型链" class="headerlink" title="1.6原型链"></a>1.6原型链</h6><p>1.6.1定义</p><p>对象继承属性的一个链条</p><p>1.6.2构造函数，实例与原型对象的关系</p><p>如图</p><p>原型对象都有一个默认的构造函数属性指向构造函数。</p><p>1.6.3创建实例的方法</p><p>字面量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj=&#123;<span class="string">'name'</span>:<span class="string">'张三'</span>&#125;</span><br></pre></td></tr></table></figure><p>对象构造函数创建</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Obj=<span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">Obj.name=<span class="string">'张三'</span></span><br></pre></td></tr></table></figure><p>使用工厂模式创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"> o.name = name;</span><br><span class="line"> <span class="keyword">return</span> o; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = createPerson(<span class="string">'张三'</span>);</span><br></pre></td></tr></table></figure><p>使用构造函数创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'张三'</span>);</span><br></pre></td></tr></table></figure><p>1.6.4new运算符</p><p>创建一个新对象</p><p>this指向构造函数</p><p>构造函数有返回，会替换new出来的对象，如果没有就是new出来的对象</p><p>手动封装一个new运算符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> new2 = <span class="function"><span class="keyword">function</span> (<span class="params">func</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="built_in">Object</span>.create(func.prototype);<span class="comment">//创建对象</span></span><br><span class="line">    <span class="keyword">var</span> k = func.call(o);<span class="comment">//改变this指向，把结果付给k</span></span><br><span class="line">    <span class="keyword">if</span> (k &amp;&amp; k <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;<span class="comment">//判断k的类型是不是对象</span></span><br><span class="line">        <span class="keyword">return</span> k;&amp;emsp;<span class="comment">//是，返回k</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> o;<span class="comment">//不是返回返回构造函数的执行结果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="1-7继承的方式"><a href="#1-7继承的方式" class="headerlink" title="1.7继承的方式"></a>1.7继承的方式</h6><p>JS是一门弱类型动态语言，封装和继承是他的两大特性</p><p>1.7.1原型链继承</p><p>将父类的实例作为子类的原型。</p><p>代码实现定义父类：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 属性</span></span><br><span class="line">  <span class="keyword">this</span>.name = name || <span class="string">'Animal'</span>;</span><br><span class="line">  <span class="comment">// 实例方法</span></span><br><span class="line">  <span class="keyword">this</span>.sleep = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'正在睡觉！'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型方法</span></span><br><span class="line">Animal.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params">food</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'正在吃：'</span> + food);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>子类：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">&#125;</span><br><span class="line">Cat.prototype = <span class="keyword">new</span> Animal();</span><br><span class="line">Cat.prototype.name = <span class="string">'cat'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&amp;emsp;Test Code</span></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat();</span><br><span class="line"><span class="built_in">console</span>.log(cat.name);<span class="comment">//cat</span></span><br><span class="line"><span class="built_in">console</span>.log(cat.eat(<span class="string">'fish'</span>));<span class="comment">//cat正在吃：fish  undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(cat.sleep());<span class="comment">//cat正在睡觉！ undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Animal); <span class="comment">//true </span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Cat); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>这种方式的优点是容易实现，但是要想为子类添加属性和方法，必须在new 这样的语句之后执行，无法实现多继承。</p><p>1.7.2构造继承</p><p>本质是利用call来改变Cat中的这一指标</p><p>子类：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  Animal.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.name = name || <span class="string">'Tom'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以实现多继承，但是不能继承原型属性和方法</p><p>1.7.3实例继承</p><p>为父类实例添加新特性，作为子类实例返回</p><p>代码实现子类：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> instance = <span class="keyword">new</span> Animal();</span><br><span class="line">  instance.name = name || <span class="string">'Tom'</span>;</span><br><span class="line">  <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不限制调用方式，但不能实现多继承</p><p>1.7.4拷贝继承</p><p>将父类的属性和方法复制到子类中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> instance = <span class="keyword">new</span> Animal();</span><br><span class="line">  instance.name = name || <span class="string">'Tom'</span>;</span><br><span class="line">  <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>支持多继承，效率低占用内存</p><p>1.7.5组合继承</p><p>通过调用父类构造，继承父类的属性并保留传参的优点，通过将父类实例作为之类原型，实现函数替换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  Animal.call(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">this</span>.name = name || <span class="string">'Tom'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Cat.prototype = <span class="keyword">new</span> Animal();</span><br><span class="line">Cat.prototype.constructor = Cat;</span><br></pre></td></tr></table></figure><p>1.7.6寄生组合继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  Animal.call(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">this</span>.name = name || <span class="string">'Tom'</span>;</span><br><span class="line">&#125;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 创建一个没有实例方法的类</span></span><br><span class="line"><span class="keyword">var</span> Super = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">  Super.prototype = Animal.prototype;</span><br><span class="line"><span class="comment">//将实例作为子类的原型</span></span><br><span class="line">  Cat.prototype = <span class="keyword">new</span> Super();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>1.7.7ES6的扩展继承</p><p>ES6继承机制是先创造父类的实例对象this（因此必须先调用super方法）,然后再用子类的构造函数修改this</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="comment">//constructor是构造方法</span></span><br><span class="line"><span class="keyword">constructor</span>(skin, language) &#123;</span><br><span class="line"><span class="keyword">this</span>.skin = skin;</span><br><span class="line"><span class="keyword">this</span>.language = language;</span><br><span class="line">    &#125;</span><br><span class="line">    say() &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'我是父类'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chinese</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(skin, language, positon) &#123;</span><br><span class="line"><span class="comment">//console.log(this);//报错</span></span><br><span class="line"><span class="keyword">super</span>(skin, language);</span><br><span class="line"><span class="comment">//super();相当于父类的构造函数</span></span><br><span class="line"><span class="comment">//console.log(this);调用super后得到了this，不报错，this指向子类，相当于调用了父类.prototype.constructor.call(this)</span></span><br><span class="line"><span class="keyword">this</span>.positon = positon;</span><br><span class="line">    &#125;</span><br><span class="line">    aboutMe() &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.skin&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.language&#125;</span>  <span class="subst">$&#123;<span class="keyword">this</span>.positon&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用只能通过new的方法得到实例,再调用里面的方法</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> Chinese(<span class="string">'红色'</span>, <span class="string">'中文'</span>, <span class="string">'香港'</span>);</span><br><span class="line">obj.aboutMe();</span><br><span class="line">obj.say();</span><br></pre></td></tr></table></figure><h6 id="1-8高阶函数"><a href="#1-8高阶函数" class="headerlink" title="1.8高阶函数"></a>1.8高阶函数</h6><p>1.8.1定义</p><p>函数的参数是函数或返回函数</p><p>1.8.2常见的高阶函数</p><p>地图?减少?筛选器?排序?</p><h5 id="2对象"><a href="#2对象" class="headerlink" title="2对象"></a>2对象</h5><h6 id="2-1对象的声明方法"><a href="#2-1对象的声明方法" class="headerlink" title="2.1对象的声明方法"></a>2.1对象的声明方法</h6><p>2.1.1字面量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test2 = &#123;<span class="attr">x</span>:<span class="number">123</span>,<span class="attr">y</span>:<span class="number">345</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(test2);<span class="comment">//&#123;x:123,y:345&#125;;</span></span><br><span class="line"><span class="built_in">console</span>.log(test2.x);<span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(test2.__proto__.x);<span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(test2.__proto__.x === test2.x);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>2.1.2构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test1 = <span class="keyword">new</span> <span class="built_in">Object</span>(&#123;<span class="attr">x</span>:<span class="number">123</span>,<span class="attr">y</span>:<span class="number">345</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(test1);<span class="comment">//&#123;x:123,y:345&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(test1.x);<span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(test1.__proto__.x);<span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(test1.__proto__.x === test1.x);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>new的作用:创建一个新对象；this指向构造函数；构造函数有返回，会替换new出来的对象，如果没有就是new出来的对象</p><p>2.1.3内置方法</p><p>Object.create(obj,descriptor),obj是对象，描述指定属性（可选）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test = <span class="built_in">Object</span>.create(&#123;<span class="attr">x</span>:<span class="number">123</span>,<span class="attr">y</span>:<span class="number">345</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(test);<span class="comment">//&#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(test.x);<span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(test.__proto__.x);<span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(test.__proto__.x === test.x);</span><br></pre></td></tr></table></figure><p>2.1.4三种方法的优缺点</p><p>1.功能：能够实现对象的声明，并能够赋值和取值</p><p>2.继承性：内置方法创建的对象继承到_proto_属性上</p><p>3.隐藏属性：这种声明方法会替代为内部的每个成员（属性或方法）生成一些隐藏属性，这些隐藏属性是可读取和配置的，属性分类如下：</p><p>属性读取：<strong>Object.getOwnPropertyDescriptor（）</strong>或<strong>getOwnPropertyDescriptor（）</strong></p><p>属性设置：<strong>Object.definePropertype</strong>或<strong>Object.defineProperties</strong></p><p>2.2.2属性定义</p><p>定义：将一个属性的所有特性编码成功一个对象返回；</p><p>正确的属性有：数据属性和访问器属性；使用范围：作为方法Object.definePropertype,Object.getOwnPropertyDescriptor（）,Object.create的第二个参数。</p><p>2.2.3属性定义的预设值</p><p>访问对象存在的属性，通过某种声明方法已存在的属性都是有这些替换的属性。</p><h6 id="2-3深度拷贝"><a href="#2-3深度拷贝" class="headerlink" title="2.3深度拷贝"></a>2.3深度拷贝</h6><p>定义：拷贝源对象的所有可枚举属性</p><h5 id="3-HTTP"><a href="#3-HTTP" class="headerlink" title="3.HTTP"></a>3.HTTP</h5><h6 id="3-1什么是HTTP"><a href="#3-1什么是HTTP" class="headerlink" title="3.1什么是HTTP"></a>3.1什么是HTTP</h6><p>HTTP是一个连接客户端，网关和服务器的一个协议</p><h6 id="3-2特点"><a href="#3-2特点" class="headerlink" title="3.2特点"></a>3.2特点</h6><p>支持客户/服务器模式:可以连接客户端和服务端；</p><p>简单快速：请求立即传送请求方法，路径和请求对象；</p><p>动态:传输数据类型灵活;</p><p>无连接:请求结束立即切换</p><p>无状态：无法记录往上一次请求</p><h6 id="3-3怎么解决无状态连接"><a href="#3-3怎么解决无状态连接" class="headerlink" title="3.3怎么解决无状态连接"></a>3.3怎么解决无状态连接</h6><p>无状态：HTTP协议本身无法解决这个状态，只有通过cookie和session将状态做储存，常见的场景是登录状态保持;</p><p>无连接:可以通过自生的属性keep-Alive</p><h6 id="3-4请求过程HTTP-S-请求地址—-gt-DNS解析—-gt-三次握手—-gt-四次挥手"><a href="#3-4请求过程HTTP-S-请求地址—-gt-DNS解析—-gt-三次握手—-gt-四次挥手" class="headerlink" title="3.4请求过程HTTP(S)请求地址—&gt;DNS解析—&gt;三次握手—&gt;四次挥手"></a>3.4请求过程HTTP(S)请求地址—&gt;DNS解析—&gt;三次握手—&gt;四次挥手</h6>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础知识整理</title>
      <link href="/2020/07/07/JavaScript%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2020/07/07/JavaScript%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="1、数据类型"><a href="#1、数据类型" class="headerlink" title="1、数据类型"></a>1、数据类型</h5><p>基本数据类型：number（数值型）、string（字符串）、Boolean（布尔类型）、null（空型）、undefined（未定义型）</p><p>引用数据类型：array（数组类型）、object（对象类型）、function（函数类型）</p><p>Symbol:es6新引入数据类型，表示独一无二的值；</p><a id="more"></a><h5 id="2、运算符"><a href="#2、运算符" class="headerlink" title="2、运算符"></a>2、运算符</h5><p>==（判断是否相等，但是在比较前存在隐式数据类型转换）</p><p>===（全等符号，比较数据类型和数据值）</p><h5 id="3-对象"><a href="#3-对象" class="headerlink" title="3.对象"></a>3.对象</h5><p>3.1对象的本质：属性和方法的集合</p><p>3.2声明对象的方式：</p><p>3.2.1.字面量</p><p>var obj = ｛</p><p>}</p><p>3.2.2.构造函数，new Object()的方式。</p><p>3.3遍历对象</p><p>for(var key in obj){</p><p>}</p><p>如果确切知道属性名叫什么可以直接对象+.的方式，如果属性名存在一个变量里，用中括号。</p><p>3.4类与对象的关系</p><p>定义:类，把一系列结构相同，内容相似的对象做一个抽象；</p><p>​        对象，基于类实例化，是一个具体存在的属性和方法的集合。</p><p><strong>类是对象的抽象，对象是类的实例</strong>！！！！！</p><p>但是在ES6之前是没有类的概念，利用构造函数可以充当类的概念。</p><p>3.5原型</p><p>原型是函数的伴生体</p><p>我们创建的每个函数都有一个prototype(原型)属性，这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法<br>prototype（原型）属性指向的对象就是原型对象<br>js中万物皆对象，因此原型也是对象，可以通过原型实现对象属性的继承。</p><p>几个必记的属性和方法</p><p><strong>constructor</strong>  prototype里面的constructor指向当前对象的构造函数<code>__proto__</code>  === [<strong>[prototype]</strong>]  指向类的prototype</p><p><strong>prototype</strong>   指向当前对象的原型对象</p><p><strong>instanceof</strong>   运算符，判断当前对象是否是另一个对象的实例<strong>hasOwnProperty</strong> 判断对象上是否存在某个属性，并且这个方法会过滤到原型上的属性</p><p><strong>isPrototypeOf</strong>   检查一个对象是否存在于另一个对象的原型链上。</p><p>3.6ES6语法糖</p><p>语法糖，又译糖衣语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constructor</span>(name)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.name = name</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">say()&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-并发模型与事件循环"><a href="#4-并发模型与事件循环" class="headerlink" title="4.并发模型与事件循环"></a>4.并发模型与事件循环</h5><p>4.1栈</p><p>函数调用形成了一个由若干帧组成的栈。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">return</span> a + b + <span class="number">11</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> y = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">return</span> foo(x * y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bar(<span class="number">7</span>)); <span class="comment">// 返回 42</span></span><br></pre></td></tr></table></figure><p>当调用 <code>bar</code> 时，第一个包含了 <code>bar</code> 的参数和局部变量。 当 <code>bar</code> 调用 <code>foo</code> 时，第二个帧被创建并被压入栈中，放在第一个帧之上，帧中包含 <code>foo</code> 的参数和局部变量。当 <code>foo</code> 执行完毕然后返回时，第二个帧就被弹出栈（剩下 <code>bar</code> 函数的调用帧 ）。当 <code>bar</code> 也执行完毕然后返回时，第一个帧也被弹出，栈就被清空了。</p><p>4.2堆</p><p>对象被分配在堆中，堆是一个用来表示一大块（通常是非结构化的）内存区域的计算机术语</p><p>4.3队列</p><p>一个 JavaScript 运行时包含了一个待处理消息的消息队列。每一个消息都关联着一个用以处理这个消息的回调函数。</p><p>在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop#事件循环" target="_blank" rel="noopener">事件循环</a> 期间的某个时刻，运行时会从最先进入队列的消息开始处理队列中的消息。被处理的消息会被移出队列，并作为输入参数来调用与之关联的函数。正如前面所提到的，调用一个函数总是会为其创造一个新的栈帧。</p><p>函数的处理会一直进行到执行栈再次为空为止；然后事件循环将会处理队列中的下一个消息（如果还有的话）。</p><p>4.4事件循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (queue.waitForMessage()) &#123;</span><br><span class="line">  queue.processNextMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事件经常是按照类似的方式来被实现。<code>queue.waitForMessage()</code> 会同步地等待消息到达(如果当前没有任何消息等待被处理)。</p><p>4.4.1执行至完成</p><p>每一个消息完整地执行后，其它消息才会被执行。这为程序的分析提供了一些优秀的特性，包括：当一个函数执行时，它不会被抢占，只有在它运行完毕之后才会去运行任何其他的代码，才能修改这个函数操作的数据。这与C语言不同，例如，如果函数在线程中运行，它可能在任何位置被终止，然后在另一个线程中运行其他代码。</p><p>4.4.2添加消息</p><p>在浏览器里，每当一个事件发生并且有一个事件监听器绑定在该事件上时，一个消息就会被添加进消息队列。如果没有事件监听器，这个事件将会丢失。所以当一个带有点击事件处理器的元素被点击时，就会像其他事件一样产生一个类似的消息。</p><p>函数 <code>setTimeout</code> 接受两个参数：待加入队列的消息和一个时间值（可选，默认为 0）。这个时间值代表了消息被实际加入到队列的最小延迟时间。如果队列中没有其它消息并且栈为空，在这段延迟时间过去之后，消息会被马上处理。但是，如果有其它消息，<code>setTimeout</code> 消息必须等待其它消息处理完。因此第二个参数仅仅表示最少延迟时间，而非确切的等待时间。</p><h5 id="5-永不阻塞"><a href="#5-永不阻塞" class="headerlink" title="5.永不阻塞"></a>5.永不阻塞</h5><p>JavaScript的事件循环模型与许多其他语言不同的一个非常有趣的特性是，它永不阻塞。 处理 I/O 通常通过事件和回调来执行，所以当一个应用正等待一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API" target="_blank" rel="noopener">IndexedDB</a> 查询返回或者一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">XHR</a> 请求返回时，它仍然可以处理其它事情，比如用户输入。</p><p>由于历史原因有一些例外，如 <code>alert</code> 或者同步 XHR，但应该尽量避免使用它们。注意，<a href="https://stackoverflow.com/questions/2734025/is-javascript-guaranteed-to-be-single-threaded/2734311#2734311" target="_blank" rel="noopener">例外的例外也是存在的</a>（但通常是实现错误而非其它原因）。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS数组操作的一些技巧</title>
      <link href="/2020/07/06/JS%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7/"/>
      <url>/2020/07/06/JS%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-扁平化n维数组"><a href="#1-扁平化n维数组" class="headerlink" title="1.扁平化n维数组"></a>1.扁平化n维数组</h4><p>Array.flat(n)扁平数组api</p><p>a)、n表示数组嵌套的深度，如果数组嵌套两层，n取值大于或者等于1都可以，n值为Infinity时维度为无限大。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>]].flat(<span class="number">1</span>) <span class="comment">//[1,2,3]</span></span><br><span class="line">[<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>]].flat(<span class="number">1</span>) <span class="comment">//[1,2,3,4,5]</span></span><br><span class="line">[<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>]]].toString()  <span class="comment">//'1,2,3,4,5'</span></span><br><span class="line">[<span class="number">1</span>[<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>[...]].flat(<span class="literal">Infinity</span>) <span class="comment">//[1,2,3,4...n]</span></span><br></pre></td></tr></table></figure><p>b)、利用递归和数组合并方法concat实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr</span>) </span>&#123;  </span><br><span class="line"><span class="keyword">while</span>(arr.some(<span class="function"><span class="params">item</span>=&gt;</span><span class="built_in">Array</span>.isArray(item))) &#123;</span><br><span class="line">arr = [].concat(...arr);</span><br><span class="line">&#125;   <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line">flatten([<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>]]) <span class="comment">//[1,2,3]</span></span><br><span class="line">flatten([<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>]]) <span class="comment">//[1,2,3,4,5]</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="2-去重"><a href="#2-去重" class="headerlink" title="2.去重"></a>2.去重</h4><p>a)、set是ES6新出来的一种定义不重复数组的数据类型（Array.from()是将类数组转化为数组）…是扩展运算符，将set里面的值转化为字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>])) <span class="comment">//[1,2,3,4]</span></span><br><span class="line">[...new <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>])] <span class="comment">//[1,2,3,4]</span></span><br></pre></td></tr></table></figure><p>b)、取新数组存值，循环比较两个数组的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.distinct = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">this</span>,</span><br><span class="line">result = [],</span><br><span class="line">i,</span><br><span class="line">j,</span><br><span class="line">len = arr.length;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j = i + <span class="number">1</span>; j &lt; len; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i] === arr[j])&#123;</span><br><span class="line">j = ++i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">result.push(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>].distinct(); <span class="comment">//[1,2,3,4]</span></span><br></pre></td></tr></table></figure><h4 id="3-排序"><a href="#3-排序" class="headerlink" title="3.排序"></a>3.排序</h4><p>a)、sort是js内置的排序方法，默认升序。</p><p>b)、选择排序，冒泡排序等方法。</p><h4 id="4-最大值"><a href="#4-最大值" class="headerlink" title="4.最大值"></a>4.最大值</h4><p>​    a）、Math.max()是Math对象内置的方法</p><p>​    b）、先排序再取值</p><h4 id="5-求和"><a href="#5-求和" class="headerlink" title="5.求和"></a>5.求和</h4><p>​    a)、</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].join(<span class="string">'+'</span>)] <span class="comment">//10</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].arr.reduce(<span class="function">(<span class="params">prev, cur</span>) =&gt;</span>prev + cur) <span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>reduce是ES5的数组api,参数有函数和默认初始值;<br>函数有四个参数,pre(上一次的返回值),cur(当前值),curIndex(当前值索引),arr(当前数组)</p><p>​    b)、利用slice截取改变数组，再利用递归求和。</p><h4 id="6-合并"><a href="#6-合并" class="headerlink" title="6.合并"></a>6.合并</h4><p>​    a）、</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].concat([<span class="number">5</span>,<span class="number">6</span>]) <span class="comment">//[1,2,3,4,5,6]</span></span><br><span class="line">[...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],...[<span class="number">4</span>,<span class="number">5</span>]] <span class="comment">//[1,2,3,4,5,6]</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].push.apply([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>]) <span class="comment">//[1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure><p>​    b）、</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">[<span class="number">5</span>,<span class="number">6</span>].map(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">arr.push(item)&#125;) <span class="comment">//arr值为[1,2,3,4,5,6],注意不能直接return出来,return后只会返回[5,6]</span></span><br></pre></td></tr></table></figure><h3 id="7-判断是否包含值"><a href="#7-判断是否包含值" class="headerlink" title="7.判断是否包含值"></a><strong>7.判断是否包含值</strong></h3><p>a)、include(),find(),findIndex()是ES6的api</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].includes(<span class="number">4</span>) <span class="comment">//false</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].indexOf(<span class="number">4</span>) <span class="comment">//-1 如果存在换回索引</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].find(<span class="function">(<span class="params">item</span>)=&gt;</span>item===<span class="number">3</span>)) <span class="comment">//3 如果数组中无值返回undefined</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].findIndex(<span class="function">(<span class="params">item</span>)=&gt;</span>item===<span class="number">3</span>)) <span class="comment">//2 如果数组中无值返回-1</span></span><br></pre></td></tr></table></figure><h3 id="8-类数组转化"><a href="#8-类数组转化" class="headerlink" title="8.类数组转化"></a><strong>8.类数组转化</strong></h3><p>a)、类数组:表示有length属性,但是不具备数组的方法。call,apply:是改变slice里面的this指向arguments,所以arguments也可调用数组的方法<br>Array.from是将类似数组或可迭代对象创建为数组<br>…是将类数组扩展为字符串,再定义为数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>) <span class="comment">//arguments是类数组(伪数组)</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.slice.apply(<span class="built_in">arguments</span>)</span><br><span class="line"><span class="built_in">Array</span>.from(<span class="built_in">arguments</span>)</span><br><span class="line">[...arguments]</span><br></pre></td></tr></table></figure><h3 id="9-每一项设置值"><a href="#9-每一项设置值" class="headerlink" title="9.每一项设置值"></a><strong>9.每一项设置值</strong></h3><p>fill(),ES6的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].fill(<span class="literal">false</span>) <span class="comment">//[false,false,false]  fill填充对象会报错</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="params">()</span> =&gt;</span> <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="10-每一项是否满足"><a href="#10-每一项是否满足" class="headerlink" title="10.每一项是否满足"></a><strong>10.每一项是否满足</strong></h3><p>a)、every是ES5的api,每一项满足返回 true</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].every(<span class="function"><span class="params">item</span>=&gt;</span>&#123;<span class="keyword">return</span> item&gt;<span class="number">2</span>&#125;) <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h3 id="11-有一项满足"><a href="#11-有一项满足" class="headerlink" title="11.有一项满足"></a><strong>11.有一项满足</strong></h3><p>a)、some是ES5的api,有一项满足返回 true</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].some(<span class="function"><span class="params">item</span>=&gt;</span>&#123;<span class="keyword">return</span> item&gt;<span class="number">2</span>&#125;) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="12-过滤数组"><a href="#12-过滤数组" class="headerlink" title="12.过滤数组"></a><strong>12.过滤数组</strong></h3><p>a)、<strong>filter</strong>是ES5的api,返回满足添加的项的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].filter(<span class="function"><span class="params">item</span>=&gt;</span>&#123;<span class="keyword">return</span> item&gt;<span class="number">2</span>&#125;) <span class="comment">//[3]</span></span><br></pre></td></tr></table></figure><h3 id="13-对象和数组转化"><a href="#13-对象和数组转化" class="headerlink" title="13.对象和数组转化"></a>13.<strong>对象和数组转化</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.keys(&#123;<span class="attr">name</span>:<span class="string">'张三'</span>,<span class="attr">age</span>:<span class="number">14</span>&#125;)<span class="comment">//['name','age']</span></span><br><span class="line"><span class="built_in">Object</span>.values(&#123;<span class="attr">name</span>:<span class="string">'张三'</span>,<span class="attr">age</span>:<span class="number">14</span>&#125;) <span class="comment">//['张三',14]</span></span><br><span class="line"><span class="built_in">Object</span>.entries(&#123;<span class="attr">name</span>:<span class="string">'张三'</span>,<span class="attr">age</span>:<span class="number">14</span>&#125;) <span class="comment">//[[name,'张三'],[age,14]]</span></span><br><span class="line"><span class="built_in">Object</span>.fromEntries([name,<span class="string">'张三'</span>],[age,<span class="number">14</span>]) <span class="comment">//ES10的api,Chrome不支持,firebox输出&#123;name:'张三',age:14&#125;</span></span><br></pre></td></tr></table></figure><p>注：其中a)表示的是较为简单的方法</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cookie</title>
      <link href="/2020/07/04/cookie/"/>
      <url>/2020/07/04/cookie/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​    1.Cookie</p><p>​        1）完成回话跟踪的一种机制：采用的是在客户端保存Http状态信息的方案</p><p>​        2）cookie是在浏览器访问WEB服务器的某个资源时，由WEB服务器在HTTP响应消息头附带传送给浏览器的一个小文本文件。</p><p>​        3）一旦WEB浏览器保存了某个cookie，那么它在以后每次访问该WEB服务器时，都会在HTTP请求头中将这个cookie回传给WEB服务器。</p><p>​        4）底层原理：WEB服务器通过找HTTP响应消息中增加Set-Cookie响应头字段将Cookie信息发送给浏览器，浏览器则通过在HTTP请求消息总增加Cookie回传给WEB服务器。</p><a id="more"></a><p>​    2.Cookie相关API：</p><p>​        向客户端浏览器写入Cookie        </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建一个Cookie对象</span></span><br><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie（name，<span class="string">"tom"</span>）；</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.setMaxAge：设置Cookie的最大时效，以秒为单位，若为0，表示立即删除该Cookie，</span></span><br><span class="line"><span class="comment">//若为负数，表示不存储该Cookie，若为正数，表示该Cookie的存储时间。</span></span><br><span class="line">cookie.setMaxAge(<span class="string">"30"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.设置Cookie的作用范围：可以作用当前目录和当前目录的子目录，但不能作用于当前目录的上一级目录。</span></span><br><span class="line">cookie.setPath(request.getContextPath());</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4.调用response的一个方法把Cookie传给客户端</span></span><br><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.获取Cookie</span></span><br><span class="line">Cookie[] cookies = request.getCookies();</span><br><span class="line"><span class="keyword">if</span>(cookies != <span class="literal">null</span>&amp;&amp; cookies.lenth &gt; <span class="number">0</span>)&#123;</span><br><span class="line">  <span class="keyword">for</span>()&#123;</span><br><span class="line">   <span class="comment">//2.获取Cookiede name 和value</span></span><br><span class="line">   out.print(cookie.getName() + <span class="string">":"</span> + cookie.getValue());</span><br><span class="line">   out.print(<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充：</p><p>​        a）、secure：该属性译为安全，http不仅是无状态的，还是不安全的协议，容易被劫持，当设置这个属性的值为true时，此cookie只会在https和ssl等安全协议下传输，但是这个属性不能对客户端的cookie进行加密，不能保证绝对的安全性。</p><p>​        b）、HttpOnly：如果设置该属性的值为true时，就不能通过js脚本来获取cookie的值，能够有效的防止xss攻击。</p><p>​        c）、服务端是通过setCookie来设置cookie的，注意点，要设置多个cookie时，得多写几个setCookie。发送请求过程中也可以携带cookie过服务端。</p><p>​        d）、Cookie的组成：name,value,path,domain,secure,expires。</p><p>​                <strong>domain</strong>：获得或设置与cookie有关的域名，可用于限制特定区域的cookie访问。默认设置为创建网页所在的服务器主机名。这个域的服务器都可以使用这个cookie。</p><p>​                <strong>Expires</strong>：获得或设置过期时间，你可以将其设置为一个过去的日期以自动终止或删除cookie。</p><p>​                <strong>max-age</strong>：cookie的生命周期。</p><p>​                <strong>path</strong>：获得或设置cookie的虚拟路径，这一属性允许你限制cookie的范围，也就是说，访问cookie只能限制一个特定的文件夹或者路径访问.一般一个站点中的每个页面都能获得该站点所有的cookie，如果要限制的话，使用path。domain属性设置cookies的域范围。</p><p>3.会话Cookie和持久Cookie</p><p>​     1)如果不设置过期时间，则表示这个Cookie的生命周期为浏览器会话期间，只要不关闭浏览器的窗口，Cookie就不会消失。这种生命期为浏览器会话期的话Cookie被称为会话Cookie。会话Cookie一般不保存在硬盘上，而是保存在内存中。</p><p>​    2）如果设置了过期时间，浏览器就会把Cookie保存在硬盘上，关闭后再次打开浏览器，这些Cookie依然有效直到超过设定的过期时间。</p><p>4.其他Cookie操作：</p><p>​    1 .修改cookie:定义一个重名cookie进行覆盖<br>     2 .删除cookie:给他的expires设置一个过期时间。<br>     3 .同一个域中cookie的数量不能超过20个，整个cookie的大小不能超过4kb.<br>     4 .即使在实现连续的连接，当用户在一段时间内没有提交请求的时候，连接也会自动关闭的，作为web服务器，必须使用一种机制来标识唯一的用户，同时记录该用户的状态。<br>     5 .浏览器总的可以存储300个cookie,每个站点最多存放20个，每个大小为4kb<br>     6 .为什么一个站点需要给一个网站发送多个cookie呢？<br>     7 .web服务器通过在http响应中增加set-cookie响应头将cookie信息发送给浏览器，浏览器则是在通过http请求增加cookie请求头字段将cookie回传给web服务器。<br>​     8 .SameSite:用于定义cookie如何开始执行<br>     9 .strict:启用最严格的防护，有能力阻止所有csrf攻击。所有发生的跨域请求都会被组织<br>     10 .Lax:只会在使用危险http方法发送跨域cookie的时候进行阻止，比如post方法<br>     11 .不要讲所有的cookei都设置sameSite属性，不同的cookie有不同的用途，会话cookie设置为Lax，其他可以设置为strict属性。</p><p>5.应用场景：自动登陆，显示浏览记录、购物车等。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深拷贝与浅拷贝</title>
      <link href="/2020/07/04/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
      <url>/2020/07/04/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>区别：假设B是复制的A的，如果修改A，B也变化说明是浅拷贝，如果B没变化，那就是深拷贝。</p><p>例子：</p><p>​    1.浅拷贝例子：</p><p>​        </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line"></span><br><span class="line"> b=a;</span><br><span class="line"> a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"> <span class="built_in">console</span>.log(a,b);</span><br></pre></td></tr></table></figure><p>​    在控制台我们看到的输出结果是，b数组与a数组的结果是相等的。那么原因是什么呢？首先我们要先引入基本数据类型与引用数据类型的概念。基本数据类型有：number，string，boolean，null，undefiened五类，（es6中新引入symbol）。引用数据类型（Object类）有常规名值对的无序对象｛a:1｝，数组[1,2,3,4],以及函数。这两种数据存储的方式是这样的：</p><p>a、基本类型，名值储存在栈内存中，所以当被复制时，在栈内存中会新开辟一个内存，所以修改被复制的值时对后者不会造成影响。当然let a=1，b=a；虽然b不受a影响，但是这也算不上深拷贝，因为深拷贝本身只针对较为复杂的object类型数据。</p><p>b、引用数据类型——名存在栈内存中，值存在于堆内存中，但是栈内存会提供一个引用的地址指向堆内存中的值；例如a，b两个数组，当b=a进行拷贝时，其实复制的是a的引用地址，而并非堆里的值，所以在修改a数组中的值时，b也会受影响。假如在堆内存中也开辟一个新的内存专门为b存放值，就像基本类型那样，起步就达到深拷贝的效果了。</p><a id="more"></a><p>​    <strong>如何去实现一个深拷贝呢</strong></p><p>​        1.递归去复制所有层级的属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> objClone = <span class="built_in">Array</span>.isArray(obj)?[]:&#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span>(obj &amp;&amp; <span class="keyword">typeof</span> obj===<span class="string">"object"</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">            <span class="keyword">if</span>(obj.hasOwnProperty(key))&#123;</span><br><span class="line">                <span class="comment">//判断ojb子元素是否为对象，如果是，递归复制</span></span><br><span class="line">                <span class="keyword">if</span>(obj[key]&amp;&amp;<span class="keyword">typeof</span> obj[key] ===<span class="string">"object"</span>)&#123;</span><br><span class="line">                    objClone[key] = deepClone(obj[key]);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//如果不是，简单复制</span></span><br><span class="line">                    objClone[key] = obj[key];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> objClone;</span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">let</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">    b=deepClone(a);</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a,b);</span><br></pre></td></tr></table></figure><p>​    附带说明：slice()方法（从已有的数组是显示选取的元素,返回一个数组）与concat()方法（连接两个或多个数组，并返回该数组副本）等方法，虽然这些方法能够实现数组的拷贝，并且改变前者的值不会影响后者，但是并不是深拷贝，深拷贝是拷贝对象各个层级的属性。</p><p>​    例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="number">0</span>,<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>],<span class="number">4</span>],</span><br><span class="line">        b=a.slice();</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">a[<span class="number">2</span>][<span class="number">0</span>]=<span class="number">1</span>JS</span><br><span class="line"><span class="built_in">console</span>.log(a,b);</span><br></pre></td></tr></table></figure><p>​    根据控制的结果显示，b数组对象的一级属性确实是不受影响的，但是二级属性依然能够被改变，并没有成功深拷贝。第一层的属性确实深拷贝，拥有了独立的内存，但更深的属性却仍然公用了地址，所以才会造成上面的问题。</p><p>2.利用<strong>JSON对象</strong>的<strong>parse</strong>和<strong>stringify</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> _obj = <span class="built_in">JSON</span>.stringify(obj),</span><br><span class="line">        objClone = <span class="built_in">JSON</span>.parse(_obj);</span><br><span class="line">    <span class="keyword">return</span> objClone</span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">let</span> a=[<span class="number">0</span>,<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>],<span class="number">4</span>],</span><br><span class="line">    b=deepClone(a);</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">a[<span class="number">2</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a,b);</span><br></pre></td></tr></table></figure><p>​    附带说明，JSON.stringify与JSON.parse除了实现深拷贝，还能结合<strong>localStorage实现对象数组存储</strong>。</p><p>3.利用JQ的extend方法</p><p>​    <strong>.extend( [deep ], target, object1 [, objectN ] )</strong></p><p><strong>deep</strong>表示是否深拷贝，为true为深拷贝，为false，则为浅拷贝</p><p><strong>target</strong> <strong>Object</strong>类型 目标对象，其他对象的成员属性将被附加到该对象上。</p><p><strong>object1 objectN</strong>可选。 Object类型 第一个以及第N个被合并的对象。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="number">0</span>,<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>],<span class="number">4</span>],</span><br><span class="line">    b=$.extend(<span class="literal">true</span>,[],a);</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">a[<span class="number">2</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a,b);</span><br></pre></td></tr></table></figure><p>可以看到，效果与上面方法一样，只是需要依赖JQ库。</p><p>​    了解深拷贝与浅拷贝的大致原理与区别，那么在实际的开发中如何去运用呢？比如在前端渲染页面，需要从后台后台获取数据，在拿到这些数据我们并不知道各个功能需要怎么去使用，如果在前面直接修改了，同一个页面需要再一次用到原始数据就会出现问题，所以深拷贝的作用就体现出来了。</p><p>​    参考文章链接：</p><p>​    <a href="https://blog.csdn.net/weixin_41910848/article/details/82144671" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41910848/article/details/82144671</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flex弹性布局详细知识点整理</title>
      <link href="/2020/06/28/flex%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80%E8%AF%A6%E7%BB%86%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/"/>
      <url>/2020/06/28/flex%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80%E8%AF%A6%E7%BB%86%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 align="center">弹性盒布局（flexbox）</h3><hr><h4 id="一、弹性盒布局介绍"><a href="#一、弹性盒布局介绍" class="headerlink" title="一、弹性盒布局介绍"></a>一、弹性盒布局介绍</h4><p>1)弹性盒也叫伸缩布局盒模型  </p><p>它是<strong><span>css3</span></strong>引入的一种新的布局模式——<strong><span>flexbox</span></strong>布局，即伸缩布局盒模型，用来提供一个更有效的方式制定、调整和分布一个容器里的项目布局。相比之前的布局方式，更便利于开发。</p><p>2)主要思想是让容器有能力让其子项目能够改变其宽度、高度（甚至顺序），以最佳的方式填充可用空间（主要是为了适应所有类型的显示设备和屏幕大小）。flex容器会使子项目扩展来填充可用空间，或缩小他们以防止溢出容器。</p><p>3)专业术语解释</p><p>a、主轴-水平方向或者X轴</p><p>b、侧轴-垂直方向或者Y轴</p><p>c、伸缩容器（父元素）和伸缩项目（子元素）</p><a id="more"></a><h4 id="二、弹性盒属性"><a href="#二、弹性盒属性" class="headerlink" title="二、弹性盒属性"></a>二、弹性盒属性</h4><p>1)伸缩流方向 flex-direction 主要用来创建主轴，定义伸缩项目在伸缩容器中的方向</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">row</span>：从左向右</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">row-reverse</span>：与<span class="selector-tag">row</span>相反</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">column</span>：从上到下</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">column-reverse</span>：与<span class="selector-tag">column</span>相反</span><br></pre></td></tr></table></figure><p>2)主轴对齐 justify-content 主要用来定义伸缩项目沿主轴线的对齐方式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">flex-start</span>：伸缩项目向一行的起始位置靠齐</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">flex-end</span>：伸缩项目向一行的结束位置靠齐</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">center</span>：伸缩项目向一行的中间位置靠齐</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">space-between</span>：伸缩项目会平均的分布在行里</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">space-around</span>：伸缩项目会平均的分布在行里，两端保留一半的空间</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">space-evenly</span>：项目均匀分布，所有项目之间及项目与边框之间距离相等</span><br></pre></td></tr></table></figure><p>3)侧轴对齐 align-items 伸缩项目行在侧轴上的对齐方式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">flex-start</span>：伸缩项目在侧轴起点边的外边距 紧靠住 该行在侧轴起始边</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">flex-end</span>：伸缩项目在侧轴终点边的外边距 紧靠住 该行在侧轴终点边</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">center</span>：伸缩项目的外边距盒 在该行的侧轴上居中放置</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">baseline</span>：伸缩项目根据伸缩项目的基线对齐</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">stretch</span>：伸缩项目拉伸填充整个伸缩容器</span><br></pre></td></tr></table></figure><p>4)换行 flex-wrap</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nowrap</span> 不换行 默认值，不管超出还是不超出都不会换行</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">wrap</span> 换行 一旦伸缩项目超出伸缩容器，那么就会换行</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">wrap-reverse</span> 换行反向  主轴水平时，上下反向，主轴垂直时，左右反向</span><br></pre></td></tr></table></figure><p>5)伸缩流方向属性与换行属性缩写形式 flex-flow </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">flex-flow</span>：换行 伸缩方向; 两个值同时定义或者单独定义都生效，不分先后顺序</span><br></pre></td></tr></table></figure><p>6)align-self（加在子元素上）：主要用来设置单独伸缩项目在侧轴的对齐方式。注意点：align-self可以覆盖align-items</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">flex-start</span>：伸缩项目在侧轴起点边的外边距 紧靠住 该行在侧轴起始边；（元素位于容器的开头）</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">flex-end</span>：伸缩项目在侧轴终点边的外边距 紧靠住 该行在侧轴终点边；（元素位于容器的结尾）</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">center</span>：伸缩项目的外边距盒 在该行的侧轴上居中放置；（元素位于容器的中间）</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">stretch</span>：伸缩项目拉伸填充整个伸缩容器。（元素被拉伸以适应容器）</span><br></pre></td></tr></table></figure><p>7)堆栈伸缩行 align-content(行与行之间的对齐方式) 定义多个伸缩行的对齐方式；  往往要与换行同时应用，没有换行就不存在多行的情况</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">flex-start</span>：各行向伸缩容器的起点位置堆叠；（没有行距）</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">flex-end</span>：各行向伸缩容器的结束位置堆叠；（底部对其没有行距）</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">center</span>：各行向伸缩容器的中间位置堆叠；（居中没有行距）</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">space-between</span>：各行在伸缩容器中平均分布；（两端对齐，中间自动分配）</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">space-around</span>：各行在伸缩容器中平均分布，两端保留一半的空间；（自动分配距离）</span><br></pre></td></tr></table></figure><p>8)显示顺序 order （加在子元素上）默认状态是按照标准流的顺序排列，在<span>flexbox</span>模型里，可以通过order改变伸缩项目的顺序</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>、不定义<span class="selector-tag">order</span>的伸缩项目会排到前面</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">b</span>、<span class="selector-tag">order</span>：1； 排第一   <span class="selector-tag">order</span>：2； 排第二</span><br></pre></td></tr></table></figure><p>9)flex（设置在子元素上） 作用：可以让元素自动占用容器的可用空间，等比划分</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">flex</span><span class="selector-pseudo">:1</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">flex</span><span class="selector-pseudo">:2</span>;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>10)flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</span><br></pre></td></tr></table></figure><p>11)flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。</span><br><span class="line">负值对该属性无效。</span><br></pre></td></tr></table></figure><p>12)flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</span><br><span class="line"></span><br><span class="line">它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。不常用，还在不断变化中。</span><br></pre></td></tr></table></figure><p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -css3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html和css的一些方法-杂记4</title>
      <link href="/2020/06/22/%E6%97%A5%E5%B8%B8%E7%AC%94%E8%AE%B0-%E6%9D%82%E8%AE%B04/"/>
      <url>/2020/06/22/%E6%97%A5%E5%B8%B8%E7%AC%94%E8%AE%B0-%E6%9D%82%E8%AE%B04/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-透明的三种方式："><a href="#1-透明的三种方式：" class="headerlink" title="1.透明的三种方式："></a>1.透明的三种方式：</h4><p>​    1.display:none;</p><p>​    2.visibility:hidden;</p><p>​    3.opacity:0;</p><h4 id="2-清除浮动的方法"><a href="#2-清除浮动的方法" class="headerlink" title="2.清除浮动的方法:"></a>2.清除浮动的方法:</h4><p>​    1.额外标签法:在需要清除浮动的标签后面额外添加一个空白标签，并添加属性clear:both;</p><p>​    2.给父级添加overflow属性，触发BFC的方式，实现清除浮动效果，但是当内容增多时，不会导致自动换行</p><p>​    3.使用after伪元素清除浮动,IE6-7不支持,使用zoom:1,触发hasLayout;</p><p>​        .clearfix::after{</p><p>​            content:””;</p><p>​            display:block;</p><p>​            height:0;</p><p>​            clear:both;</p><p>​            visibility:hidden;</p><p>​        }</p><p>​        .clearfix{</p><p>​        zoom:1;</p><p>}    </p><p>​    注意是给需要清除浮动元素的父亲添加.clearfix;</p><p>​    4.</p><a id="more"></a><h4 id="3-表格的高级属性"><a href="#3-表格的高级属性" class="headerlink" title="3.表格的高级属性:"></a>3.表格的高级属性:</h4><p>​    1.<caption>表格的标题</caption></p><p>​    2.<th>表格表头的标题</th></p><p>​    3.<thead>表头</thead>、<tbody>表体</tbody>、<tfoot>表尾</tfoot></p><p>​    4.rules:表格添加分组线，属性值:”all””cols””rows””groups”</p><p>​    5.数据列分组:<colgroup span="value"></colgroup>,将表格分组</p><p>​    6.border-spacing:单元格与单元格之间的距离(css属性)</p><p>​    7.合并表格边框:border-collapse:collapse(css属性)</p><p>​    8.表格固定:table-layout:fixed(css属性)</p><p>​    9.无内容时表格的行为:visibility:hiddeng</p><h4 id="4-两种盒子模型"><a href="#4-两种盒子模型" class="headerlink" title="4.两种盒子模型"></a>4.两种盒子模型</h4><p>​    1.标准盒模型：border-box</p><p>​    2.怪异盒模型:content-box</p><h4 id="5-给文本与盒子添加阴影"><a href="#5-给文本与盒子添加阴影" class="headerlink" title="5.给文本与盒子添加阴影"></a>5.给文本与盒子添加阴影</h4><p>​    text-shadow:h-shadow v-shadow blur color;</p><p>​    box-shadow:向框添加一个或多个阴影。</p><h4 id="6-溢出文字用省略号显示"><a href="#6-溢出文字用省略号显示" class="headerlink" title="6.溢出文字用省略号显示"></a>6.溢出文字用省略号显示</h4><p>​    white-space:nowrap; 强制不换行，除了文本结束或者有换行标签</p><p>​    overflow:hidden;</p><p>​    text-overflow:ellipsis;</p><h4 id="7-粘性定位："><a href="#7-粘性定位：" class="headerlink" title="7.粘性定位："></a>7.粘性定位：</h4><p>​    position:sticky;</p><p>​    常用场景：吸顶效果                </p><h4 id="8-大小写转换"><a href="#8-大小写转换" class="headerlink" title="8.大小写转换"></a>8.大小写转换</h4><p>​    text-transform:lowercase(大写转小写)</p><p>​    text-transform:capitalize(首字母变大写)</p><p>​    text-transform:uppercase(小写转大写)</p><p>​    text-transform:font-variant(小型大写字体)</p><h4 id="9-网页优化相关"><a href="#9-网页优化相关" class="headerlink" title="9.网页优化相关"></a>9.网页优化相关</h4><p>​    1.在实际开发中要求结构、表现、行为分开</p><p>​    2.</p><h4 id="10-BFC"><a href="#10-BFC" class="headerlink" title="10.BFC"></a>10.BFC</h4><p>​    1.在BFC下，内部的Box会在垂直方向，一个接一个地放置。</p><p>​    2.Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠 </p><p>​    3.在BFC中，每一个盒子的左外边缘（margin-left）会触碰到容器（父元素）的左边缘(border-left)（对于从右到左的格式来说，则触碰到右边缘），即使存在浮动也是如此。</p><p>​    4.BFC的区域不会与float box重叠。例子：两个div，一个进行浮动，一个不浮动，这时浮动的元素会覆盖没有浮动的元素。给没有浮动的元素加overflow：hidden。就不会重合。/*–+ c’x</p><p>​    5.计算BFC的高度时，浮动元素也参与计算</p><p>​    如何触发 BFC</p><p>​    1.浮动元素，float 除 none 以外的值</p><p>​    2.position的值不为static或者relative</p><p>​    3.display为inline-block、table-cell、table-caption</p><p>​    4.overflow 除了 visible 以外的值</p><p>​    BFC的应用</p><p>​    1.解决浮动塌陷问题</p><p>​    2.自适应两栏布局（我们还可以运用BFC可以阻止元素被浮动元素覆盖的特性来实现自适应两栏布局。方法：给没有浮动的元素加overflow：hidden。）</p><p>​    3.解决设置margin值重叠问题。</p><p>​    总结：BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。它规定了元素与其他元素的关系和相互作用。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js笔记整理-杂记2</title>
      <link href="/2020/06/12/js%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86-%E6%9D%82%E8%AE%B02/"/>
      <url>/2020/06/12/js%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86-%E6%9D%82%E8%AE%B02/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-javaScript字符串："><a href="#1-javaScript字符串：" class="headerlink" title="1.javaScript字符串："></a>1.javaScript字符串：</h4><p>​    常用方法：</p><p>​        charAt(),返回指定索引位置的<strong>字符</strong>；</p><p>​        indexOf(),返回字符串中检索指定字符第一次出现的位置，如果不存在则返回-1；</p><p>​        slice()，提取字符串的片断，并在新的字符串中返回被提取的部分；</p><p>​        split()，把字符串分割为子字符串数组，并返回该数组，参数为分割的规则；</p><p>​        substr(),从起始索引号提取字符串中指定数目的字符;</p><p>​        substring(),提取字符串中两个指定索引号之间的字符;</p><p>​        toString(),返回3串对象值;</p><p>​        trim(),移除字符串首尾的空白</p><a id="more"></a><h4 id="2-javaScript数据类型"><a href="#2-javaScript数据类型" class="headerlink" title="2.javaScript数据类型;"></a>2.javaScript数据类型;</h4><p>​    基本数据类型：number（数值型）、string（字符串）、boolean（布尔类型）、null（空型）、undefined（未定义型）</p><p>​    引用数据类型：Array（数组类型）、Object（对象类型）、Function（函数类型）</p><p>​    Symbol:es6新引入数据类型，表示独一无二的值；</p><p>​    数据转换：Number() 转换为数字， String() 转换为字符串， Boolean() 转化为布尔值；</p><p>​    NaN 的数据类型是 number；</p><p>​    null 的数据类型是 object；</p><p>​    未定义变量的数据类型为 undefined；</p><p>​    可以使用 constructor 属性来查看对象是否为数组 (包含字符串 “Array”)；</p><p>​    你可以使用 constructor 属性来查看对象是否为日期 (包含字符串 “Date”)；</p><p>​    全局方法 <strong>Number()</strong> 可以将字符串转换为数字。</p><p>​    字符串包含数字(如 “3.14”) 转换为数字 (如 3.14)，空字符串转换为 0，其他的字符串会转换为 NaN (不是个数字)；</p><p>​    当 JavaScript 尝试操作一个 “错误” 的数据类型时，会自动转换为 “正确” 的数据类型， + null返回5null 转换为 0，”5”-1返回 4”5”转换为5；</p><p>​    null 和 undefined 的值相等，但类型不等；</p><h4 id="3-javaScript变量提升与严格模式："><a href="#3-javaScript变量提升与严格模式：" class="headerlink" title="3.javaScript变量提升与严格模式："></a>3.javaScript变量提升与严格模式：</h4><p>​    变量提升：函数声明和变量声明总是会被解释器悄悄地被”提升”到方法体的最顶部；</p><p>​    JavaScript 中，函数及变量的声明都将被提升到函数的最顶部，变量可以在使用后声明，也就是变量可以先使用再声明；</p><p>​    JavaScript 只有声明的变量会提升，初始化的不会；</p><p>​    严格模式通过在脚本或函数的头部添加 “use strict”; 表达式来声明，目的是指定代码在严格条件下执行，严格模式下不能使用未声明的变量；</p><h4 id="4-javaScript-this关键字"><a href="#4-javaScript-this关键字" class="headerlink" title="4.javaScript this关键字:"></a>4.javaScript this关键字:</h4><p>​    面向对象中this表示当前对象的一个引用，但在 JavaScript 中 this 不是固定不变的，它会随着执行环境的改变而改变；</p><p>​    在方法中，this 表示该方法所属的对象；如果单独使用，this 表示全局对象；在函数中，this 表示全局对象；在函数中，在严格模式下，this 是未定义的(undefined)；在事件中，this 表示接收事件的元素；类似 call() 和 apply() 方法可以将 this 引用到任何对象；</p><h4 id="5-javaScript中的-let和const"><a href="#5-javaScript中的-let和const" class="headerlink" title="5.javaScript中的 let和const"></a>5.javaScript中的 let和const</h4><p>​    ES6新增的两个关键字，let声明的变量只在let命令所在的代码块内生效。</p><p>​    let声明的变量只在let命令所在的代码块内有效；const声明一个只读的常量，一旦声明，常量的值就不能改变；在 ES6 之前，JavaScript 只有两种作用域： <strong>全局变量</strong> 与 <strong>函数内的局部变量</strong>。</p><p>​    全局变量声明方式：在函数外声明或者在函数内未使用var关键字进行声明。</p><p>​    JavaScript 块级作用域：使用 var 关键字声明的变量不具备块级作用域的特性，它在 {} 外依然能被访问到，在ES6之前，是没有块级作用域的概念的，ES6可以使用let关键字来实现块级作用域。let声明的变量只在let命令所在的代码块{}内生效，在{}之外不能访问。</p><p>​    使用 <strong>var</strong> 关键字声明的变量在任何地方都可以修改；</p><p>​    在相同的作用域或块级作用域中，不能使用 <strong>let</strong> 关键字来重置 <strong>var</strong> 关键字声明的变量；</p><p>​    在相同的作用域或块级作用域中，不能使用 <strong>let</strong> 关键字来重置 <strong>let</strong> 关键字声明的变量；</p><p>​    在相同的作用域或块级作用域中，不能使用 <strong>var</strong> 关键字来重置 <strong>let</strong> 关键字声明的变量；</p><p>​    <strong>let</strong> 关键字在不同作用域，或不同块级作用域中是可以重新声明赋值的；</p><p>​    <strong>let</strong> 关键字定义的变量则不可以在使用后声明，也就是变量需要先声明再使用，<strong>const</strong>也是；</p><p>​    <strong>const</strong> 用于声明一个或多个常量，声明时必须进行初始化，且初始化后值不可再修改；</p><p>​    <strong>const</strong>定义常量与使用<strong>let</strong> 定义的变量相似:二者都是块级作用域，都不能和它所在作用域内的其他变量或函数拥有相同的名称。他们的区别：<strong>const</strong>声明的常量必须初始化，而<strong>let</strong>声明的变量不用，<strong>const</strong> 定义常量的值不能通过再赋值修改，也不能再次声明。而 <strong>let</strong> 定义的变量值可以修改。</p><p>​    <strong>const 的本质</strong>: <strong>const 定义的变量并非常量，并非不可变，它定义了一个常量引用一个值</strong>。使用 const 定义的对象或者数组，其实是可变的，例如：</p><p>​        const car = {type:”Fiat”, model:”500”, color:”white”};  </p><p>​        car.color = “red”;  </p><p>​        car.owner = “Johnson”;</p><p>​        例子2：</p><p>​        const cars = [“Saab”, “Volvo”, “BMW”];</p><p>​        cars[0] = “Toyota”;</p><p>​        cars.push(“Audi”);</p><p>​        但是我们<strong>不能对常量数组重新赋值</strong>。</p><h4 id="6、JavaScript-JSON"><a href="#6、JavaScript-JSON" class="headerlink" title="6、JavaScript-JSON"></a>6、JavaScript-JSON</h4><p>​    JSON是用于存储和传输数据的格式,通常用于服务端向网页传递数据,json使用js语法，但是JSON格式仅仅是一个文本，文本可以被任何编程语言读取及作为数据格式传递。 </p><p>​    JOSN字符串转换为javascript对象：创建JavaScript 字符串，字符串为 JSON 格式的数据，使用 JavaScript 内置函数 JSON.parse() 将字符串转换为 JavaScript 对象。JSON.stringify() 方法用于将 JavaScript 值转换为 JSON 字符串。</p><h4 id="7、包装类"><a href="#7、包装类" class="headerlink" title="7、包装类"></a>7、包装类</h4><p>​    基本类型在使用过程中，有时候需要调用一些方法，浏览器在解析基本数据类型时，会先把他们转成引用数据类型，在使用完方法后会自动转换成功基本数据类型。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css及css3笔记整理-杂记1</title>
      <link href="/2020/06/10/css%E5%8F%8Acss3%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86-%E6%9D%82%E8%AE%B0/"/>
      <url>/2020/06/10/css%E5%8F%8Acss3%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86-%E6%9D%82%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1、px、em、rem区别"><a href="#1、px、em、rem区别" class="headerlink" title="1、px、em、rem区别"></a>1、px、em、rem区别</h4><h5 id="1、px：px像素）。相对长度单位。像素px是相对于显示器屏幕分辨率而言的。"><a href="#1、px：px像素）。相对长度单位。像素px是相对于显示器屏幕分辨率而言的。" class="headerlink" title="1、px：px像素）。相对长度单位。像素px是相对于显示器屏幕分辨率而言的。"></a>1、px：px像素）。相对长度单位。像素px是相对于显示器屏幕分辨率而言的。</h5><h5 id="2、em：em是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。"><a href="#2、em：em是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。" class="headerlink" title="2、em：em是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。"></a>2、em：em是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。</h5><h6 id="1、补充：em的值不是固定；em会继承父级元素的字体大小。"><a href="#1、补充：em的值不是固定；em会继承父级元素的字体大小。" class="headerlink" title="1、补充：em的值不是固定；em会继承父级元素的字体大小。"></a>1、补充：<strong>em的值不是固定</strong>；<strong>em会继承父级元素的字体大小</strong>。</h6><h6 id="2、注意：任意浏览器的默认字体高都是16px。所有未经调整的浏览器都符合-1em-16px。那么12px-0-75em-10px-0-625em。为了简化font-size的换算，需要在css中的body选择器中声明Font-size-62-5-，这就使em值变为-16px-62-5-10px-这样12px-1-2em-10px-1em-也就是说只需要将你的原来的px数值除以10，然后换上em作为单位就行了。所以在写css时，body选择器中声明Font-size-62-5-，将你的原来的px数值除以10，然后换上em作为单位，重新计算那些被放大的字体的em数值。避免字体大小的重复声明。但也要避免1-2-1-2-1-44的现象。比如说你在-content中声明了字体大小为1-2em，那么在声明p的字体大小时就只能是1em，而不是1-2em-因为此em非彼em，它因继承-content的字体高而变为了1em-12px。"><a href="#2、注意：任意浏览器的默认字体高都是16px。所有未经调整的浏览器都符合-1em-16px。那么12px-0-75em-10px-0-625em。为了简化font-size的换算，需要在css中的body选择器中声明Font-size-62-5-，这就使em值变为-16px-62-5-10px-这样12px-1-2em-10px-1em-也就是说只需要将你的原来的px数值除以10，然后换上em作为单位就行了。所以在写css时，body选择器中声明Font-size-62-5-，将你的原来的px数值除以10，然后换上em作为单位，重新计算那些被放大的字体的em数值。避免字体大小的重复声明。但也要避免1-2-1-2-1-44的现象。比如说你在-content中声明了字体大小为1-2em，那么在声明p的字体大小时就只能是1em，而不是1-2em-因为此em非彼em，它因继承-content的字体高而变为了1em-12px。" class="headerlink" title="2、注意：任意浏览器的默认字体高都是16px。所有未经调整的浏览器都符合: 1em=16px。那么12px=0.75em,10px=0.625em。为了简化font-size的换算，需要在css中的body选择器中声明Font-size=62.5%，这就使em值变为 16px*62.5%=10px, 这样12px=1.2em, 10px=1em, 也就是说只需要将你的原来的px数值除以10，然后换上em作为单位就行了。所以在写css时，body选择器中声明Font-size=62.5%，将你的原来的px数值除以10，然后换上em作为单位，重新计算那些被放大的字体的em数值。避免字体大小的重复声明。但也要避免1.2 * 1.2= 1.44的现象。比如说你在#content中声明了字体大小为1.2em，那么在声明p的字体大小时就只能是1em，而不是1.2em, 因为此em非彼em，它因继承#content的字体高而变为了1em=12px。"></a>2、注意：任意浏览器的默认字体高都是16px。所有未经调整的浏览器都符合: 1em=16px。那么12px=0.75em,10px=0.625em。为了简化font-size的换算，需要在css中的body选择器中声明Font-size=62.5%，这就使em值变为 16px*62.5%=10px, 这样12px=1.2em, 10px=1em, 也就是说只需要将你的原来的px数值除以10，然后换上em作为单位就行了。所以在写css时，body选择器中声明Font-size=62.5%，将你的原来的px数值除以10，然后换上em作为单位，重新计算那些被放大的字体的em数值。避免字体大小的重复声明。但也要避免1.2 * 1.2= 1.44的现象。比如说你在#content中声明了字体大小为1.2em，那么在声明p的字体大小时就只能是1em，而不是1.2em, 因为此em非彼em，它因<strong>继承#content的字体</strong>高而变为了1em=12px。</h6><a id="more"></a><h5 id="3、rem：rem是CSS3新增的一个相对单位（root-em，根em），这个单位引起了广泛关注。这个单位与em有什么区别呢？区别在于使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素。这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。目前，除了IE8及更早版本外，所有浏览器均已支持rem。（rem能等比适配所有屏幕，根据变化html的字体大小来控制rem的大小）"><a href="#3、rem：rem是CSS3新增的一个相对单位（root-em，根em），这个单位引起了广泛关注。这个单位与em有什么区别呢？区别在于使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素。这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。目前，除了IE8及更早版本外，所有浏览器均已支持rem。（rem能等比适配所有屏幕，根据变化html的字体大小来控制rem的大小）" class="headerlink" title="3、rem：rem是CSS3新增的一个相对单位（root em，根em），这个单位引起了广泛关注。这个单位与em有什么区别呢？区别在于使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素。这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。目前，除了IE8及更早版本外，所有浏览器均已支持rem。（rem能等比适配所有屏幕，根据变化html的字体大小来控制rem的大小）"></a>3、rem：rem是CSS3新增的一个相对单位（root em，根em），这个单位引起了广泛关注。这个单位与em有什么区别呢？区别在于使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素。这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。目前，除了IE8及更早版本外，所有浏览器均已支持rem。（rem能等比适配所有屏幕，根据变化html的字体大小来控制rem的大小）</h5><h6 id="1、补充：对于不支持它的浏览器，应对方法也很简单，就是多写一个绝对单位的声明。这些浏览器会忽略用rem设定的字体大小。"><a href="#1、补充：对于不支持它的浏览器，应对方法也很简单，就是多写一个绝对单位的声明。这些浏览器会忽略用rem设定的字体大小。" class="headerlink" title="1、补充：对于不支持它的浏览器，应对方法也很简单，就是多写一个绝对单位的声明。这些浏览器会忽略用rem设定的字体大小。"></a>1、补充：对于不支持它的浏览器，应对方法也很简单，就是多写一个绝对单位的声明。这些浏览器会忽略用rem设定的字体大小。</h6><h5 id="4、补充："><a href="#4、补充：" class="headerlink" title="4、补充："></a>4、补充：</h5><p>​        1.vw,vh—–让元素可以像百分比一样自动伸缩。</p><p>​            vw—–将屏幕的宽度划分为100vw</p><p>​            vh——将屏幕的高度划分为100vh</p><p>​        2.使用vw来适配rem，vw可以根据屏幕大小的变化自适应，可以把html的font-size设置成vw</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">font-size</span>:<span class="number">14px</span>; <span class="attribute">font-size</span>:.<span class="number">875rem</span>;&#125;</span><br></pre></td></tr></table></figure><h5 id="4、小结：px-与-rem-的选择："><a href="#4、小结：px-与-rem-的选择：" class="headerlink" title="4、小结：px 与 rem 的选择："></a>4、小结：px 与 rem 的选择：</h5><p>​            对于只需要适配少部分手机设备，且分辨率对页面影响不大的，使用px即可 。</p><p>​            对于需要适配各种移动设备，使用rem，例如只需要适配iPhone和iPad等分辨率差别比较挺大的设备。</p><h4 id="2、CSS3动画"><a href="#2、CSS3动画" class="headerlink" title="2、CSS3动画"></a>2、CSS3动画</h4><h6 id="transform-转换方式"><a href="#transform-转换方式" class="headerlink" title="transform:转换方式"></a>transform:转换方式</h6><p>​        转换方式：</p><p>​            translate()，根据X,Y轴位置给定的参数，从当前元素的位置移动</p><p>​            rotate(),给定一个度数顺时针旋转元素</p><p>​            scale(),压缩和拉伸，宽度与高度与其原始大小按比例变化</p><p>​            skew()，X,Y轴倾斜的角度</p><h6 id="transition-过渡"><a href="#transition-过渡" class="headerlink" title="transition:过渡"></a>transition:过渡</h6><p>​            transition-property:过渡的css属性名称</p><p>​            transition-duration:过渡效果花费的时间</p><p>​            transition-timing-function:过渡效果的曲线</p><p>​            transition-delay:过渡效果是否延时执行，默认为0，不延时</p><h6 id="动画：-keyframes：规则是创建动画；规则内指定一个css样式和动画将逐步从目前的样式更改为新的样式；创建动画并将其绑定到一个选择器，否则不会有任何效果；animation-规定动画名称，动画持续时间。"><a href="#动画：-keyframes：规则是创建动画；规则内指定一个css样式和动画将逐步从目前的样式更改为新的样式；创建动画并将其绑定到一个选择器，否则不会有任何效果；animation-规定动画名称，动画持续时间。" class="headerlink" title="动画：@keyframes：规则是创建动画；规则内指定一个css样式和动画将逐步从目前的样式更改为新的样式；创建动画并将其绑定到一个选择器，否则不会有任何效果；animation:规定动画名称，动画持续时间。"></a>动画：@keyframes：规则是创建动画；规则内指定一个css样式和动画将逐步从目前的样式更改为新的样式；创建动画并将其绑定到一个选择器，否则不会有任何效果；animation:规定动画名称，动画持续时间。</h6><h6 id="perspective：景深"><a href="#perspective：景深" class="headerlink" title="perspective：景深"></a>perspective：景深</h6><h6 id="transform-style-preserve-3d-3-D效果"><a href="#transform-style-preserve-3d-3-D效果" class="headerlink" title="transform-style:preserve-3d;3    D效果"></a>transform-style:preserve-3d;3    D效果</h6><h4 id="3、多列："><a href="#3、多列：" class="headerlink" title="3、多列："></a>3、多列：</h4><p>​    将文本内容设计成像报纸一样的多列布局。</p><p>​    css3的多列属性：</p><p>​        column-count：指定需要分割的列数</p><p>​        column-gap:指定列与列之间的间隙</p><p>​        column-fill：如何填充</p><p>​        column-rule-style:指定列与列之间的边框样式</p><p>​        column-rule-width:指定两列的边框厚度</p><p>​        column-rule-color:指定两列的边框颜色</p><p>​        column-rule:所有属性的简写</p><p>​        column-width:指定列的宽度</p><p>​        column-span：指定元素跨越的列</p><h4 id="4、css3框大小"><a href="#4、css3框大小" class="headerlink" title="4、css3框大小"></a>4、css3框大小</h4><p>​    CSS3 box-sizing 属性可以设置 width 和 height 属性中包含了 padding(内边距) 和 border(边框)，</p><p>​    默认情况下，元素的宽度与高度计算方式如下：</p><p>​    <strong>width(宽) + padding(内边距) + border(边框) = 元素实际宽度</strong></p><p>​    <strong>height(高) + padding(内边距) + border(边框) = 元素实际高度</strong></p><p>​    这就意味着我们在设置元素的 width/height 时，元素真实展示的高度与宽度会更大(因为元素的边框与内边距也会计算在 width/height 中)。</p><p>​    CSS3 box-sizing 属性在一个元素的 width 和 height 中包含 padding(内边距) 和 border(边框)。</p><p>如果在元素上设置了 box-sizing: border-box; 则 padding(内边距) 和 border(边框) 也包含在 width 和 height 中。</p><h4 id="5、弹性盒子-Flex-Box"><a href="#5、弹性盒子-Flex-Box" class="headerlink" title="5、弹性盒子(Flex Box)"></a>5、弹性盒子(Flex Box)</h4><p>​    CSS3 弹性盒（ Flexible Box 或 flexbox），是一种当页面需要适应不同的屏幕大小以及设备类型时确保元素拥有恰当的行为的布局方式。</p><p>引入弹性盒布局模型的目的是提供一种更加有效的方式来对一个容器中的子元素进行排列、对齐和分配空白空间。</p><p>​    弹性盒子由弹性容器(Flex container)和弹性子元素(Flex item)组成。</p><p>​    弹性容器通过设置 display 属性的值为 flex 或 inline-flex将其定义为弹性容器。</p><p>​    弹性容器内包含了一个或多个弹性子元素。</p><p>​    <strong>注意：</strong> 弹性容器外及弹性子元素内是正常渲染的。弹性盒子只定义了弹性子元素如何在弹性容器内布局。</p><p>​                弹性子元素通常在弹性盒子内一行显示。默认情况每个容器只有一行。</p><p>​    使用弹性盒子，居中变的很简单，只想要设置 <code>margin: auto;</code> 可以使得弹性子元素在两上轴方向上完全居中:</p><p>​    align-content:用于修改 flex-wrap 属性的行为。类似于 align-items, <strong>但它不是设置弹性子元素的对齐，而是设置各个行的对齐。</strong></p><p>​    align-self 属性用于设置<strong>弹性元素自身在侧轴（纵轴）方向上的对齐方式</strong>。</p><h4 id="6、css3多媒体查询"><a href="#6、css3多媒体查询" class="headerlink" title="6、css3多媒体查询"></a>6、css3多媒体查询</h4><p>​    CSS3 的多媒体查询继承了 CSS2 多媒体类型的所有思想： 取代了查找设备的类型，CSS3 根据设置自适应显示。</p><p>​    媒体查询可用于检测很多事情，例如：</p><ul><li><p>viewport(视窗) 的宽度与高度</p></li><li><p>设备的宽度与高度</p></li><li><p>朝向 (智能手机横屏，竖屏) 。</p></li><li><p>分辨率</p><p>多媒体查询由多种媒体组成，可以包含一个或多个表达式，表达式根据条件是否成立返回 true 或 false。</p><p>如果指定的多媒体类型匹配设备类型则查询结果返回 true，文档会在匹配的设备上显示指定样式效果。</p><p>除非你使用了 not 或 only 操作符，否则所有的样式会适应在所有设备上显示效果。</p></li><li><p><strong>not:</strong> not是用来排除掉某些特定的设备的，比如 @media not print（非打印设备）。</p></li><li><p><strong>only:</strong> 用来定某种特别的媒体类型。对于支持Media Queries的移动设备来说，如果存在only关键字，移动设备的Web浏览器会忽略only关键字并直接根据后面的表达式应用样式文件。对于不支持Media Queries的设备但能够读取Media Type类型的Web浏览器，遇到only关键字时会忽略这个样式文件。</p></li><li><p><strong>all:</strong> 所有设备，这个应该经常看到。</p></li></ul><p>以下实例中在屏幕可视窗口尺寸小于 480 像素的设备上修改背景颜色:</p><p>@media screen and (min-width: 480px) {    body {        background-color: lightgreen;    } } </p>]]></content>
      
      
      <categories>
          
          <category> 笔记整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -css3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解浏览器的工作原理</title>
      <link href="/2020/06/09/%E7%90%86%E8%A7%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
      <url>/2020/06/09/%E7%90%86%E8%A7%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1、浏览器的结构"><a href="#1、浏览器的结构" class="headerlink" title="1、浏览器的结构"></a>1、浏览器的结构</h4><p>​    <strong>进程：</strong>进程（process）是程序的一次执行过程，是一个动态概念，是程序在执行过程中分配和管理资源的基本单位</p><p>​    <strong>线程：</strong>线程（thread）是CPU调度和分派的基本单位，它可与同属一个进程的其他的线程共享进程所拥有的全部资源。</p><p>​    所以，进程可以理解成正在执行的应用程序，而线程呢，可以理解成我们应用程序中的代码的执行器。而他们的关系可想而知，<strong>线程是跑在进程里面的</strong>，一个进程里面可能有一个或者多个线程，而一个线程，只能隶属于一个进程。</p><p>​    浏览器属于一个应用程序，而应用程序的一次执行，可以理解为计算机启动了一个<strong>进程</strong>，进程启动后，CPU会给该进程分配相应的内存空间，当我们的进程得到了内存之后，就可以使用<strong>线程</strong>进行资源调度，进而完成我们应用程序的功能</p><p>​    而在应用程序中，为了满足功能的需要，启动的进程会创建另外的新的进程来处理其他任务，这些创建出来的<strong>新的进程拥有全新的独立的内存空间</strong>，不能与原来的进程内向内存，如果这些进程之间需要通信，可以通过<strong>IPC机制（Inter Process Communication）</strong>来进行。很多应用程序都会采取这种多进程的方式来工作，<strong>因为进程和进程之间是互相独立的它们互不影响</strong>，也就是说，当其中一个进程挂掉了之后，不会影响到其他进程的执行，只需要重启挂掉的进程就可以恢复运行。</p><a id="more"></a><h4 id="2、浏览器的多进程架构"><a href="#2、浏览器的多进程架构" class="headerlink" title="2、浏览器的多进程架构"></a>2、浏览器的多进程架构</h4><p>​    应用程序的架构可分为单进程多线程的应用程序与使用IPC通信的多进程应用程序。</p><p>​    不同的浏览器使用不同的架构，下面主要以Chrome为例，介绍浏览器的多进程架构。</p><p>​    在Chrome中，主要的进程有4个：</p><ul><li><strong>浏览器进程 (Browser Process)</strong>：负责浏览器的TAB的前进、后退、地址栏、书签栏的工作和处理浏览器的一些不可见的底层操作，比如网络请求和文件访问。</li><li><strong>渲染进程 (Renderer Process)</strong>：负责一个Tab内的显示相关的工作，也称渲染引擎。</li><li><strong>插件进程 (Plugin Process)</strong>：负责控制网页使用到的插件。</li><li><strong>GPU进程 (GPU Process)</strong>：负责处理整个应用程序的GPU任务。</li></ul><h4 id="3、4个进程之间的关系"><a href="#3、4个进程之间的关系" class="headerlink" title="3、4个进程之间的关系"></a>3、4个进程之间的关系</h4><p>​    首先，当我们是要浏览一个网页，我们会在浏览器的地址栏里输入URL，这个时候<strong>Browser Process</strong>会向这个URL发送请求，获取这个URL的HTML内容，然后将HTML交给<strong>Renderer Process</strong>，<strong>Renderer Process</strong>解析HTML内容，解析遇到需要请求网络的资源又返回来交给<strong>Browser Process</strong>进行加载，同时通知<strong>BrowserProcess</strong>，需要<strong>Plugin Process</strong>加载插件资源，执行插件代码。解析完成后，<strong>Renderer Process</strong>计算得到图像帧，并将这些图像帧交给<strong>GPU Process</strong>，<strong>GPU Process</strong>将其转化为图像显示屏幕。</p><h4 id="4、多进程架构的好处"><a href="#4、多进程架构的好处" class="headerlink" title="4、多进程架构的好处"></a>4、多进程架构的好处</h4><p>​    第一，更高的容错性。当今WEB应用中，HTML，JavaScript和CSS日益复杂，这些跑在渲染引擎的代码，频繁的出现BUG，而有些BUG会直接导致渲染引擎崩溃，多进程架构使得每一个渲染引擎运行在各自的进程中，相互之间不受影响，也就是说，当其中一个页面崩溃挂掉之后，其他页面还可以正常的运行不收影响。</p><p>​    第二，更高的安全性和沙盒性（sanboxing）。渲染引擎会经常性的在网络上遇到不可信、甚至是恶意的代码，它们会利用这些漏洞在你的电脑上安装恶意的软件，针对这一问题，浏览器对不同进程限制了不同的权限，并为其提供沙盒运行环境，使其更安全更可靠</p><p>​    第三，更高的响应速度。在单进程的架构中，各个任务相互竞争抢夺CPU资源，使得浏览器响应速度变慢，而多进程架构正好规避了这一缺点。</p><h4 id="5、导航过程都发生了什么"><a href="#5、导航过程都发生了什么" class="headerlink" title="5、导航过程都发生了什么"></a>5、导航过程都发生了什么</h4><p>​    <strong>1、网页加载过程</strong></p><p>​    之前我们我们提到，tab以外的大部分工作由浏览器进程<code>Browser Process</code>负责，针对工作的不同，Browser Process 划分出不同的工作线程：</p><ul><li><p><strong>UI thread</strong>：控制浏览器上的按钮及输入框；</p></li><li><p><strong>network thread</strong>：处理网络请求，从网上获取数据；</p></li><li><p><strong>storage thread</strong>：控制文件等的访问；</p><p><strong>2、过程</strong></p><p>​    1、处理输入，<strong>UI thread</strong>会判断输入的内容是搜索关键词（search query）还是URL，如果是搜索关键词，跳转至默认搜索引擎对应都搜索URL，如果输入的内容是URL，则开始请求URL。</p><p>​    2、开始导航，<strong>UI thread</strong>将关键词搜索对应的URL或输入的URL交给网络线程<strong>Network thread</strong>，此时UI线程使Tab前的图标展示为加载中状态，然后网络进程进行一系列诸如DNS寻址，建立TLS连接等操作进行资源请求，如果收到服务器的301重定向响应，它就会告知UI线程进行重定向然后它会再次发起一个新的网络请求。</p><p>​    3、读取响应，<strong>network thread</strong>接收到服务器的响应后，开始解析HTTP响应报文，然后根据响应头中的<strong>Content-Type</strong>字段来确定响应主体的媒体类型（MIME Type），如果媒体类型是一个HTML文件，则将响应数据交给渲染进程（renderer process）来进行下一步的工作，如果是 zip 文件或者其它文件，会把相关数据传输给下载管理器。</p><p>与此同时，浏览器会进行 Safe Browsing 安全检查，如果域名或者请求内容匹配到已知的恶意站点，network thread 会展示一个警告页。除此之外，网络线程还会做 CORB（Cross Origin Read Blocking）检查来确定那些敏感的跨站数据不会被发送至渲染进程。</p><p>​    4、查找渲染进程，各种检查完毕以后，<strong>network thread</strong> 确信浏览器可以导航到请求网页，<strong>network thread</strong> 会通知 <strong>UI thread</strong> 数据已经准备好，<strong>UI thread</strong> 会查找到一个 <strong>renderer process</strong> 进行网页的渲染。</p><p>​    浏览器为了对查找渲染进程这一步骤进行优化，考虑到网络请求获取响应需要时间，所以在第二步开始，浏览器已经预先查找和启动了一个渲染进程，如果中间步骤一切顺利，当 <strong>network thread</strong> 接收到数据时，渲染进程已经准备好了，但是如果遇到重定向，这个准备好的渲染进程也许就不可用了，这个时候会重新启动一个渲染进程。</p><p>​    5、提交导航，到了这一步，数据和渲染进程都准备好了，<strong>Browser Process</strong> 会向 <strong>Renderer Process</strong>发送IPC消息来确认导航，此时，浏览器进程将准备好的数据发送给渲染进程，渲染进程接收到数据之后，又发送IPC消息给浏览器进程，告诉浏览器进程导航已经提交了，页面开始加载。</p><p>​    6、初始化加载完成，当导航提交完成后，渲染进程开始加载资源及渲染页面（详细内容下文介绍），当页面渲染完成后（页面及内部的iframe都触发了onload事件），会向浏览器进程发送IPC消息，告知浏览器进程，这个时候UI thread会停止展示tab中的加载中图标。</p></li></ul><h4 id="6、网页渲染原理"><a href="#6、网页渲染原理" class="headerlink" title="6、网页渲染原理"></a>6、网页渲染原理</h4><p>​    导航过程完成之后，浏览器进程把数据交给了渲染进程，渲染进程负责tab内的所有事情，核心目的就是将HTML/CSS/JS代码，转化为用户可进行交互的web页面。渲染进程中，包含线程分别是：</p><ul><li><p>一个主线程（main thread）</p></li><li><p>多个工作线程（work thread）</p></li><li><p>一个合成器线程（compositor thread）</p></li><li><p>多个光栅化线程（raster thread）</p><p><strong>过程：</strong></p><p>​    1、<strong>构建DOM</strong>，当渲染进程接受到导航的确认信息后，开始接受来自浏览器进程的数据，这个时候，主线程会解析数据转化为DOM（Document Object Model）对象。DOM为WEB开发人员通过JavaScript与网页进行交互的数据结构及API。</p><p>​    2、<strong>子资源加载</strong>，在构建DOM的过程中，会解析到图片、CSS、JavaScript脚本等资源，这些资源是需要从网络或者缓存中获取的，主线程在构建DOM过程中如果遇到了这些资源，逐一发起请求去获取，而为了提升效率，浏览器也会运行预加载扫描（preload scanner）程序，如果HTML中存在<code>img</code>、<code>link</code>等标签，预加载扫描程序会把这些请求传递给<code>Browser Process</code>的network thread进行资源下载</p><p>3、<strong>JavaScript的下载与执行</strong>，构建DOM过程中，如果遇到<code>&lt;script&gt;</code>标签，渲染引擎会停止对HTML的解析，而去加载执行JS代码，原因在于JS代码可能会改变DOM的结构（比如执行<code>document.write()</code>等API）。不过开发者其实也有多种方式来告知浏览器应对如何应对某个资源，比如说如果在<code>&lt;script&gt;</code> 标签上添加了 <code>async</code> 或 <code>defer</code> 等属性，浏览器会异步的加载和执行JS代码，而不会阻塞渲染。</p><p>4、<strong>样式计算 - Style calculation</strong>，DOM树只是我们页面的结构，我们要知道页面长什么样子，我们还需要知道DOM的每一个节点的样式。主线程在解析页面时，遇到<code>&lt;style&gt;</code>标签或者<code>&lt;link&gt;</code>标签的CSS资源，会加载CSS代码，根据CSS代码确定每个DOM节点的计算样式（computed style）。计算样式是主线程根据CSS样式选择器（CSS selectors）计算出的每个DOM元素应该具备的具体样式，即使你的页面没有设置任何自定义的样式，浏览器也会提供其默认的样式。</p><p>5、<strong>布局 - Layout</strong>，DOM树和计算样式完成后，我们还需要知道每一个节点在页面上的位置，布局（Layout）其实就是找到所有元素的几何关系的过程。主线程会遍历DOM 及相关元素的计算样式，构建出包含每个元素的页面坐标信息及盒子模型大小的布局树（Render Tree），遍历过程中，会跳过隐藏的元素（display: none），另外，伪元素虽然在DOM上不可见，但是在布局树上是可见的。</p><p>6、<strong>绘制 - Paint</strong>，布局 layout 之后，我们知道了不同元素的结构，样式，几何关系，我们要绘制出一个页面，我们要需要知道每个元素的绘制先后顺序，在绘制阶段，主线程会遍历布局树（layout tree），生成一系列的绘画记录（paint records）。绘画记录可以看做是记录各元素绘制先后顺序的笔记。</p><p>7、<strong>合成 - Compositing</strong>，文档结构、元素的样式、元素的几何关系、绘画顺序，这些信息我们都有了，这个时候如果要绘制一个页面，我们需要做的是把这些信息转化为显示器中的像素，这个转化的过程，叫做<strong>光栅化（rasterizing）</strong>。那我们要绘制一个页面，最简单的做法是只光栅化视口内（viewport）的网页内容，如果用户进行了页面滚动，就移动光栅帧（rastered frame）并且光栅化更多的内容以补上页面缺失的部分</p></li></ul><h4 id="7、浏览器对事件的处理"><a href="#7、浏览器对事件的处理" class="headerlink" title="7、浏览器对事件的处理"></a>7、浏览器对事件的处理</h4><p>​    当页面渲染完毕以后，TAB内已经显示出了可交互的WEB页面，用户可以进行移动鼠标、点击页面等操作了。</p><p>​    <strong>以点击事件（click event）为例</strong>，让鼠标点击页面时候，首先接受到事件信息的是<strong>Browser Process</strong>，但是<strong>Browser Process</strong>只知道事件发生的类型和发生的位置，具体怎么对这个点击事件进行处理，还是由Tab内的<strong>Renderer Process</strong>进行的。<strong>Browser Process</strong>接受到事件后，随后便把事件的信息传递给了渲染进程，渲染进程会找到根据事件发生的坐标，找到目标对象（target），并且运行这个目标对象的点击事件绑定的监听函数（listener）。</p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>​    浏览器的多进程架构，根据不同的功能划分了不同的进程，进程内不同的使命划分了不同的线程，当用户开始浏览网页时候，浏览器进程进行处理输入、开始导航请求数据、请求响应数据，查找新建渲染进程，提交导航，之后渲染又进行了解析HTML构建DOM、构建过程加载子资源、下载并执行JS代码、样式计算、布局、绘制、合成，一步一步的构建出一个可交互的WEB页面，之后浏览器进程又接受页面的交互事件信息，并将其交给渲染进程，渲染进程内主进程进行命中测试，查找目标元素并执行绑定的事件，完成页面的交互。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS中的垂直居中技巧</title>
      <link href="/2020/06/08/CSS%E4%B8%AD%E7%9A%84%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E6%8A%80%E5%B7%A7/"/>
      <url>/2020/06/08/CSS%E4%B8%AD%E7%9A%84%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1、Line-height"><a href="#1、Line-height" class="headerlink" title="1、Line-height"></a>1、Line-height</h4><p>​    适用情景：单行文字垂直居中</p><p>​    例如按钮、下拉框、导航此类元素最常见到的方式，此方式的原理是在于将单行文字的行高设定后，文字会位于行高的垂直中间位置，利用此原理就能轻松达成垂直居中的要求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;content&quot;&gt;这是要居中的文字&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">.content&#123;  width: 400px;  background: #ccc;  line-height:100px;  margin: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、Line-height-inline-block"><a href="#2、Line-height-inline-block" class="headerlink" title="2、Line-height+inline-block"></a>2、Line-height+inline-block</h4><p>​    适用情景：多对象的垂直居中</p><p>​    将多个元素或多行元素当成一个行元素来看待，所以我们必须要将这些数据多包一层，并将其设定为inline-block，并在该inline-block对象的外层对象使用inline-block来代替height的设置，如此便可以达到垂直居中的目的了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;line-height + inline-block&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;box box2&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">  &lt;a href&#x3D;&quot;#&quot;&gt;我是元素中的一个元素&lt;&#x2F;a&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"> &lt;&#x2F;div&gt;</span><br><span class="line">.box&#123;  width: 500px;  border: 1px solid #f00;  margin: auto;  line-height: 200px;  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.box2 .content&#123;  display: inline-block;  height: auto;  line-height:1;  width: 400px;  background: #ccc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="3、absolute-margin-负值"><a href="#3、absolute-margin-负值" class="headerlink" title="3、absolute + margin 负值"></a>3、absolute + margin 负值</h4><p>​    适用情景：多行文字的垂直居中技巧</p><p>​    设置元素为绝对定位并设置top:50%来抓取空间高度的50%，接着在将居中元素的margin-top设定为负一半的高度，这样就能让元素居中了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;absolute + margin 负值&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;box box4&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;content&quot;&gt;我要居中&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">h2&#123;  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.box&#123;  width: 500px;  height: 250px;  border: 1px solid #f00;  margin: auto;  position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.box4 .content&#123;  width: 400px;  background: #ccc;  height: 70px;  position: absolute;  top:50%;  left: 50%;  margin-left: -200px;  margin-top: -35px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、absolute-margin-auto"><a href="#4、absolute-margin-auto" class="headerlink" title="4、absolute + margin auto"></a>4、absolute + margin auto</h4><p>​    适用情景：多行文字的垂直居中技巧</p><p>​    当元素设置为绝对定位后，假设它是抓不到整体可运用的空间范围，所以margin:auto会失效，但当你设置了top:0;bottom:0;时，绝对定位元素就抓到了可运用的空间了，这时你的margin:auto就生效了。如果你的绝对定位元素需要水平居中于父层，那你同样可以设定left:0;right:0;来让绝对定位元素取得空间可运用范围，再让marign-left与margin-right设定为auto即可居中。但此方式的缺点是你的定位元素必须有固定的宽高（百分比也算）才能正常居中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;absolute + translate(-50%, -50%)&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;box box5&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;content&quot;&gt;我要居中&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">h2&#123;  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.box&#123;  width: 500px;  height: 250px;  border: 1px solid #f00;  margin: auto;  position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.content&#123;  width: 400px;  background: #ccc;  height: 70px;  position: absolute;  top: 0;  right: 0;  bottom: 0;  left: 0;  margin: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、absolute-translate"><a href="#5、absolute-translate" class="headerlink" title="5、absolute + translate"></a>5、absolute + translate</h4><p>​    适用情景：多行文字的垂直居中技巧</p><p>​    因为此居中的定位元素不需要固定的宽高，我们利用绝对定位时的top 与right设置元素的上方跟左方各为50%，再利用translate(-50%,-50%)位移居中元素自身宽与高的50%就能达成居中的目的了（CSS3）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;absolute + margin: auto&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;box box6&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;content&quot;&gt;我要居中&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">h2&#123;  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.box&#123;  width: 500px;  height: 250px;  border: 1px solid #f00;  margin: auto;  position: relative;&#125;</span><br><span class="line"> .box5 .content&#123;  width: 400px;  background: #ccc;  position: absolute;  top:50%;  left: 50%;  transform: translate(-50%, -50%);&#125;</span><br></pre></td></tr></table></figure><h4 id="6、Flex-align-items"><a href="#6、Flex-align-items" class="headerlink" title="6、Flex + align-items"></a>6、Flex + align-items</h4><p>​    适用情景：多行文字的垂直居中技巧</p><p>​    只要设定父层display:flex以及设定次轴(cross axis)属性align-items:center ，该方式的优点是此层不需要设定高度即可自动居中。</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;Flex + align-items&lt;&#x2F;h2&gt;&lt;div class&#x3D;&quot;box box7&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;content&quot;&gt;我要居中 &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">h2&#123;  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.box&#123;  width: 500px;  height: 250px;  border: 1px solid #f00;  margin: auto;  display: flex;  justify-content: center;  align-items: center; </span><br><span class="line">&#125;</span><br><span class="line">.content&#123;  width: 400px;  background: #ccc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="7、Flex-margin"><a href="#7、Flex-margin" class="headerlink" title="7、Flex + margin"></a>7、Flex + margin</h4><p>​    适用情景：多行文字的垂直居中技巧</p><p>​    由于Flex元素对空间解读的特殊性，我们只要在父层元素设定display:flex，接着在需要垂直居中的元素上设定margin:auto，即可自动居中</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;Flex + margin&lt;&#x2F;h2&gt;&lt;div class&#x3D;&quot;box box9&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;content&quot;&gt;我要居中&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">h2&#123;  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.box&#123;  width: 500px;  height: 250px;  border: 1px solid #f00;  margin: auto;  display: flex;</span><br><span class="line">&#125;</span><br><span class="line">.content&#123;  width: 400px;  background: #ccc;  margin: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="8、Flex-align-self"><a href="#8、Flex-align-self" class="headerlink" title="8、Flex + align-self"></a>8、Flex + align-self</h4><p>​    适用情景：多行文字的垂直居中技巧</p><p>​    align-self 应该大家都不陌生，基本上就是对flex次轴cross axis 的个别对齐方式只要对单一子层元素设定align-self:center就能达成垂直居中的目的了。</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;Flex + align-self&lt;&#x2F;h2&gt;&lt;div class&#x3D;&quot;box box10&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;content&quot;&gt;我要居中&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">h2&#123;  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.box&#123;  width: 500px;  height: 250px;  border: 1px solid #f00;  margin: auto;  display: flex;  justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line">.content&#123;  width: 400px;  background: #ccc;  align-self: center</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="9、Display：table-cell"><a href="#9、Display：table-cell" class="headerlink" title="9、Display：table-cell"></a>9、Display：table-cell</h4><p>​    适用情景：多行文字的垂直居中技巧</p><p>原理在于使用 CSS display属性将div设置成表格的单元格，这样就能利用支持存储单元格对齐的vertical-align属性来将信息垂直居中</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;display: table-cell&lt;&#x2F;h2&gt;&lt;div class&#x3D;&quot;box box19&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;content&quot;&gt;我要居中&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">h2&#123;  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.box&#123;  width: 500px;  height: 250px;  border: 1px solid #f00;  margin: auto;    text-align: center;    display: table-cell;  vertical-align: middle;</span><br><span class="line">&#125;</span><br><span class="line">.content&#123;  width: 400px;  background: #ccc;  margin: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="10、Relative-translateY"><a href="#10、Relative-translateY" class="headerlink" title="10、Relative + translateY"></a>10、Relative + translateY</h4><p>​    适用情景：多行文字的垂直居中技巧</p><p>​    利用了top:50%的招式，让你的元素上方能产生固定百分比的距离，接着让要居中的元素本身使用tanslateY的百分比来达成垂直居中的需求，translate是一个很棒的属性，由于translate的百分比单位是利用元素自身的尺寸作为100%，这样让我们要利用元素自身宽高做事变得方便很多。</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;relative + translateY(-50%)&lt;&#x2F;h2&gt;&lt;div class&#x3D;&quot;box box21&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;content&quot;&gt;web前端开发&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">h2&#123;  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.box&#123;  width: 500px;  height: 250px;  border: 1px solid #f00;  margin: auto;</span><br><span class="line">&#125;</span><br><span class="line">.content&#123;  width: 400px;  background: #ccc;  position: relative;  top: 50%;  transform: translateY(-50%);  margin: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>小结：垂直居中的方法还有很多，这里只例举了一部分。</p><h5 id="重要知识补充："><a href="#重要知识补充：" class="headerlink" title="重要知识补充："></a>重要知识补充：</h5><p>​    1、flex布局：Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为Flex布局。</p><p>​    Webkit内核的浏览器，必须加上-webkit前缀。</p><p>​    容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。</p><p>​    flex-direction属性决定主轴的方向（即项目的排列方向）</p><p>​    flex-wrap属性定义，如果一条轴线排不下，如何换行。</p><p>​    flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</p><p>​    justify-content属性定义了项目在主轴上的对齐方式。</p><p>​    align-items属性定义项目在交叉轴上如何对齐。</p><p>​    align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p><p>​    order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p><p>​    flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p><p>​    flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p><p>​    flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</p><p>​    flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</p><p>​    align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -css </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
