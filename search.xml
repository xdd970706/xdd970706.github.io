<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>深拷贝与浅拷贝</title>
      <link href="/2020/07/04/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
      <url>/2020/07/04/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>区别：假设B是复制的A的，如果修改A，B也变化说明是浅拷贝，如果B没变化，那就是深拷贝。</p><p>例子：</p><p>​    1.浅拷贝例子：</p><p>​        </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line"></span><br><span class="line"> b=a;</span><br><span class="line"> a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"> <span class="built_in">console</span>.log(a,b);</span><br></pre></td></tr></table></figure><p>​    在控制台我们看到的输出结果是，b数组与a数组的结果是相等的。那么原因是什么呢？首先我们要先引入基本数据类型与引用数据类型的概念。基本数据类型有：number，string，boolean，null，undefiened五类，（es6中新引入symbol）。引用数据类型（Object类）有常规名值对的无序对象｛a:1｝，数组[1,2,3,4],以及函数。这两种数据存储的方式是这样的：</p><p>a、基本类型，名值储存在栈内存中，所以当被复制时，在栈内存中会新开辟一个内存，所以修改被复制的值时对后者不会造成影响。当然let a=1，b=a；虽然b不受a影响，但是这也算不上深拷贝，因为深拷贝本身只针对较为复杂的object类型数据。</p><p>b、引用数据类型——名存在栈内存中，值存在于堆内存中，但是栈内存会提供一个引用的地址指向堆内存中的值；例如a，b两个数组，当b=a进行拷贝时，其实复制的是a的引用地址，而并非堆里的值，所以在修改a数组中的值时，b也会受影响。假如在堆内存中也开辟一个新的内存专门为b存放值，就像基本类型那样，起步就达到深拷贝的效果了。</p><a id="more"></a><p>​    <strong>如何去实现一个深拷贝呢</strong></p><p>​        1.递归去复制所有层级的属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> objClone = <span class="built_in">Array</span>.isArray(obj)?[]:&#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span>(obj &amp;&amp; <span class="keyword">typeof</span> obj===<span class="string">"object"</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">            <span class="keyword">if</span>(obj.hasOwnProperty(key))&#123;</span><br><span class="line">                <span class="comment">//判断ojb子元素是否为对象，如果是，递归复制</span></span><br><span class="line">                <span class="keyword">if</span>(obj[key]&amp;&amp;<span class="keyword">typeof</span> obj[key] ===<span class="string">"object"</span>)&#123;</span><br><span class="line">                    objClone[key] = deepClone(obj[key]);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//如果不是，简单复制</span></span><br><span class="line">                    objClone[key] = obj[key];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> objClone;</span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">let</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">    b=deepClone(a);</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a,b);</span><br></pre></td></tr></table></figure><p>​    附带说明：slice()方法（从已有的数组是显示选取的元素,返回一个数组）与concat()方法（连接两个或多个数组，并返回该数组副本）等方法，虽然这些方法能够实现数组的拷贝，并且改变前者的值不会影响后者，但是并不是深拷贝，深拷贝使拷贝对象各个层级的属性。</p><p>​    例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="number">0</span>,<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>],<span class="number">4</span>],</span><br><span class="line">        b=a.slice();</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">a[<span class="number">2</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a,b);</span><br></pre></td></tr></table></figure><p>​    根据控制的结果显示，b数组对象的一级属性确实是不受影响的，但是二级属性依然能够被改变，并没有成功深拷贝。第一层的属性确实深拷贝，拥有了独立的内存，但更深的属性却仍然公用了地址，所以才会造成上面的问题。</p><p>2.利用<strong>JSON对象</strong>的<strong>parse</strong>和<strong>stringify</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> _obj = <span class="built_in">JSON</span>.stringify(obj),</span><br><span class="line">        objClone = <span class="built_in">JSON</span>.parse(_obj);</span><br><span class="line">    <span class="keyword">return</span> objClone</span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">let</span> a=[<span class="number">0</span>,<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>],<span class="number">4</span>],</span><br><span class="line">    b=deepClone(a);</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">a[<span class="number">2</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a,b);</span><br></pre></td></tr></table></figure><p>​    附带说明，JSON.stringify与JSON.parse除了实现深拷贝，还能结合<strong>localStorage实现对象数组存储</strong>。</p><p>3.利用JQ的extend方法</p><p>​    <strong>.extend( [deep ], target, object1 [, objectN ] )</strong></p><p><strong>deep</strong>表示是否深拷贝，为true为深拷贝，为false，则为浅拷贝</p><p><strong>target</strong> <strong>Object</strong>类型 目标对象，其他对象的成员属性将被附加到该对象上。</p><p><strong>object1 objectN</strong>可选。 Object类型 第一个以及第N个被合并的对象。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="number">0</span>,<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>],<span class="number">4</span>],</span><br><span class="line">    b=$.extend(<span class="literal">true</span>,[],a);</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">a[<span class="number">2</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a,b);</span><br></pre></td></tr></table></figure><p>可以看到，效果与上面方法一样，只是需要依赖JQ库。</p><p>​    了解深拷贝与浅拷贝的大致原理与区别，那么在实际的开发中如何去运用呢？比如在前端渲染页面，需要从后台后台获取数据，在拿到这些数据我们并不知道各个功能需要怎么去使用，如果在前面直接修改了，同一个页面需要再一次用到原始数据就会出现问题，所以深拷贝的作用就体现出来了。</p><p>​    参考文章链接：</p><p>​    <a href="https://blog.csdn.net/weixin_41910848/article/details/82144671" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41910848/article/details/82144671</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flex弹性布局详细知识点整理</title>
      <link href="/2020/06/28/flex%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80%E8%AF%A6%E7%BB%86%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/"/>
      <url>/2020/06/28/flex%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80%E8%AF%A6%E7%BB%86%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 align="center">弹性盒布局（flexbox）</h3><hr><h4 id="一、弹性盒布局介绍"><a href="#一、弹性盒布局介绍" class="headerlink" title="一、弹性盒布局介绍"></a>一、弹性盒布局介绍</h4><p>1)弹性盒也叫伸缩布局盒模型  </p><p>它是<strong><span>css3</span></strong>引入的一种新的布局模式——<strong><span>flexbox</span></strong>布局，即伸缩布局盒模型，用来提供一个更有效的方式制定、调整和分布一个容器里的项目布局。相比之前的布局方式，更便利于开发。</p><p>2)主要思想是让容器有能力让其子项目能够改变其宽度、高度（甚至顺序），以最佳的方式填充可用空间（主要是为了适应所有类型的显示设备和屏幕大小）。flex容器会使子项目扩展来填充可用空间，或缩小他们以防止溢出容器。</p><p>3)专业术语解释</p><p>a、主轴-水平方向或者X轴</p><p>b、侧轴-垂直方向或者Y轴</p><p>c、伸缩容器（父元素）和伸缩项目（子元素）</p><a id="more"></a><h4 id="二、弹性盒属性"><a href="#二、弹性盒属性" class="headerlink" title="二、弹性盒属性"></a>二、弹性盒属性</h4><p>1)伸缩流方向 flex-direction 主要用来创建主轴，定义伸缩项目在伸缩容器中的方向</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">row</span>：从左向右</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">row-reverse</span>：与<span class="selector-tag">row</span>相反</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">column</span>：从上到下</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">column-reverse</span>：与<span class="selector-tag">column</span>相反</span><br></pre></td></tr></table></figure><p>2)主轴对齐 justify-content 主要用来定义伸缩项目沿主轴线的对齐方式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">flex-start</span>：伸缩项目向一行的起始位置靠齐</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">flex-end</span>：伸缩项目向一行的结束位置靠齐</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">center</span>：伸缩项目向一行的中间位置靠齐</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">space-between</span>：伸缩项目会平均的分布在行里</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">space-around</span>：伸缩项目会平均的分布在行里，两端保留一半的空间</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">space-evenly</span>：项目均匀分布，所有项目之间及项目与边框之间距离相等</span><br></pre></td></tr></table></figure><p>3)侧轴对齐 align-items 伸缩项目行在侧轴上的对齐方式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">flex-start</span>：伸缩项目在侧轴起点边的外边距 紧靠住 该行在侧轴起始边</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">flex-end</span>：伸缩项目在侧轴终点边的外边距 紧靠住 该行在侧轴终点边</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">center</span>：伸缩项目的外边距盒 在该行的侧轴上居中放置</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">baseline</span>：伸缩项目根据伸缩项目的基线对齐</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">stretch</span>：伸缩项目拉伸填充整个伸缩容器</span><br></pre></td></tr></table></figure><p>4)换行 flex-wrap</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nowrap</span> 不换行 默认值，不管超出还是不超出都不会换行</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">wrap</span> 换行 一旦伸缩项目超出伸缩容器，那么就会换行</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">wrap-reverse</span> 换行反向  主轴水平时，上下反向，主轴垂直时，左右反向</span><br></pre></td></tr></table></figure><p>5)伸缩流方向属性与换行属性缩写形式 flex-flow </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">flex-flow</span>：换行 伸缩方向; 两个值同时定义或者单独定义都生效，不分先后顺序</span><br></pre></td></tr></table></figure><p>6)align-self（加在子元素上）：主要用来设置单独伸缩项目在侧轴的对齐方式。注意点：align-self可以覆盖align-items</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">flex-start</span>：伸缩项目在侧轴起点边的外边距 紧靠住 该行在侧轴起始边；（元素位于容器的开头）</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">flex-end</span>：伸缩项目在侧轴终点边的外边距 紧靠住 该行在侧轴终点边；（元素位于容器的结尾）</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">center</span>：伸缩项目的外边距盒 在该行的侧轴上居中放置；（元素位于容器的中间）</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">stretch</span>：伸缩项目拉伸填充整个伸缩容器。（元素被拉伸以适应容器）</span><br></pre></td></tr></table></figure><p>7)堆栈伸缩行 align-content(行与行之间的对齐方式) 定义多个伸缩行的对齐方式；  往往要与换行同时应用，没有换行就不存在多行的情况</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">flex-start</span>：各行向伸缩容器的起点位置堆叠；（没有行距）</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">flex-end</span>：各行向伸缩容器的结束位置堆叠；（底部对其没有行距）</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">center</span>：各行向伸缩容器的中间位置堆叠；（居中没有行距）</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">space-between</span>：各行在伸缩容器中平均分布；（两端对齐，中间自动分配）</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">space-around</span>：各行在伸缩容器中平均分布，两端保留一半的空间；（自动分配距离）</span><br></pre></td></tr></table></figure><p>8)显示顺序 order （加在子元素上）默认状态是按照标准流的顺序排列，在<span>flexbox</span>模型里，可以通过order改变伸缩项目的顺序</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>、不定义<span class="selector-tag">order</span>的伸缩项目会排到前面</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">b</span>、<span class="selector-tag">order</span>：1； 排第一   <span class="selector-tag">order</span>：2； 排第二</span><br></pre></td></tr></table></figure><p>9)flex（设置在子元素上） 作用：可以让元素自动占用容器的可用空间，等比划分</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">flex</span><span class="selector-pseudo">:1</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">flex</span><span class="selector-pseudo">:2</span>;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>10)flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</span><br></pre></td></tr></table></figure><p>11)flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。</span><br><span class="line">负值对该属性无效。</span><br></pre></td></tr></table></figure><p>12)flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</span><br><span class="line"></span><br><span class="line">它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。不常用，还在不断变化中。</span><br></pre></td></tr></table></figure><p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -css3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html和css的一些方法-杂记4</title>
      <link href="/2020/06/22/%E6%97%A5%E5%B8%B8%E7%AC%94%E8%AE%B0-%E6%9D%82%E8%AE%B04/"/>
      <url>/2020/06/22/%E6%97%A5%E5%B8%B8%E7%AC%94%E8%AE%B0-%E6%9D%82%E8%AE%B04/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-透明的三种方式："><a href="#1-透明的三种方式：" class="headerlink" title="1.透明的三种方式："></a>1.透明的三种方式：</h4><p>​    1.display:none;</p><p>​    2.visibility:hidden;</p><p>​    3.opacity:0;</p><h4 id="2-清除浮动的方法"><a href="#2-清除浮动的方法" class="headerlink" title="2.清除浮动的方法:"></a>2.清除浮动的方法:</h4><p>​    1.额外标签法:在需要清除浮动的标签后面额外添加一个空白标签，并添加属性clear:both;</p><p>​    2.给父级添加overflow属性，触发BFC的方式，实现清除浮动效果，但是当内容增多时，不会导致自动换行</p><p>​    3.使用after伪元素清除浮动,IE6-7不支持,使用zoom:1,触发hasLayout;</p><p>​        .clearfix::after{</p><p>​            content:””;</p><p>​            display:block;</p><p>​            height:0;</p><p>​            clear:both;</p><p>​            visibility:hidden;</p><p>​        }</p><p>​        .clearfix{</p><p>​        zoom:1;</p><p>}    </p><p>​    注意是给需要清除浮动元素的父亲添加.clearfix;</p><p>​    4.</p><a id="more"></a><h4 id="3-表格的高级属性"><a href="#3-表格的高级属性" class="headerlink" title="3.表格的高级属性:"></a>3.表格的高级属性:</h4><p>​    1.<caption>表格的标题</caption></p><p>​    2.<th>表格表头的标题</th></p><p>​    3.<thead>表头</thead>、<tbody>表体</tbody>、<tfoot>表尾</tfoot></p><p>​    4.rules:表格添加分组线，属性值:”all””cols””rows””groups”</p><p>​    5.数据列分组:<colgroup span="value"></colgroup>,将表格分组</p><p>​    6.border-spacing:单元格与单元格之间的距离(css属性)</p><p>​    7.合并表格边框:border-collapse:collapse(css属性)</p><p>​    8.表格固定:table-layout:fixed(css属性)</p><p>​    9.无内容时表格的行为:visibility:hiddeng</p><h4 id="4-两种盒子模型"><a href="#4-两种盒子模型" class="headerlink" title="4.两种盒子模型"></a>4.两种盒子模型</h4><p>​    1.标准盒模型：border-box</p><p>​    2.怪异盒模型:content-box</p><h4 id="5-给文本与盒子添加阴影"><a href="#5-给文本与盒子添加阴影" class="headerlink" title="5.给文本与盒子添加阴影"></a>5.给文本与盒子添加阴影</h4><p>​    text-shadow:h-shadow v-shadow blur color;</p><p>​    box-shadow:向框添加一个或多个阴影。</p><h4 id="6-溢出文字用省略号显示"><a href="#6-溢出文字用省略号显示" class="headerlink" title="6.溢出文字用省略号显示"></a>6.溢出文字用省略号显示</h4><p>​    white-space:nowrap; 强制不换行，除了文本结束或者有换行标签</p><p>​    overflow:hidden;</p><p>​    text-overflow:ellipsis;</p><h4 id="7-粘性定位："><a href="#7-粘性定位：" class="headerlink" title="7.粘性定位："></a>7.粘性定位：</h4><p>​    position:sticky;</p><p>​    常用场景：吸顶效果                </p><h4 id="8-大小写转换"><a href="#8-大小写转换" class="headerlink" title="8.大小写转换"></a>8.大小写转换</h4><p>​    text-transform:lowercase(大写转小写)</p><p>​    text-transform:capitalize(首字母变大写)</p><p>​    text-transform:uppercase(小写转大写)</p><p>​    text-transform:font-variant(小型大写字体)</p><h4 id="9-网页优化相关"><a href="#9-网页优化相关" class="headerlink" title="9.网页优化相关"></a>9.网页优化相关</h4><p>​    1.在实际开发中要求结构、表现、行为分开</p><p>​    2.</p><h4 id="10-BFC"><a href="#10-BFC" class="headerlink" title="10.BFC"></a>10.BFC</h4><p>​    1.在BFC下，内部的Box会在垂直方向，一个接一个地放置。</p><p>​    2.Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠 </p><p>​    3.在BFC中，每一个盒子的左外边缘（margin-left）会触碰到容器（父元素）的左边缘(border-left)（对于从右到左的格式来说，则触碰到右边缘），即使存在浮动也是如此。</p><p>​    4.BFC的区域不会与float box重叠。例子：两个div，一个进行浮动，一个不浮动，这时浮动的元素会覆盖没有浮动的元素。给没有浮动的元素加overflow：hidden。就不会重合。/*–+ c’x</p><p>​    5.计算BFC的高度时，浮动元素也参与计算</p><p>​    如何触发 BFC</p><p>​    1.浮动元素，float 除 none 以外的值</p><p>​    2.position的值不为static或者relative</p><p>​    3.display为inline-block、table-cell、table-caption</p><p>​    4.overflow 除了 visible 以外的值</p><p>​    BFC的应用</p><p>​    1.解决浮动塌陷问题</p><p>​    2.自适应两栏布局（我们还可以运用BFC可以阻止元素被浮动元素覆盖的特性来实现自适应两栏布局。方法：给没有浮动的元素加overflow：hidden。）</p><p>​    3.解决设置margin值重叠问题。</p><p>​    总结：BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。它规定了元素与其他元素的关系和相互作用。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>h5知识点整理-杂记3</title>
      <link href="/2020/06/18/h5%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86-%E6%9D%82%E8%AE%B03/"/>
      <url>/2020/06/18/h5%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86-%E6%9D%82%E8%AE%B03/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-H5新元素"><a href="#1-H5新元素" class="headerlink" title="1.H5新元素"></a>1.H5新元素</h4><h5 id="1-canvas标签"><a href="#1-canvas标签" class="headerlink" title="1.canvas标签"></a>1.canvas标签</h5><p>1.定义：标签通过js来绘制图形，标签只是一个图形容器，标签中的任何元素将会显示在不支持该元素的浏览器中。</p><p>2.属性：fillStyle-设置或者返回用于填充绘画的颜色、渐变或模式；strokeStyle-设置或者返回用于笔触的颜色、渐变或模式；shadowColor-设置或返回用于阴影的颜色；shadowBlur-模糊级别；shadowOffsetX-阴影与形状的水平距离;…Y-垂直距离。</p><p>3.方法：createLinearGradient()–创建线性渐变；createPattern()–在指定的方向上重复指定的位置；createRadialGradient()–创建放射性/环状的渐变;addColorStop()–规定渐变对象中的颜色和停止位置。rect();fillRect();strokeRect();clearRect()—矩形相关方法.</p><h5 id="2-video-audio-embed-不支持修改样式-标签"><a href="#2-video-audio-embed-不支持修改样式-标签" class="headerlink" title="2.video/audio/embed(不支持修改样式)标签"></a>2.video/audio/embed(不支持修改样式)标签</h5><p>​    必需添加:controls=”controls”</p><p>​    资源格式：MP4 /ogg /webm;</p><p>​    preload:auto/none/;</p><p>​    封面：poster=””;</p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js笔记整理-杂记2</title>
      <link href="/2020/06/12/js%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86-%E6%9D%82%E8%AE%B02/"/>
      <url>/2020/06/12/js%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86-%E6%9D%82%E8%AE%B02/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-javaScript字符串："><a href="#1-javaScript字符串：" class="headerlink" title="1.javaScript字符串："></a>1.javaScript字符串：</h4><p>​    常用方法：</p><p>​        charAt(),返回指定索引位置的<strong>字符</strong>；</p><p>​        indexOf(),返回字符串中检索指定字符第一次出现的位置，如果不存在则返回-1；</p><p>​        slice()，提取字符串的片断，并在新的字符串中返回被提取的部分；</p><p>​        split()，把字符串分割为子字符串数组，并返回该数组，参数为分割的规则；</p><p>​        substr(),从起始索引号提取字符串中指定数目的字符;</p><p>​        substring(),提取字符串中两个指定索引号之间的字符;</p><p>​        toString(),返回字符串对象值;</p><p>​        trim(),移除字符串首尾的空白</p><a id="more"></a><h4 id="2-javaScript数据类型"><a href="#2-javaScript数据类型" class="headerlink" title="2.javaScript数据类型;"></a>2.javaScript数据类型;</h4><p>​    Symbol:es6新引入数据类型，表示独一无二的值；</p><p>​    数据转换：Number() 转换为数字， String() 转换为字符串， Boolean() 转化为布尔值；</p><p>​    NaN 的数据类型是 number；</p><p>​    null 的数据类型是 object；</p><p>​    未定义变量的数据类型为 undefined；</p><p>​    可以使用 constructor 属性来查看对象是否为数组 (包含字符串 “Array”)；</p><p>​    你可以使用 constructor 属性来查看对象是否为日期 (包含字符串 “Date”)；</p><p>​    全局方法 <strong>Number()</strong> 可以将字符串转换为数字。</p><p>​    字符串包含数字(如 “3.14”) 转换为数字 (如 3.14)，空字符串转换为 0，其他的字符串会转换为 NaN (不是个数字)；</p><p>​    当 JavaScript 尝试操作一个 “错误” 的数据类型时，会自动转换为 “正确” 的数据类型， + null返回5null 转换为 0，”5”-1返回 4”5”转换为5；</p><p>​    null 和 undefined 的值相等，但类型不等；</p><h4 id="3-javaScript变量提升与严格模式："><a href="#3-javaScript变量提升与严格模式：" class="headerlink" title="3.javaScript变量提升与严格模式："></a>3.javaScript变量提升与严格模式：</h4><p>​    变量提升：函数声明和变量声明总是会被解释器悄悄地被”提升”到方法体的最顶部；</p><p>​    JavaScript 中，函数及变量的声明都将被提升到函数的最顶部，变量可以在使用后声明，也就是变量可以先使用再声明；</p><p>​    JavaScript 只有声明的变量会提升，初始化的不会；</p><p>​    严格模式通过在脚本或函数的头部添加 “use strict”; 表达式来声明，目的是指定代码在严格条件下执行，严格模式下不能使用未声明的变量；</p><h4 id="4-javaScript-this关键字"><a href="#4-javaScript-this关键字" class="headerlink" title="4.javaScript this关键字:"></a>4.javaScript this关键字:</h4><p>​    面向对象中this表示当前对象的一个引用，但在 JavaScript 中 this 不是固定不变的，它会随着执行环境的改变而改变；</p><p>​    在方法中，this 表示该方法所属的对象；如果单独使用，this 表示全局对象；在函数中，this 表示全局对象；在函数中，在严格模式下，this 是未定义的(undefined)；在事件中，this 表示接收事件的元素；类似 call() 和 apply() 方法可以将 this 引用到任何对象；</p><h4 id="5-javaScript中的-let和const"><a href="#5-javaScript中的-let和const" class="headerlink" title="5.javaScript中的 let和const"></a>5.javaScript中的 let和const</h4><p>​    ES6新增的两个关键字，let声明的变量只在let命令所在的代码块内生效。</p><p>​    const声明的变量只在let命令所在的代码块内有效；const声明一个只读的常量，一旦声明，常量的值就不能改变；在 ES6 之前，JavaScript 只有两种作用域： <strong>全局变量</strong> 与 <strong>函数内的局部变量</strong>。</p><p>​    全局变量声明方式：在函数外声明或者在函数内未使用var关键字进行声明。</p><p>​    JavaScript 块级作用域：使用 var 关键字声明的变量不具备块级作用域的特性，它在 {} 外依然能被访问到，在ES6之前，是没有块级作用域的概念的，ES6可以使用let关键字来实现块级作用域。let声明的变量只在let命令所在的代码块{}内生效，在{}之外不能访问。</p><p>​    使用 <strong>var</strong> 关键字声明的变量在任何地方都可以修改；</p><p>​    在相同的作用域或块级作用域中，不能使用 <strong>let</strong> 关键字来重置 <strong>var</strong> 关键字声明的变量；</p><p>​    在相同的作用域或块级作用域中，不能使用 <strong>let</strong> 关键字来重置 <strong>let</strong> 关键字声明的变量；</p><p>​    在相同的作用域或块级作用域中，不能使用 <strong>var</strong> 关键字来重置 <strong>let</strong> 关键字声明的变量；</p><p>​    <strong>let</strong> 关键字在不同作用域，或不同块级作用域中是可以重新声明赋值的；</p><p>​    <strong>let</strong> 关键字定义的变量则不可以在使用后声明，也就是变量需要先声明再使用，<strong>const</strong>也是；</p><p>​    <strong>const</strong> 用于声明一个或多个常量，声明时必须进行初始化，且初始化后值不可再修改；</p><p>​    <strong>const</strong>定义常量与使用<strong>let</strong> 定义的变量相似:二者都是块级作用域，都不能和它所在作用域内的其他变量或函数拥有相同的名称。他们的区别：<strong>const</strong>声明的常量必须初始化，而<strong>let</strong>声明的变量不用，<strong>const</strong> 定义常量的值不能通过再赋值修改，也不能再次声明。而 <strong>let</strong> 定义的变量值可以修改。</p><p>​    <strong>const 的本质</strong>: <strong>const 定义的变量并非常量，并非不可变，它定义了一个常量引用一个值</strong>。使用 const 定义的对象或者数组，其实是可变的，例如：</p><p>​        const car = {type:”Fiat”, model:”500”, color:”white”};  </p><p>​        car.color = “red”;  </p><p>​        car.owner = “Johnson”;</p><p>​        例子2：</p><p>​        const cars = [“Saab”, “Volvo”, “BMW”];</p><p>​        cars[0] = “Toyota”;</p><p>​        cars.push(“Audi”);</p><p>​        但是我们<strong>不能对常量数组重新赋值</strong>。</p><h4 id="6、JavaScript-JSON"><a href="#6、JavaScript-JSON" class="headerlink" title="6、JavaScript-JSON"></a>6、JavaScript-JSON</h4><p>​    JSON是用于存储和传输数据的格式,通常用于服务端向网页传递数据,json使用js语法，但是JSON格式仅仅是一个文本，文本可以被任何编程语言读取及作为数据格式传递。 </p><p>​    JOSN字符串转换为javascript对象：创建JavaScript 字符串，字符串为 JSON 格式的数据，使用 JavaScript 内置函数 JSON.parse() 将字符串转换为 JavaScript 对象。JSON.stringify() 方法用于将 JavaScript 值转换为 JSON 字符串。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css及css3笔记整理-杂记1</title>
      <link href="/2020/06/10/css%E5%8F%8Acss3%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86-%E6%9D%82%E8%AE%B0/"/>
      <url>/2020/06/10/css%E5%8F%8Acss3%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86-%E6%9D%82%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1、px、em、rem区别"><a href="#1、px、em、rem区别" class="headerlink" title="1、px、em、rem区别"></a>1、px、em、rem区别</h4><h5 id="1、px：px像素）。相对长度单位。像素px是相对于显示器屏幕分辨率而言的。"><a href="#1、px：px像素）。相对长度单位。像素px是相对于显示器屏幕分辨率而言的。" class="headerlink" title="1、px：px像素）。相对长度单位。像素px是相对于显示器屏幕分辨率而言的。"></a>1、px：px像素）。相对长度单位。像素px是相对于显示器屏幕分辨率而言的。</h5><h5 id="2、em：em是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。"><a href="#2、em：em是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。" class="headerlink" title="2、em：em是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。"></a>2、em：em是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。</h5><h6 id="1、补充：em的值不是固定；em会继承父级元素的字体大小。"><a href="#1、补充：em的值不是固定；em会继承父级元素的字体大小。" class="headerlink" title="1、补充：em的值不是固定；em会继承父级元素的字体大小。"></a>1、补充：<strong>em的值不是固定</strong>；<strong>em会继承父级元素的字体大小</strong>。</h6><h6 id="2、注意：任意浏览器的默认字体高都是16px。所有未经调整的浏览器都符合-1em-16px。那么12px-0-75em-10px-0-625em。为了简化font-size的换算，需要在css中的body选择器中声明Font-size-62-5-，这就使em值变为-16px-62-5-10px-这样12px-1-2em-10px-1em-也就是说只需要将你的原来的px数值除以10，然后换上em作为单位就行了。所以在写css时，body选择器中声明Font-size-62-5-，将你的原来的px数值除以10，然后换上em作为单位，重新计算那些被放大的字体的em数值。避免字体大小的重复声明。但也要避免1-2-1-2-1-44的现象。比如说你在-content中声明了字体大小为1-2em，那么在声明p的字体大小时就只能是1em，而不是1-2em-因为此em非彼em，它因继承-content的字体高而变为了1em-12px。"><a href="#2、注意：任意浏览器的默认字体高都是16px。所有未经调整的浏览器都符合-1em-16px。那么12px-0-75em-10px-0-625em。为了简化font-size的换算，需要在css中的body选择器中声明Font-size-62-5-，这就使em值变为-16px-62-5-10px-这样12px-1-2em-10px-1em-也就是说只需要将你的原来的px数值除以10，然后换上em作为单位就行了。所以在写css时，body选择器中声明Font-size-62-5-，将你的原来的px数值除以10，然后换上em作为单位，重新计算那些被放大的字体的em数值。避免字体大小的重复声明。但也要避免1-2-1-2-1-44的现象。比如说你在-content中声明了字体大小为1-2em，那么在声明p的字体大小时就只能是1em，而不是1-2em-因为此em非彼em，它因继承-content的字体高而变为了1em-12px。" class="headerlink" title="2、注意：任意浏览器的默认字体高都是16px。所有未经调整的浏览器都符合: 1em=16px。那么12px=0.75em,10px=0.625em。为了简化font-size的换算，需要在css中的body选择器中声明Font-size=62.5%，这就使em值变为 16px*62.5%=10px, 这样12px=1.2em, 10px=1em, 也就是说只需要将你的原来的px数值除以10，然后换上em作为单位就行了。所以在写css时，body选择器中声明Font-size=62.5%，将你的原来的px数值除以10，然后换上em作为单位，重新计算那些被放大的字体的em数值。避免字体大小的重复声明。但也要避免1.2 * 1.2= 1.44的现象。比如说你在#content中声明了字体大小为1.2em，那么在声明p的字体大小时就只能是1em，而不是1.2em, 因为此em非彼em，它因继承#content的字体高而变为了1em=12px。"></a>2、注意：任意浏览器的默认字体高都是16px。所有未经调整的浏览器都符合: 1em=16px。那么12px=0.75em,10px=0.625em。为了简化font-size的换算，需要在css中的body选择器中声明Font-size=62.5%，这就使em值变为 16px*62.5%=10px, 这样12px=1.2em, 10px=1em, 也就是说只需要将你的原来的px数值除以10，然后换上em作为单位就行了。所以在写css时，body选择器中声明Font-size=62.5%，将你的原来的px数值除以10，然后换上em作为单位，重新计算那些被放大的字体的em数值。避免字体大小的重复声明。但也要避免1.2 * 1.2= 1.44的现象。比如说你在#content中声明了字体大小为1.2em，那么在声明p的字体大小时就只能是1em，而不是1.2em, 因为此em非彼em，它因<strong>继承#content的字体</strong>高而变为了1em=12px。</h6><a id="more"></a><h5 id="3、rem：rem是CSS3新增的一个相对单位（root-em，根em），这个单位引起了广泛关注。这个单位与em有什么区别呢？区别在于使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素。这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。目前，除了IE8及更早版本外，所有浏览器均已支持rem。（rem能等比适配所有屏幕，根据变化html的字体大小来控制rem的大小）"><a href="#3、rem：rem是CSS3新增的一个相对单位（root-em，根em），这个单位引起了广泛关注。这个单位与em有什么区别呢？区别在于使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素。这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。目前，除了IE8及更早版本外，所有浏览器均已支持rem。（rem能等比适配所有屏幕，根据变化html的字体大小来控制rem的大小）" class="headerlink" title="3、rem：rem是CSS3新增的一个相对单位（root em，根em），这个单位引起了广泛关注。这个单位与em有什么区别呢？区别在于使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素。这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。目前，除了IE8及更早版本外，所有浏览器均已支持rem。（rem能等比适配所有屏幕，根据变化html的字体大小来控制rem的大小）"></a>3、rem：rem是CSS3新增的一个相对单位（root em，根em），这个单位引起了广泛关注。这个单位与em有什么区别呢？区别在于使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素。这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。目前，除了IE8及更早版本外，所有浏览器均已支持rem。（rem能等比适配所有屏幕，根据变化html的字体大小来控制rem的大小）</h5><h6 id="1、补充：对于不支持它的浏览器，应对方法也很简单，就是多写一个绝对单位的声明。这些浏览器会忽略用rem设定的字体大小。"><a href="#1、补充：对于不支持它的浏览器，应对方法也很简单，就是多写一个绝对单位的声明。这些浏览器会忽略用rem设定的字体大小。" class="headerlink" title="1、补充：对于不支持它的浏览器，应对方法也很简单，就是多写一个绝对单位的声明。这些浏览器会忽略用rem设定的字体大小。"></a>1、补充：对于不支持它的浏览器，应对方法也很简单，就是多写一个绝对单位的声明。这些浏览器会忽略用rem设定的字体大小。</h6><h5 id="4、补充："><a href="#4、补充：" class="headerlink" title="4、补充："></a>4、补充：</h5><p>​        1.vw,vh—–让元素可以像百分比一样自动伸缩。</p><p>​            vw—–将屏幕的宽度划分为100vw</p><p>​            vh——将屏幕的高度划分为100vh</p><p>​        2.使用vw来适配rem，vw可以根据屏幕大小的变化自适应，可以把html的font-size设置成vw</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">font-size</span>:<span class="number">14px</span>; <span class="attribute">font-size</span>:.<span class="number">875rem</span>;&#125;</span><br></pre></td></tr></table></figure><h5 id="4、小结：px-与-rem-的选择："><a href="#4、小结：px-与-rem-的选择：" class="headerlink" title="4、小结：px 与 rem 的选择："></a>4、小结：px 与 rem 的选择：</h5><p>​            对于只需要适配少部分手机设备，且分辨率对页面影响不大的，使用px即可 。</p><p>​            对于需要适配各种移动设备，使用rem，例如只需要适配iPhone和iPad等分辨率差别比较挺大的设备。</p><h4 id="2、CSS3动画"><a href="#2、CSS3动画" class="headerlink" title="2、CSS3动画"></a>2、CSS3动画</h4><h6 id="transform-转换方式"><a href="#transform-转换方式" class="headerlink" title="transform:转换方式"></a>transform:转换方式</h6><p>​        转换方式：</p><p>​            translate()，根据X,Y轴位置给定的参数，从当前元素的位置移动</p><p>​            rotate(),给定一个度数顺时针旋转元素</p><p>​            scale(),压缩和拉伸，宽度与高度与其原始大小按比例变化</p><p>​            skew()，X,Y轴倾斜的角度</p><h6 id="transition-过渡"><a href="#transition-过渡" class="headerlink" title="transition:过渡"></a>transition:过渡</h6><p>​            transition-property:过渡的css属性名称</p><p>​            transition-duration:过渡效果花费的时间</p><p>​            transition-timing-function:过渡效果的曲线</p><p>​            transition-delay:过渡效果是否延时执行，默认为0，不延时</p><h6 id="动画：-keyframes：规则是创建动画；规则内指定一个css样式和动画将逐步从目前的样式更改为新的样式；创建动画并将其绑定到一个选择器，否则不会有任何效果；animation-规定动画名称，动画持续时间。"><a href="#动画：-keyframes：规则是创建动画；规则内指定一个css样式和动画将逐步从目前的样式更改为新的样式；创建动画并将其绑定到一个选择器，否则不会有任何效果；animation-规定动画名称，动画持续时间。" class="headerlink" title="动画：@keyframes：规则是创建动画；规则内指定一个css样式和动画将逐步从目前的样式更改为新的样式；创建动画并将其绑定到一个选择器，否则不会有任何效果；animation:规定动画名称，动画持续时间。"></a>动画：@keyframes：规则是创建动画；规则内指定一个css样式和动画将逐步从目前的样式更改为新的样式；创建动画并将其绑定到一个选择器，否则不会有任何效果；animation:规定动画名称，动画持续时间。</h6><h6 id="perspective：景深"><a href="#perspective：景深" class="headerlink" title="perspective：景深"></a>perspective：景深</h6><h6 id="transform-style-preserve-3d-3-D效果"><a href="#transform-style-preserve-3d-3-D效果" class="headerlink" title="transform-style:preserve-3d;3    D效果"></a>transform-style:preserve-3d;3    D效果</h6><h4 id="3、多列："><a href="#3、多列：" class="headerlink" title="3、多列："></a>3、多列：</h4><p>​    将文本内容设计成像报纸一样的多列布局。</p><p>​    css3的多列属性：</p><p>​        column-count：指定需要分割的列数</p><p>​        column-gap:指定列与列之间的间隙</p><p>​        column-fill：如何填充</p><p>​        column-rule-style:指定列与列之间的边框样式</p><p>​        column-rule-width:指定两列的边框厚度</p><p>​        column-rule-color:指定两列的边框颜色</p><p>​        column-rule:所有属性的简写</p><p>​        column-width:指定列的宽度</p><p>​        column-span：指定元素跨越的列</p><h4 id="4、css3框大小"><a href="#4、css3框大小" class="headerlink" title="4、css3框大小"></a>4、css3框大小</h4><p>​    CSS3 box-sizing 属性可以设置 width 和 height 属性中包含了 padding(内边距) 和 border(边框)，</p><p>​    默认情况下，元素的宽度与高度计算方式如下：</p><p>​    <strong>width(宽) + padding(内边距) + border(边框) = 元素实际宽度</strong></p><p>​    <strong>height(高) + padding(内边距) + border(边框) = 元素实际高度</strong></p><p>​    这就意味着我们在设置元素的 width/height 时，元素真实展示的高度与宽度会更大(因为元素的边框与内边距也会计算在 width/height 中)。</p><p>​    CSS3 box-sizing 属性在一个元素的 width 和 height 中包含 padding(内边距) 和 border(边框)。</p><p>如果在元素上设置了 box-sizing: border-box; 则 padding(内边距) 和 border(边框) 也包含在 width 和 height 中。</p><h4 id="5、弹性盒子-Flex-Box"><a href="#5、弹性盒子-Flex-Box" class="headerlink" title="5、弹性盒子(Flex Box)"></a>5、弹性盒子(Flex Box)</h4><p>​    CSS3 弹性盒（ Flexible Box 或 flexbox），是一种当页面需要适应不同的屏幕大小以及设备类型时确保元素拥有恰当的行为的布局方式。</p><p>引入弹性盒布局模型的目的是提供一种更加有效的方式来对一个容器中的子元素进行排列、对齐和分配空白空间。</p><p>​    弹性盒子由弹性容器(Flex container)和弹性子元素(Flex item)组成。</p><p>​    弹性容器通过设置 display 属性的值为 flex 或 inline-flex将其定义为弹性容器。</p><p>​    弹性容器内包含了一个或多个弹性子元素。</p><p>​    <strong>注意：</strong> 弹性容器外及弹性子元素内是正常渲染的。弹性盒子只定义了弹性子元素如何在弹性容器内布局。</p><p>​                弹性子元素通常在弹性盒子内一行显示。默认情况每个容器只有一行。</p><p>​    使用弹性盒子，居中变的很简单，只想要设置 <code>margin: auto;</code> 可以使得弹性子元素在两上轴方向上完全居中:</p><p>​    align-content:用于修改 flex-wrap 属性的行为。类似于 align-items, <strong>但它不是设置弹性子元素的对齐，而是设置各个行的对齐。</strong></p><p>​    align-self 属性用于设置<strong>弹性元素自身在侧轴（纵轴）方向上的对齐方式</strong>。</p><h4 id="6、css3多媒体查询"><a href="#6、css3多媒体查询" class="headerlink" title="6、css3多媒体查询"></a>6、css3多媒体查询</h4><p>​    CSS3 的多媒体查询继承了 CSS2 多媒体类型的所有思想： 取代了查找设备的类型，CSS3 根据设置自适应显示。</p><p>​    媒体查询可用于检测很多事情，例如：</p><ul><li><p>viewport(视窗) 的宽度与高度</p></li><li><p>设备的宽度与高度</p></li><li><p>朝向 (智能手机横屏，竖屏) 。</p></li><li><p>分辨率</p><p>多媒体查询由多种媒体组成，可以包含一个或多个表达式，表达式根据条件是否成立返回 true 或 false。</p><p>如果指定的多媒体类型匹配设备类型则查询结果返回 true，文档会在匹配的设备上显示指定样式效果。</p><p>除非你使用了 not 或 only 操作符，否则所有的样式会适应在所有设备上显示效果。</p></li><li><p><strong>not:</strong> not是用来排除掉某些特定的设备的，比如 @media not print（非打印设备）。</p></li><li><p><strong>only:</strong> 用来定某种特别的媒体类型。对于支持Media Queries的移动设备来说，如果存在only关键字，移动设备的Web浏览器会忽略only关键字并直接根据后面的表达式应用样式文件。对于不支持Media Queries的设备但能够读取Media Type类型的Web浏览器，遇到only关键字时会忽略这个样式文件。</p></li><li><p><strong>all:</strong> 所有设备，这个应该经常看到。</p></li></ul><p>以下实例中在屏幕可视窗口尺寸小于 480 像素的设备上修改背景颜色:</p><p>@media screen and (min-width: 480px) {    body {        background-color: lightgreen;    } } </p>]]></content>
      
      
      <categories>
          
          <category> 笔记整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -css3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解浏览器的工作原理</title>
      <link href="/2020/06/09/%E7%90%86%E8%A7%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
      <url>/2020/06/09/%E7%90%86%E8%A7%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1、浏览器的结构"><a href="#1、浏览器的结构" class="headerlink" title="1、浏览器的结构"></a>1、浏览器的结构</h4><p>​    <strong>进程：</strong>进程（process）是程序的一次执行过程，是一个动态概念，是程序在执行过程中分配和管理资源的基本单位</p><p>​    <strong>线程：</strong>线程（thread）是CPU调度和分派的基本单位，它可与同属一个进程的其他的线程共享进程所拥有的全部资源。</p><p>​    所以，进程可以理解成正在执行的应用程序，而线程呢，可以理解成我们应用程序中的代码的执行器。而他们的关系可想而知，<strong>线程是跑在进程里面的</strong>，一个进程里面可能有一个或者多个线程，而一个线程，只能隶属于一个进程。</p><p>​    浏览器属于一个应用程序，而应用程序的一次执行，可以理解为计算机启动了一个<strong>进程</strong>，进程启动后，CPU会给该进程分配相应的内存空间，当我们的进程得到了内存之后，就可以使用<strong>线程</strong>进行资源调度，进而完成我们应用程序的功能</p><p>​    而在应用程序中，为了满足功能的需要，启动的进程会创建另外的新的进程来处理其他任务，这些创建出来的<strong>新的进程拥有全新的独立的内存空间</strong>，不能与原来的进程内向内存，如果这些进程之间需要通信，可以通过<strong>IPC机制（Inter Process Communication）</strong>来进行。很多应用程序都会采取这种多进程的方式来工作，<strong>因为进程和进程之间是互相独立的它们互不影响</strong>，也就是说，当其中一个进程挂掉了之后，不会影响到其他进程的执行，只需要重启挂掉的进程就可以恢复运行。</p><a id="more"></a><h4 id="2、浏览器的多进程架构"><a href="#2、浏览器的多进程架构" class="headerlink" title="2、浏览器的多进程架构"></a>2、浏览器的多进程架构</h4><p>​    应用程序的架构可分为单进程多线程的应用程序与使用IPC通信的多进程应用程序。</p><p>​    不同的浏览器使用不同的架构，下面主要以Chrome为例，介绍浏览器的多进程架构。</p><p>​    在Chrome中，主要的进程有4个：</p><ul><li><strong>浏览器进程 (Browser Process)</strong>：负责浏览器的TAB的前进、后退、地址栏、书签栏的工作和处理浏览器的一些不可见的底层操作，比如网络请求和文件访问。</li><li><strong>渲染进程 (Renderer Process)</strong>：负责一个Tab内的显示相关的工作，也称渲染引擎。</li><li><strong>插件进程 (Plugin Process)</strong>：负责控制网页使用到的插件。</li><li><strong>GPU进程 (GPU Process)</strong>：负责处理整个应用程序的GPU任务。</li></ul><h4 id="3、4个进程之间的关系"><a href="#3、4个进程之间的关系" class="headerlink" title="3、4个进程之间的关系"></a>3、4个进程之间的关系</h4><p>​    首先，当我们是要浏览一个网页，我们会在浏览器的地址栏里输入URL，这个时候<strong>Browser Process</strong>会向这个URL发送请求，获取这个URL的HTML内容，然后将HTML交给<strong>Renderer Process</strong>，<strong>Renderer Process</strong>解析HTML内容，解析遇到需要请求网络的资源又返回来交给<strong>Browser Process</strong>进行加载，同时通知<strong>BrowserProcess</strong>，需要<strong>Plugin Process</strong>加载插件资源，执行插件代码。解析完成后，<strong>Renderer Process</strong>计算得到图像帧，并将这些图像帧交给<strong>GPU Process</strong>，<strong>GPU Process</strong>将其转化为图像显示屏幕。</p><h4 id="4、多进程架构的好处"><a href="#4、多进程架构的好处" class="headerlink" title="4、多进程架构的好处"></a>4、多进程架构的好处</h4><p>​    第一，更高的容错性。当今WEB应用中，HTML，JavaScript和CSS日益复杂，这些跑在渲染引擎的代码，频繁的出现BUG，而有些BUG会直接导致渲染引擎崩溃，多进程架构使得每一个渲染引擎运行在各自的进程中，相互之间不受影响，也就是说，当其中一个页面崩溃挂掉之后，其他页面还可以正常的运行不收影响。</p><p>​    第二，更高的安全性和沙盒性（sanboxing）。渲染引擎会经常性的在网络上遇到不可信、甚至是恶意的代码，它们会利用这些漏洞在你的电脑上安装恶意的软件，针对这一问题，浏览器对不同进程限制了不同的权限，并为其提供沙盒运行环境，使其更安全更可靠</p><p>​    第三，更高的响应速度。在单进程的架构中，各个任务相互竞争抢夺CPU资源，使得浏览器响应速度变慢，而多进程架构正好规避了这一缺点。</p><h4 id="5、导航过程都发生了什么"><a href="#5、导航过程都发生了什么" class="headerlink" title="5、导航过程都发生了什么"></a>5、导航过程都发生了什么</h4><p>​    <strong>1、网页加载过程</strong></p><p>​    之前我们我们提到，tab以外的大部分工作由浏览器进程<code>Browser Process</code>负责，针对工作的不同，Browser Process 划分出不同的工作线程：</p><ul><li><p><strong>UI thread</strong>：控制浏览器上的按钮及输入框；</p></li><li><p><strong>network thread</strong>：处理网络请求，从网上获取数据；</p></li><li><p><strong>storage thread</strong>：控制文件等的访问；</p><p><strong>2、过程</strong></p><p>​    1、处理输入，<strong>UI thread</strong>会判断输入的内容是搜索关键词（search query）还是URL，如果是搜索关键词，跳转至默认搜索引擎对应都搜索URL，如果输入的内容是URL，则开始请求URL。</p><p>​    2、开始导航，<strong>UI thread</strong>将关键词搜索对应的URL或输入的URL交给网络线程<strong>Network thread</strong>，此时UI线程使Tab前的图标展示为加载中状态，然后网络进程进行一系列诸如DNS寻址，建立TLS连接等操作进行资源请求，如果收到服务器的301重定向响应，它就会告知UI线程进行重定向然后它会再次发起一个新的网络请求。</p><p>​    3、读取响应，<strong>network thread</strong>接收到服务器的响应后，开始解析HTTP响应报文，然后根据响应头中的<strong>Content-Type</strong>字段来确定响应主体的媒体类型（MIME Type），如果媒体类型是一个HTML文件，则将响应数据交给渲染进程（renderer process）来进行下一步的工作，如果是 zip 文件或者其它文件，会把相关数据传输给下载管理器。</p><p>与此同时，浏览器会进行 Safe Browsing 安全检查，如果域名或者请求内容匹配到已知的恶意站点，network thread 会展示一个警告页。除此之外，网络线程还会做 CORB（Cross Origin Read Blocking）检查来确定那些敏感的跨站数据不会被发送至渲染进程。</p><p>​    4、查找渲染进程，各种检查完毕以后，<strong>network thread</strong> 确信浏览器可以导航到请求网页，<strong>network thread</strong> 会通知 <strong>UI thread</strong> 数据已经准备好，<strong>UI thread</strong> 会查找到一个 <strong>renderer process</strong> 进行网页的渲染。</p><p>​    浏览器为了对查找渲染进程这一步骤进行优化，考虑到网络请求获取响应需要时间，所以在第二步开始，浏览器已经预先查找和启动了一个渲染进程，如果中间步骤一切顺利，当 <strong>network thread</strong> 接收到数据时，渲染进程已经准备好了，但是如果遇到重定向，这个准备好的渲染进程也许就不可用了，这个时候会重新启动一个渲染进程。</p><p>​    5、提交导航，到了这一步，数据和渲染进程都准备好了，<strong>Browser Process</strong> 会向 <strong>Renderer Process</strong>发送IPC消息来确认导航，此时，浏览器进程将准备好的数据发送给渲染进程，渲染进程接收到数据之后，又发送IPC消息给浏览器进程，告诉浏览器进程导航已经提交了，页面开始加载。</p><p>​    6、初始化加载完成，当导航提交完成后，渲染进程开始加载资源及渲染页面（详细内容下文介绍），当页面渲染完成后（页面及内部的iframe都触发了onload事件），会向浏览器进程发送IPC消息，告知浏览器进程，这个时候UI thread会停止展示tab中的加载中图标。</p></li></ul><h4 id="6、网页渲染原理"><a href="#6、网页渲染原理" class="headerlink" title="6、网页渲染原理"></a>6、网页渲染原理</h4><p>​    导航过程完成之后，浏览器进程把数据交给了渲染进程，渲染进程负责tab内的所有事情，核心目的就是将HTML/CSS/JS代码，转化为用户可进行交互的web页面。渲染进程中，包含线程分别是：</p><ul><li><p>一个主线程（main thread）</p></li><li><p>多个工作线程（work thread）</p></li><li><p>一个合成器线程（compositor thread）</p></li><li><p>多个光栅化线程（raster thread）</p><p><strong>过程：</strong></p><p>​    1、<strong>构建DOM</strong>，当渲染进程接受到导航的确认信息后，开始接受来自浏览器进程的数据，这个时候，主线程会解析数据转化为DOM（Document Object Model）对象。DOM为WEB开发人员通过JavaScript与网页进行交互的数据结构及API。</p><p>​    2、<strong>子资源加载</strong>，在构建DOM的过程中，会解析到图片、CSS、JavaScript脚本等资源，这些资源是需要从网络或者缓存中获取的，主线程在构建DOM过程中如果遇到了这些资源，逐一发起请求去获取，而为了提升效率，浏览器也会运行预加载扫描（preload scanner）程序，如果HTML中存在<code>img</code>、<code>link</code>等标签，预加载扫描程序会把这些请求传递给<code>Browser Process</code>的network thread进行资源下载</p><p>3、<strong>JavaScript的下载与执行</strong>，构建DOM过程中，如果遇到<code>&lt;script&gt;</code>标签，渲染引擎会停止对HTML的解析，而去加载执行JS代码，原因在于JS代码可能会改变DOM的结构（比如执行<code>document.write()</code>等API）。不过开发者其实也有多种方式来告知浏览器应对如何应对某个资源，比如说如果在<code>&lt;script&gt;</code> 标签上添加了 <code>async</code> 或 <code>defer</code> 等属性，浏览器会异步的加载和执行JS代码，而不会阻塞渲染。</p><p>4、<strong>样式计算 - Style calculation</strong>，DOM树只是我们页面的结构，我们要知道页面长什么样子，我们还需要知道DOM的每一个节点的样式。主线程在解析页面时，遇到<code>&lt;style&gt;</code>标签或者<code>&lt;link&gt;</code>标签的CSS资源，会加载CSS代码，根据CSS代码确定每个DOM节点的计算样式（computed style）。计算样式是主线程根据CSS样式选择器（CSS selectors）计算出的每个DOM元素应该具备的具体样式，即使你的页面没有设置任何自定义的样式，浏览器也会提供其默认的样式。</p><p>5、<strong>布局 - Layout</strong>，DOM树和计算样式完成后，我们还需要知道每一个节点在页面上的位置，布局（Layout）其实就是找到所有元素的几何关系的过程。主线程会遍历DOM 及相关元素的计算样式，构建出包含每个元素的页面坐标信息及盒子模型大小的布局树（Render Tree），遍历过程中，会跳过隐藏的元素（display: none），另外，伪元素虽然在DOM上不可见，但是在布局树上是可见的。</p><p>6、<strong>绘制 - Paint</strong>，布局 layout 之后，我们知道了不同元素的结构，样式，几何关系，我们要绘制出一个页面，我们要需要知道每个元素的绘制先后顺序，在绘制阶段，主线程会遍历布局树（layout tree），生成一系列的绘画记录（paint records）。绘画记录可以看做是记录各元素绘制先后顺序的笔记。</p><p>7、<strong>合成 - Compositing</strong>，文档结构、元素的样式、元素的几何关系、绘画顺序，这些信息我们都有了，这个时候如果要绘制一个页面，我们需要做的是把这些信息转化为显示器中的像素，这个转化的过程，叫做<strong>光栅化（rasterizing）</strong>。那我们要绘制一个页面，最简单的做法是只光栅化视口内（viewport）的网页内容，如果用户进行了页面滚动，就移动光栅帧（rastered frame）并且光栅化更多的内容以补上页面缺失的部分</p></li></ul><h4 id="7、浏览器对事件的处理"><a href="#7、浏览器对事件的处理" class="headerlink" title="7、浏览器对事件的处理"></a>7、浏览器对事件的处理</h4><p>​    当页面渲染完毕以后，TAB内已经显示出了可交互的WEB页面，用户可以进行移动鼠标、点击页面等操作了。</p><p>​    <strong>以点击事件（click event）为例</strong>，让鼠标点击页面时候，首先接受到事件信息的是<strong>Browser Process</strong>，但是<strong>Browser Process</strong>只知道事件发生的类型和发生的位置，具体怎么对这个点击事件进行处理，还是由Tab内的<strong>Renderer Process</strong>进行的。<strong>Browser Process</strong>接受到事件后，随后便把事件的信息传递给了渲染进程，渲染进程会找到根据事件发生的坐标，找到目标对象（target），并且运行这个目标对象的点击事件绑定的监听函数（listener）。</p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>​    浏览器的多进程架构，根据不同的功能划分了不同的进程，进程内不同的使命划分了不同的线程，当用户开始浏览网页时候，浏览器进程进行处理输入、开始导航请求数据、请求响应数据，查找新建渲染进程，提交导航，之后渲染又进行了解析HTML构建DOM、构建过程加载子资源、下载并执行JS代码、样式计算、布局、绘制、合成，一步一步的构建出一个可交互的WEB页面，之后浏览器进程又接受页面的交互事件信息，并将其交给渲染进程，渲染进程内主进程进行命中测试，查找目标元素并执行绑定的事件，完成页面的交互。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS中的垂直居中技巧</title>
      <link href="/2020/06/08/CSS%E4%B8%AD%E7%9A%84%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E6%8A%80%E5%B7%A7/"/>
      <url>/2020/06/08/CSS%E4%B8%AD%E7%9A%84%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1、Line-height"><a href="#1、Line-height" class="headerlink" title="1、Line-height"></a>1、Line-height</h4><p>​    适用情景：单行文字垂直居中</p><p>​    例如按钮、下拉框、导航此类元素最常见到的方式，此方式的原理是在于将单行文字的行高设定后，文字会位于行高的垂直中间位置，利用此原理就能轻松达成垂直居中的要求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;content&quot;&gt;这是要居中的文字&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">.content&#123;  width: 400px;  background: #ccc;  line-height:100px;  margin: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、Line-height-inline-block"><a href="#2、Line-height-inline-block" class="headerlink" title="2、Line-height+inline-block"></a>2、Line-height+inline-block</h4><p>​    适用情景：多对象的垂直居中</p><p>​    将多个元素或多行元素当成一个行元素来看待，所以我们必须要将这些数据多包一层，并将其设定为inline-block，并在该inline-block对象的外层对象使用inline-block来代替height的设置，如此便可以达到垂直居中的目的了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;line-height + inline-block&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;box box2&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">  &lt;a href&#x3D;&quot;#&quot;&gt;我是元素中的一个元素&lt;&#x2F;a&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"> &lt;&#x2F;div&gt;</span><br><span class="line">.box&#123;  width: 500px;  border: 1px solid #f00;  margin: auto;  line-height: 200px;  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.box2 .content&#123;  display: inline-block;  height: auto;  line-height:1;  width: 400px;  background: #ccc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="3、absolute-margin-负值"><a href="#3、absolute-margin-负值" class="headerlink" title="3、absolute + margin 负值"></a>3、absolute + margin 负值</h4><p>​    适用情景：多行文字的垂直居中技巧</p><p>​    设置元素为绝对定位并设置top:50%来抓取空间高度的50%，接着在将居中元素的margin-top设定为负一半的高度，这样就能让元素居中了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;absolute + margin 负值&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;box box4&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;content&quot;&gt;我要居中&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">h2&#123;  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.box&#123;  width: 500px;  height: 250px;  border: 1px solid #f00;  margin: auto;  position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.box4 .content&#123;  width: 400px;  background: #ccc;  height: 70px;  position: absolute;  top:50%;  left: 50%;  margin-left: -200px;  margin-top: -35px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、absolute-margin-auto"><a href="#4、absolute-margin-auto" class="headerlink" title="4、absolute + margin auto"></a>4、absolute + margin auto</h4><p>​    适用情景：多行文字的垂直居中技巧</p><p>​    当元素设置为绝对定位后，假设它是抓不到整体可运用的空间范围，所以margin:auto会失效，但当你设置了top:0;bottom:0;时，绝对定位元素就抓到了可运用的空间了，这时你的margin:auto就生效了。如果你的绝对定位元素需要水平居中于父层，那你同样可以设定left:0;right:0;来让绝对定位元素取得空间可运用范围，再让marign-left与margin-right设定为auto即可居中。但此方式的缺点是你的定位元素必须有固定的宽高（百分比也算）才能正常居中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;absolute + translate(-50%, -50%)&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;box box5&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;content&quot;&gt;我要居中&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">h2&#123;  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.box&#123;  width: 500px;  height: 250px;  border: 1px solid #f00;  margin: auto;  position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.content&#123;  width: 400px;  background: #ccc;  height: 70px;  position: absolute;  top: 0;  right: 0;  bottom: 0;  left: 0;  margin: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、absolute-translate"><a href="#5、absolute-translate" class="headerlink" title="5、absolute + translate"></a>5、absolute + translate</h4><p>​    适用情景：多行文字的垂直居中技巧</p><p>​    因为此居中的定位元素不需要固定的宽高，我们利用绝对定位时的top 与right设置元素的上方跟左方各为50%，再利用translate(-50%,-50%)位移居中元素自身宽与高的50%就能达成居中的目的了（CSS3）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;absolute + margin: auto&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;box box6&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;content&quot;&gt;我要居中&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">h2&#123;  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.box&#123;  width: 500px;  height: 250px;  border: 1px solid #f00;  margin: auto;  position: relative;&#125;</span><br><span class="line"> .box5 .content&#123;  width: 400px;  background: #ccc;  position: absolute;  top:50%;  left: 50%;  transform: translate(-50%, -50%);&#125;</span><br></pre></td></tr></table></figure><h4 id="6、Flex-align-items"><a href="#6、Flex-align-items" class="headerlink" title="6、Flex + align-items"></a>6、Flex + align-items</h4><p>​    适用情景：多行文字的垂直居中技巧</p><p>​    只要设定父层display:flex以及设定次轴(cross axis)属性align-items:center ，该方式的优点是此层不需要设定高度即可自动居中。</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;Flex + align-items&lt;&#x2F;h2&gt;&lt;div class&#x3D;&quot;box box7&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;content&quot;&gt;我要居中 &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">h2&#123;  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.box&#123;  width: 500px;  height: 250px;  border: 1px solid #f00;  margin: auto;  display: flex;  justify-content: center;  align-items: center; </span><br><span class="line">&#125;</span><br><span class="line">.content&#123;  width: 400px;  background: #ccc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="7、Flex-margin"><a href="#7、Flex-margin" class="headerlink" title="7、Flex + margin"></a>7、Flex + margin</h4><p>​    适用情景：多行文字的垂直居中技巧</p><p>​    由于Flex元素对空间解读的特殊性，我们只要在父层元素设定display:flex，接着在需要垂直居中的元素上设定margin:auto，即可自动居中</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;Flex + margin&lt;&#x2F;h2&gt;&lt;div class&#x3D;&quot;box box9&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;content&quot;&gt;我要居中&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">h2&#123;  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.box&#123;  width: 500px;  height: 250px;  border: 1px solid #f00;  margin: auto;  display: flex;</span><br><span class="line">&#125;</span><br><span class="line">.content&#123;  width: 400px;  background: #ccc;  margin: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="8、Flex-align-self"><a href="#8、Flex-align-self" class="headerlink" title="8、Flex + align-self"></a>8、Flex + align-self</h4><p>​    适用情景：多行文字的垂直居中技巧</p><p>​    align-self 应该大家都不陌生，基本上就是对flex次轴cross axis 的个别对齐方式只要对单一子层元素设定align-self:center就能达成垂直居中的目的了。</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;Flex + align-self&lt;&#x2F;h2&gt;&lt;div class&#x3D;&quot;box box10&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;content&quot;&gt;我要居中&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">h2&#123;  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.box&#123;  width: 500px;  height: 250px;  border: 1px solid #f00;  margin: auto;  display: flex;  justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line">.content&#123;  width: 400px;  background: #ccc;  align-self: center</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="9、Display：table-cell"><a href="#9、Display：table-cell" class="headerlink" title="9、Display：table-cell"></a>9、Display：table-cell</h4><p>​    适用情景：多行文字的垂直居中技巧</p><p>原理在于使用 CSS display属性将div设置成表格的单元格，这样就能利用支持存储单元格对齐的vertical-align属性来将信息垂直居中</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;display: table-cell&lt;&#x2F;h2&gt;&lt;div class&#x3D;&quot;box box19&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;content&quot;&gt;我要居中&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">h2&#123;  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.box&#123;  width: 500px;  height: 250px;  border: 1px solid #f00;  margin: auto;    text-align: center;    display: table-cell;  vertical-align: middle;</span><br><span class="line">&#125;</span><br><span class="line">.content&#123;  width: 400px;  background: #ccc;  margin: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="10、Relative-translateY"><a href="#10、Relative-translateY" class="headerlink" title="10、Relative + translateY"></a>10、Relative + translateY</h4><p>​    适用情景：多行文字的垂直居中技巧</p><p>​    利用了top:50%的招式，让你的元素上方能产生固定百分比的距离，接着让要居中的元素本身使用tanslateY的百分比来达成垂直居中的需求，translate是一个很棒的属性，由于translate的百分比单位是利用元素自身的尺寸作为100%，这样让我们要利用元素自身宽高做事变得方便很多。</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;relative + translateY(-50%)&lt;&#x2F;h2&gt;&lt;div class&#x3D;&quot;box box21&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;content&quot;&gt;web前端开发&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">h2&#123;  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.box&#123;  width: 500px;  height: 250px;  border: 1px solid #f00;  margin: auto;</span><br><span class="line">&#125;</span><br><span class="line">.content&#123;  width: 400px;  background: #ccc;  position: relative;  top: 50%;  transform: translateY(-50%);  margin: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>小结：垂直居中的方法还有很多，这里只例举了一部分。</p><h5 id="重要知识补充："><a href="#重要知识补充：" class="headerlink" title="重要知识补充："></a>重要知识补充：</h5><p>​    1、flex布局：Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为Flex布局。</p><p>​    Webkit内核的浏览器，必须加上-webkit前缀。</p><p>​    容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。</p><p>​    flex-direction属性决定主轴的方向（即项目的排列方向）</p><p>​    flex-wrap属性定义，如果一条轴线排不下，如何换行。</p><p>​    flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</p><p>​    justify-content属性定义了项目在主轴上的对齐方式。</p><p>​    align-items属性定义项目在交叉轴上如何对齐。</p><p>​    align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p><p>​    order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p><p>​    flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p><p>​    flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p><p>​    flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</p><p>​    flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</p><p>​    align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -css </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
